"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onShutdown = exports.onExit = exports.onDidChangeWatchedFiles = exports.onExecuteCommand = exports.sendDiagnosticsEnd = exports.sendDiagnosticsBegin = exports.applyEditImpl = exports.publishDiagnostics = exports.onDidChangeConfiguration = exports.onDocumentFormatting = exports.onFoldingRanges = exports.onCodeLens = exports.onCodeAction = exports.onReferences = exports.onWorkspaceSymbol = exports.onDocumentSymbol = exports.onSignatureHelp = exports.onHover = exports.onCompletion = exports.onDefinition = void 0;
const vscode_jsonrpc_1 = require("vscode-jsonrpc");
let registerHandler = (registerF) => (f) => () => registerF(x => f(x)());
let registerHandler0 = (registerF) => (f) => () => registerF(f);
let registerNotificationHandler = (registerF) => (f) => () => registerF(x => f(x)());
let registerNotificationHandler0 = (registerF) => (f) => () => registerF(f);
const onDefinition = (conn) => registerHandler(conn.onDefinition);
exports.onDefinition = onDefinition;
const onCompletion = (conn) => registerHandler(conn.onCompletion);
exports.onCompletion = onCompletion;
const onHover = (conn) => registerHandler(conn.onHover);
exports.onHover = onHover;
const onSignatureHelp = (conn) => registerHandler(conn.onSignatureHelp);
exports.onSignatureHelp = onSignatureHelp;
const onDocumentSymbol = (conn) => registerHandler(conn.onDocumentSymbol);
exports.onDocumentSymbol = onDocumentSymbol;
const onWorkspaceSymbol = (conn) => registerHandler(conn.onWorkspaceSymbol);
exports.onWorkspaceSymbol = onWorkspaceSymbol;
const onReferences = (conn) => registerHandler(conn.onReferences);
exports.onReferences = onReferences;
const onCodeAction = (conn) => registerHandler(conn.onCodeAction);
exports.onCodeAction = onCodeAction;
const onCodeLens = (conn) => registerHandler(conn.onCodeLens);
exports.onCodeLens = onCodeLens;
const onFoldingRanges = (conn) => registerHandler(conn.onFoldingRanges);
exports.onFoldingRanges = onFoldingRanges;
const onDocumentFormatting = (conn) => registerHandler(conn.onDocumentFormatting);
exports.onDocumentFormatting = onDocumentFormatting;
const onDidChangeConfiguration = (conn) => registerNotificationHandler(conn.onDidChangeConfiguration);
exports.onDidChangeConfiguration = onDidChangeConfiguration;
const publishDiagnostics = (conn) => (params) => () => conn.sendDiagnostics(params);
exports.publishDiagnostics = publishDiagnostics;
const applyEditImpl = (conn) => (edit) => () => conn.workspace.applyEdit(edit).then(x => x.applied);
exports.applyEditImpl = applyEditImpl;
const sendDiagnosticsBegin = (conn) => () => conn.sendNotification(new vscode_jsonrpc_1.NotificationType0('textDocument/diagnosticsBegin'));
exports.sendDiagnosticsBegin = sendDiagnosticsBegin;
const sendDiagnosticsEnd = (conn) => () => conn.sendNotification(new vscode_jsonrpc_1.NotificationType0('textDocument/diagnosticsEnd'));
exports.sendDiagnosticsEnd = sendDiagnosticsEnd;
const onExecuteCommand = (conn) => registerHandler(conn.onExecuteCommand);
exports.onExecuteCommand = onExecuteCommand;
const onDidChangeWatchedFiles = (conn) => registerNotificationHandler(conn.onDidChangeWatchedFiles);
exports.onDidChangeWatchedFiles = onDidChangeWatchedFiles;
const onExit = (conn) => registerNotificationHandler0(conn.onExit);
exports.onExit = onExit;
const onShutdown = (conn) => registerHandler0(conn.onShutdown);
exports.onShutdown = onShutdown;
