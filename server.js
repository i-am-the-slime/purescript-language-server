// Generated by purs bundle 0.14.1
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  }; 
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  var flap = function (dictFunctor) {
      return function (ff) {
          return function (x) {
              return map(dictFunctor)(function (f) {
                  return f(x);
              })(ff);
          };
      };
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["flap"] = flap;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];            
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyFn = new Apply(function () {
      return Data_Functor.functorFn;
  }, function (f) {
      return function (g) {
          return function (x) {
              return f(x)(g(x));
          };
      };
  });
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyFn"] = applyFn;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 66, column 1 - line 66, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeFn = new Applicative(function () {
      return Control_Apply.applyFn;
  }, function (x) {
      return function (v) {
          return x;
      };
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
  exports["applicativeFn"] = applicativeFn;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];          
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  }; 
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];                  
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var EqRecord = function (eqRecord) {
      this.eqRecord = eqRecord;
  };
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqRowNil = new EqRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return true;
          };
      };
  });
  var eqRecord = function (dict) {
      return dict.eqRecord;
  };
  var eqRec = function (dictRowToList) {
      return function (dictEqRecord) {
          return new Eq(eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value));
      };
  }; 
  var eqNumber = new Eq($foreign.eqNumberImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  }; 
  var eqRowCons = function (dictEqRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictEq) {
                  return new EqRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var get = Record_Unsafe.unsafeGet(key);
                              return eq(dictEq)(get(ra))(get(rb)) && tail;
                          };
                      };
                  });
              };
          };
      };
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqArray"] = eqArray;
  exports["eqRec"] = eqRec;
  exports["eqRowNil"] = eqRowNil;
  exports["eqRowCons"] = eqRowCons;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };

  exports.cons = function (head) {
    return function (tail) {
      return [head].concat(tail);
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var ShowRecordFields = function (showRecordFields) {
      this.showRecordFields = showRecordFields;
  };

  // | The `Show` type class represents those types which can be converted into
  // | a human-readable `String` representation.
  // |
  // | While not required, it is recommended that for any expression `x`, the
  // | string `show x` be executable PureScript code which evaluates to the same
  // | value as the expression `x`.
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showRecordFieldsNil = new ShowRecordFields(function (v) {
      return function (v1) {
          return [  ];
      };
  });
  var showRecordFields = function (dict) {
      return dict.showRecordFields;
  };
  var showRecord = function (dictRowToList) {
      return function (dictShowRecordFields) {
          return new Show(function (record) {
              var v = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
              if (v.length === 0) {
                  return "{}";
              };
              return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
          });
      };
  }; 
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);  
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Data.Show (line 20, column 1 - line 22, column 23): " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  var showRecordFieldsCons = function (dictIsSymbol) {
      return function (dictShowRecordFields) {
          return function (dictShow) {
              return new ShowRecordFields(function (v) {
                  return function (record) {
                      var tail = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var focus = Record_Unsafe.unsafeGet(key)(record);
                      return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                  };
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
  exports["showRecord"] = showRecord;
  exports["showRecordFieldsNil"] = showRecordFieldsNil;
  exports["showRecordFieldsCons"] = showRecordFieldsCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];                
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Just) {
              return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe (line 216, column 1 - line 218, column 28): " + [ v.constructor.name ]);
      });
  };
  var maybe$prime = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v(Data_Unit.unit);
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 243, column 1 - line 243, column 62): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["maybe'"] = maybe$prime;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["showMaybe"] = showMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var showEither = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              if (v instanceof Left) {
                  return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Right) {
                  return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Either (line 173, column 1 - line 175, column 46): " + [ v.constructor.name ]);
          });
      };
  };
  var note = function (a) {
      return Data_Maybe.maybe(new Left(a))(Right.create);
  }; 
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var monadEither = new Control_Monad.Monad(function () {
      return applicativeEither;
  }, function () {
      return bindEither;
  });
  var altEither = new Control_Alt.Alt(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return v1;
          };
          return v;
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["note"] = note;
  exports["hush"] = hush;
  exports["functorEither"] = functorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["altEither"] = altEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
  exports["showEither"] = showEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Error.Util"] = $PS["Control.Error.Util"] || {};
  var exports = $PS["Control.Error.Util"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var hush = Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  exports["hush"] = hush;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
  var exports = $PS["Control.Lazy"];               
  var Lazy = function (defer) {
      this.defer = defer;
  }; 
  var defer = function (dict) {
      return dict.defer;
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var SemigroupRecord = function (appendRecord) {
      this.appendRecord = appendRecord;
  };
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupUnit = new Semigroup(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupRecordNil = new SemigroupRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var appendRecord = function (dict) {
      return dict.appendRecord;
  };
  var semigroupRecord = function (dictRowToList) {
      return function (dictSemigroupRecord) {
          return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value));
      };
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return append(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  var semigroupRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemigroupRecord) {
              return function (dictSemigroup) {
                  return new SemigroupRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                          };
                      };
                  });
              };
          };
      };
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
  exports["semigroupRecord"] = semigroupRecord;
  exports["semigroupRecordNil"] = semigroupRecordNil;
  exports["semigroupRecordCons"] = semigroupRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var MonoidRecord = function (SemigroupRecord0, memptyRecord) {
      this.SemigroupRecord0 = SemigroupRecord0;
      this.memptyRecord = memptyRecord;
  };
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var monoidUnit = new Monoid(function () {
      return Data_Semigroup.semigroupUnit;
  }, Data_Unit.unit);
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var monoidRecordNil = new MonoidRecord(function () {
      return Data_Semigroup.semigroupRecordNil;
  }, function (v) {
      return {};
  });                        
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var memptyRecord = function (dict) {
      return dict.memptyRecord;
  };
  var monoidRecord = function (dictRowToList) {
      return function (dictMonoidRecord) {
          return new Monoid(function () {
              return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
          }, memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value));
      };
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return new Monoid(function () {
          return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
      }, function (v) {
          return mempty(dictMonoid);
      });
  };
  var monoidRecordCons = function (dictIsSymbol) {
      return function (dictMonoid) {
          return function (dictCons) {
              return function (dictMonoidRecord) {
                  return new MonoidRecord(function () {
                      return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                  }, function (v) {
                      var tail = memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      return insert(mempty(dictMonoid))(tail);
                  });
              };
          };
      };
  };
  var guard = function (dictMonoid) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return mempty(dictMonoid);
              };
              throw new Error("Failed pattern match at Data.Monoid (line 94, column 1 - line 94, column 49): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["guard"] = guard;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidFn"] = monoidFn;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
  exports["monoidRecord"] = monoidRecord;
  exports["monoidRecordNil"] = monoidRecordNil;
  exports["monoidRecordCons"] = monoidRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  var semigroupEffect = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup)));
  };
  var monoidEffect = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffect(dictMonoid.Semigroup0());
      }, $foreign.pureE(Data_Monoid.mempty(dictMonoid)));
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
  exports["semigroupEffect"] = semigroupEffect;
  exports["monoidEffect"] = monoidEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];                
  var $$try = function (action) {
      return $foreign.catchException((function () {
          var $0 = Control_Applicative.pure(Effect.applicativeEffect);
          return function ($1) {
              return $0(Data_Either.Left.create($1));
          };
      })())(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
  };
  var $$throw = function ($2) {
      return $foreign.throwException($foreign.error($2));
  };                                                                               
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["throw"] = $$throw;
  exports["try"] = $$try;
  exports["showError"] = showError;
  exports["error"] = $foreign.error;
  exports["message"] = $foreign.message;
  exports["throwException"] = $foreign.throwException;
  exports["catchException"] = $foreign.catchException;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];                
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };                          
  var monadThrowEffect = new MonadThrow(function () {
      return Effect.monadEffect;
  }, Effect_Exception.throwException);
  var monadErrorEffect = new MonadError(function () {
      return monadThrowEffect;
  }, Data_Function.flip(Effect_Exception.catchException));
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $17 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($18) {
                  return $17(Data_Either.Left.create($18));
              };
          })());
      };
  };
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["try"] = $$try;
  exports["monadErrorEffect"] = monadErrorEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];            
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($92) {
                      return $91(Data_Either.Left.create($92));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $93 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($94) {
              return ExceptT($93(Data_Either.Right.create($94)));
          };
      })());
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $103 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($104) {
              return ExceptT($103(Data_Either.Left.create($104)));
          };
      })());
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Alt.Alt(function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(function (rm) {
                      if (rm instanceof Data_Either.Right) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                      };
                      if (rm instanceof Data_Either.Left) {
                          return Control_Bind.bind(dictMonad.Bind1())(v1)(function (rn) {
                              if (rn instanceof Data_Either.Right) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                              };
                              if (rn instanceof Data_Either.Left) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 87, column 9 - line 89, column 49): " + [ rn.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 83, column 5 - line 89, column 49): " + [ rm.constructor.name ]);
                  });
              };
          });
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["altExceptT"] = altExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var wrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var un = function (dictNewtype) {
      return function (v) {
          return unwrap();
      };
  };
  var over = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return Safe_Coerce.coerce();
          };
      };
  };
  var alaF = function (dictCoercible) {
      return function (dictCoercible1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  exports["wrap"] = wrap;
  exports["unwrap"] = unwrap;
  exports["un"] = un;
  exports["alaF"] = alaF;
  exports["over"] = over;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Newtype = $PS["Data.Newtype"];                                                
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap();
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                     
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Monoid.Conj"] = $PS["Data.Monoid.Conj"] || {};
  var exports = $PS["Data.Monoid.Conj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["monoidConj"] = monoidConj;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["zero"] = zero;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $311 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($312) {
                      return $311(f($312));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var length = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(function (c) {
              return function (v) {
                  return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
              };
          })(Data_Semiring.zero(dictSemiring));
      };
  };
  var foldableTuple = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v.value1)(z);
          };
      };
  });
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $321 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $322 = Data_Eq.eq(dictEq);
          return function ($323) {
              return $321($322($323));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              var $324 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
              var $325 = elem(dictFoldable)(dictEq)(x);
              return function ($326) {
                  return $324($325($326));
              };
          };
      };
  };
  var or = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return any(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["or"] = or;
  exports["all"] = all;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["notElem"] = notElem;
  exports["find"] = find;
  exports["length"] = length;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
  exports["foldableTuple"] = foldableTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Semigroup.Foldable"] = $PS["Data.Semigroup.Foldable"] || {};
  var exports = $PS["Data.Semigroup.Foldable"];
  var Foldable1 = function (Foldable0, foldMap1, foldl1, foldr1) {
      this.Foldable0 = Foldable0;
      this.foldMap1 = foldMap1;
      this.foldl1 = foldl1;
      this.foldr1 = foldr1;
  };
  var foldl1 = function (dict) {
      return dict.foldl1;
  };
  exports["Foldable1"] = Foldable1;
  exports["foldl1"] = foldl1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];
  var Data_Show = $PS["Data.Show"];                              
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var showNonEmpty = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (m) {
              return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
          };
      });
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  var foldable1NonEmpty = function (dictFoldable) {
      return new Data_Semigroup_Foldable.Foldable1(function () {
          return foldableNonEmpty(dictFoldable);
      }, function (dictSemigroup) {
          return function (f) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(function (s) {
                      return function (a1) {
                          return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
                      };
                  })(f(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (v) {
              return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
          };
      }, function (f) {
          return function (v) {
              return Data_Maybe.maybe(v.value0)(f(v.value0))(Data_Foldable.foldr(dictFoldable)(function (a1) {
                  var $156 = Data_Maybe.maybe(a1)(f(a1));
                  return function ($157) {
                      return Data_Maybe.Just.create($156($157));
                  };
              })(Data_Maybe.Nothing.value)(v.value1));
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["showNonEmpty"] = showNonEmpty;
  exports["functorNonEmpty"] = functorNonEmpty;
  exports["foldable1NonEmpty"] = foldable1NonEmpty;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];                
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  }; 
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Tuple(m.value0, f(m.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["showTuple"] = showTuple;
  exports["functorTuple"] = functorTuple;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  }; 
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  }; 
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var toList = function (v) {
      return new Cons(v.value0, v.value1);
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $204 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($205) {
                  return $204(f($205));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = (function () {
              var go = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v instanceof Nil) {
                              $tco_done1 = true;
                              return acc;
                          };
                          if (v instanceof Cons) {
                              $tco_var_acc = new Cons(v.value0, acc);
                              $copy_v = v.value1;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return go(Nil.value);
          })();
          var $206 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($207) {
              return $206(rev($207));
          };
      };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });           
  var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
      return function (as$prime) {
          return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
      });
  }; 
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
      };
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, (function () {
      var $235 = Data_NonEmpty.singleton(plusList);
      return function ($236) {
          return NonEmptyList($235($236));
      };
  })());
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["plusList"] = plusList;
  exports["showNonEmptyList"] = showNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 372, column 3 - line 372, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  exports["reverse"] = reverse;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.CatQueue"] = $PS["Data.CatQueue"] || {};
  var exports = $PS["Data.CatQueue"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };                                                                                                
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.CatList"] = $PS["Data.CatList"] || {};
  var exports = $PS["Data.CatList"];
  var Data_CatQueue = $PS["Data.CatQueue"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (v1) {
          if (v instanceof CatNil) {
              return v1;
          };
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done1 = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $44 = Data_CatQueue["null"](v.value1);
              if ($44) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
  };
  var empty = CatNil.value;
  var append = link;
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Free"] = $PS["Control.Monad.Free"] || {};
  var exports = $PS["Control.Monad.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_CatList = $PS["Data.CatList"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var runFree = function (dictFunctor) {
      return function (k) {
          var go = function ($copy_f) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(f) {
                  var v = toView(f);
                  if (v instanceof Return) {
                      $tco_done = true;
                      return v.value0;
                  };
                  if (v instanceof Bind) {
                      $copy_f = k(Data_Functor.map(dictFunctor)(v.value1)(v.value0));
                      return;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free (line 178, column 10 - line 180, column 33): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_f);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)((function () {
              var $120 = Control_Applicative.pure(freeApplicative);
              return function ($121) {
                  return $120(k($121));
              };
          })())(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($122) {
      return fromView(Return.create($122));
  });
  exports["runFree"] = runFree;
  exports["freeApplicative"] = freeApplicative;
  exports["freeApply"] = freeApply;
  exports["freeMonad"] = freeMonad;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.ST.Global"] = $PS["Control.Monad.ST.Global"] || {};
  var exports = $PS["Control.Monad.ST.Global"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var toEffect = Unsafe_Coerce.unsafeCoerce;
  exports["toEffect"] = toEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.ST.Class"] = $PS["Control.Monad.ST.Class"] || {};
  var exports = $PS["Control.Monad.ST.Class"];
  var Control_Monad_ST_Global = $PS["Control.Monad.ST.Global"];                
  var MonadST = function (liftST) {
      this.liftST = liftST;
  };                                                                                  
  var monadSTEffect = new MonadST(Control_Monad_ST_Global.toEffect);
  var liftST = function (dict) {
      return dict.liftST;
  };
  exports["liftST"] = liftST;
  exports["monadSTEffect"] = monadSTEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (a) {
    return function (ref) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];          
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["modify"] = modify;
  exports["functorST"] = functorST;
  exports["applicativeST"] = applicativeST;
  exports["bindST"] = bindST;
  exports["monadST"] = monadST;
  exports["foreach"] = $foreign.foreach;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
  var exports = $PS["Control.Parallel.Class"];       
  var Parallel = function (Applicative1, Monad0, parallel, sequential) {
      this.Applicative1 = Applicative1;
      this.Monad0 = Monad0;
      this.parallel = parallel;
      this.sequential = sequential;
  };
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
  exports["Parallel"] = Parallel;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Parallel"] = $PS["Control.Parallel"] || {};
  var exports = $PS["Control.Parallel"];
  var Control_Category = $PS["Control.Category"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Foldable = $PS["Data.Foldable"];                      
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              var $17 = Control_Parallel_Class.sequential(dictParallel);
              var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)((function () {
                  var $20 = Control_Parallel_Class.parallel(dictParallel);
                  return function ($21) {
                      return $20(f($21));
                  };
              })());
              return function ($19) {
                  return $17($18($19));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["parSequence_"] = parSequence_;
})(PS);
(function(exports) {
  // module Control.Promise

  exports.promise = function (f) {
    return function () {
      return new Promise(function (success, error) {
        var succF = function (s) { return function() { return success(s); } };
        var failF = function (s) { return function() { return error(s); } };

        // This indicates the aff was wrong?
        try { f(succF)(failF)(); }
        catch (e) {
          error(e);
        }
      });
    };
  };

  exports.thenImpl = function(promise) {
    return function(errCB) {
      return function(succCB) {
        return function() {
          promise.then(succCB, errCB);
        };
      };
    };
  };
})(PS["Control.Promise"] = PS["Control.Promise"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];          
  var Identity = function (x) {
      return x;
  };
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["functorIdentity"] = functorIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._fork = function (immediate) {
    return function (aff) {
      return Aff.Fork(immediate, aff);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports._parAffAlt = function (aff1) {
    return function (aff2) {
      return Aff.ParAlt(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports.generalBracket = function (acquire) {
    return function (options) {
      return function (k) {
        return Aff.Bracket(acquire, options, k);
      };
    };
  };

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };

  exports._delay = function () {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }

    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }

    return function (right, ms) {
      return Aff.Async(function (cb) {
        return function () {
          var timer = setDelay(ms, cb(right()));
          return function () {
            return Aff.Sync(function () {
              return right(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];

  // | A cancellation effect for actions run via `makeAff`. If a `Fiber` is
  // | killed, and an async action is pending, the canceler will be called to
  // | clean it up.
  var Canceler = function (x) {
      return x;
  }; 
  var functorParAff = new Data_Functor.Functor($foreign["_parAffMap"]);
  var functorAff = new Data_Functor.Functor($foreign["_map"]);

  // | Forks an `Aff` from within a parent `Aff` context, returning the `Fiber`.
  var forkAff = $foreign["_fork"](true);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };

  // | Forks an `Aff` from an `Effect` context, returning the `Fiber`.
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };

  // | Forks an `Aff` from an `Effect` context, discarding the `Fiber`.
  var launchAff_ = (function () {
      var $40 = Data_Functor["void"](Effect.functorEffect);
      return function ($41) {
          return $40(launchAff($41));
      };
  })();                              

  // | Pauses the running fiber.
  var delay = function (v) {
      return $foreign["_delay"](Data_Either.Right.create, v);
  };

  // | Guarantees resource acquisition and cleanup. The first effect may acquire
  // | some resource, while the second will dispose of it. The third effect makes
  // | use of the resource. Disposal is always run last, regardless. Neither
  // | acquisition nor disposal may be cancelled and are guaranteed to run until
  // | they complete.
  var bracket = function (acquire) {
      return function (completed) {
          return $foreign.generalBracket(acquire)({
              killed: Data_Function["const"](completed),
              failed: Data_Function["const"](completed),
              completed: Data_Function["const"](completed)
          });
      };
  };

  // | Runs effects in parallel, combining their results.
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, $foreign["_parAffApply"]);
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var semigroupAff = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyAff)(Data_Semigroup.append(dictSemigroup)));
  };
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);

  // | A canceler from an Effect action.
  var effectCanceler = (function () {
      var $42 = Effect_Class.liftEffect(monadEffectAff);
      return function ($43) {
          return Canceler(Data_Function["const"]($42($43)));
      };
  })();

  // | Blocks until the fiber completes, yielding the result. If the fiber
  // | throws an exception, it is rethrown in the current fiber.
  var joinFiber = function (v) {
      return $foreign.makeAff(function (k) {
          return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
      });
  }; 

  // | Invokes pending cancelers in a fiber and runs cleanup effects. Blocks
  // | until the fiber has fully exited.
  var killFiber = function (e) {
      return function (v) {
          return Control_Bind.bind(bindAff)(Effect_Class.liftEffect(monadEffectAff)(v.isSuspended))(function (v1) {
              if (v1) {
                  return Effect_Class.liftEffect(monadEffectAff)(Data_Functor["void"](Effect.functorEffect)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))));
              };
              return $foreign.makeAff(function (k) {
                  return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.kill(e, k));
              });
          });
      };
  };   
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign["_throwError"]);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign["_catchError"]);

  // | A monomorphic version of `try`. Catches thrown errors and lifts them
  // | into an `Either`.
  var attempt = Control_Monad_Error_Class["try"](monadErrorAff);

  // | Forks an `Aff` from an `Effect` context and also takes a callback to run when
  // | it completes. Returns the pending `Fiber`.
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)((function () {
              var $46 = Effect_Class.liftEffect(monadEffectAff);
              return function ($47) {
                  return $46(k($47));
              };
          })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };

  // | Forks an `Aff` from an `Effect` context and also takes a callback to run when
  // | it completes, discarding the `Fiber`.
  var runAff_ = function (k) {
      return function (aff) {
          return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
      };
  };
  var parallelAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, Unsafe_Coerce.unsafeCoerce, $foreign["_sequential"]);
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, (function () {
      var $50 = Control_Parallel_Class.parallel(parallelAff);
      var $51 = Control_Applicative.pure(applicativeAff);
      return function ($52) {
          return $50($51($52));
      };
  })());
  var semigroupCanceler = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (err) {
              return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ v(err), v1(err) ]);
          };
      };
  });
  var monoidAff = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupAff(dictMonoid.Semigroup0());
      }, Control_Applicative.pure(applicativeAff)(Data_Monoid.mempty(dictMonoid)));
  };

  // | A canceler which does not cancel anything.
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));

  // | A no-op `Canceler` can be constructed with `mempty`.
  var monoidCanceler = new Data_Monoid.Monoid(function () {
      return semigroupCanceler;
  }, nonCanceler);

  // | Ignores any errors.
  var apathize = (function () {
      var $54 = Data_Functor.map(functorAff)(Data_Function["const"](Data_Unit.unit));
      return function ($55) {
          return $54(attempt($55));
      };
  })();

  // | Races effects in parallel. Returns the first successful result or the
  // | first error if all fail with an exception. Losing branches will be
  // | cancelled.
  var altParAff = new Control_Alt.Alt(function () {
      return functorParAff;
  }, $foreign["_parAffAlt"]);
  var altAff = new Control_Alt.Alt(function () {
      return functorAff;
  }, function (a1) {
      return function (a2) {
          return Control_Monad_Error_Class.catchError(monadErrorAff)(a1)(Data_Function["const"](a2));
      };
  });
  var plusAff = new Control_Plus.Plus(function () {
      return altAff;
  }, Control_Monad_Error_Class.throwError(monadThrowAff)(Effect_Exception.error("Always fails")));
  exports["launchAff_"] = launchAff_;
  exports["runAff"] = runAff;
  exports["runAff_"] = runAff_;
  exports["forkAff"] = forkAff;
  exports["attempt"] = attempt;
  exports["apathize"] = apathize;
  exports["delay"] = delay;
  exports["killFiber"] = killFiber;
  exports["joinFiber"] = joinFiber;
  exports["bracket"] = bracket;
  exports["nonCanceler"] = nonCanceler;
  exports["effectCanceler"] = effectCanceler;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monoidAff"] = monoidAff;
  exports["altAff"] = altAff;
  exports["plusAff"] = plusAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["altParAff"] = altParAff;
  exports["parallelAff"] = parallelAff;
  exports["monoidCanceler"] = monoidCanceler;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function(exports) {
  "use strict";

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };

  exports.isArray = Array.isArray || function (value) {
    return Object.prototype.toString.call(value) === "[object Array]";
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var semigroupOrdering = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof LT) {
              return LT.value;
          };
          if (v instanceof GT) {
              return GT.value;
          };
          if (v instanceof EQ) {
              return v1;
          };
          throw new Error("Failed pattern match at Data.Ordering (line 21, column 1 - line 24, column 18): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var invert = function (v) {
      if (v instanceof GT) {
          return LT.value;
      };
      if (v instanceof EQ) {
          return EQ.value;
      };
      if (v instanceof LT) {
          return GT.value;
      };
      throw new Error("Failed pattern match at Data.Ordering (line 33, column 1 - line 33, column 31): " + [ v.constructor.name ]);
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["invert"] = invert;
  exports["semigroupOrdering"] = semigroupOrdering;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var lessThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["lessThan"] = lessThan;
  exports["lessThanOrEq"] = lessThanOrEq;
  exports["greaterThan"] = greaterThan;
  exports["comparing"] = comparing;
  exports["min"] = min;
  exports["clamp"] = clamp;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;

  exports.fromStringImpl = function(str, isFinite, just, nothing) {
    var num = parseFloat(str);
    if (isFinite(num)) {
      return just(num);
    } else {
      return nothing;
    }
  };
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var fromString = function (str) {
      return $foreign.fromStringImpl(str, $foreign["isFinite"], Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["fromString"] = fromString;
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";          

  exports.floor = Math.floor;

  function nativeImul(a) {
    return function (b) {
      return Math.imul(a, b);
    };
  }

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
  function emulatedImul(a) {
    /*jshint bitwise: false*/
    return function (b) {
      var ah = a >>> 16 & 0xffff;
      var al = a & 0xffff;
      var bh = b >>> 16 & 0xffff;
      var bl = b & 0xffff;
      // the shift by 0 fixes the sign on the high part
      // the final |0 converts the unsigned value into a signed value
      return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    };
  }
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["floor"] = $foreign.floor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];
  var odd = function (x) {
      return (x & 1) !== 0;
  };            
  var hexadecimal = 16;
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["fromNumber"] = fromNumber;
  exports["floor"] = floor;
  exports["fromString"] = fromString;
  exports["hexadecimal"] = hexadecimal;
  exports["fromStringAs"] = fromStringAs;
  exports["odd"] = odd;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $172 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($173) {
          return Data_List_Types.NonEmptyList($172($173));
      };
  })();
  exports["singleton"] = singleton;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var unsafeToForeign = Unsafe_Coerce.unsafeCoerce;
  var unsafeFromForeign = Unsafe_Coerce.unsafeCoerce;
  var showForeignError = new Data_Show.Show(function (v) {
      if (v instanceof ForeignError) {
          return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof ErrorAtIndex) {
          return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof ErrorAtProperty) {
          return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Foreign (line 64, column 1 - line 68, column 89): " + [ v.constructor.name ]);
  });
  var fail = function (dictMonad) {
      var $118 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad));
      return function ($119) {
          return $118(Data_List_NonEmpty.singleton($119));
      };
  };
  var readArray = function (dictMonad) {
      return function (value) {
          if ($foreign.isArray(value)) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(dictMonad)(new TypeMismatch("array", $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Foreign (line 151, column 1 - line 151, column 66): " + [ value.constructor.name ]);
      };
  };
  var unsafeReadTagged = function (dictMonad) {
      return function (tag) {
          return function (value) {
              if ($foreign.tagOf(value) === tag) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
              };
              if (Data_Boolean.otherwise) {
                  return fail(dictMonad)(new TypeMismatch(tag, $foreign.tagOf(value)));
              };
              throw new Error("Failed pattern match at Foreign (line 110, column 1 - line 110, column 71): " + [ tag.constructor.name, value.constructor.name ]);
          };
      };
  };
  var readBoolean = function (dictMonad) {
      return unsafeReadTagged(dictMonad)("Boolean");
  };
  var readNumber = function (dictMonad) {
      return unsafeReadTagged(dictMonad)("Number");
  };
  var readInt = function (dictMonad) {
      return function (value) {
          var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
          var fromNumber = (function () {
              var $120 = Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither));
              return function ($121) {
                  return $120(Data_Int.fromNumber($121));
              };
          })();
          return Control_Monad_Except_Trans.mapExceptT(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.either(Data_Function["const"](error))(fromNumber)))(readNumber(dictMonad)(value));
      };
  };
  var readString = function (dictMonad) {
      return unsafeReadTagged(dictMonad)("String");
  };
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["unsafeToForeign"] = unsafeToForeign;
  exports["unsafeFromForeign"] = unsafeFromForeign;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readString"] = readString;
  exports["readBoolean"] = readBoolean;
  exports["readInt"] = readInt;
  exports["readArray"] = readArray;
  exports["fail"] = fail;
  exports["showForeignError"] = showForeignError;
  exports["typeOf"] = $foreign.typeOf;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Promise"] = $PS["Control.Promise"] || {};
  var exports = $PS["Control.Promise"];
  var $foreign = $PS["Control.Promise"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];                
  var toAff$prime = function (customCoerce) {
      return function (p) {
          return Effect_Aff.makeAff(function (cb) {
              return Data_Functor.voidRight(Effect.functorEffect)(Data_Monoid.mempty(Effect_Aff.monoidCanceler))($foreign.thenImpl(p)(function ($1) {
                  return cb(Data_Either.Left.create(customCoerce($1)))();
              })(function ($2) {
                  return cb(Data_Either.Right.create($2))();
              }));
          });
      };
  };
  var fromAff = function (aff) {
      return $foreign.promise(function (succ) {
          return function (err) {
              return Effect_Aff.runAff_(Data_Either.either(err)(succ))(aff);
          };
      });
  };
  var coerce = function (fn) {
      return Data_Either.either(function (v) {
          return Effect_Exception.error("Promise failed, couldn't extract JS Error or String");
      })(Control_Category.identity(Control_Category.categoryFn))(Control_Monad_Except.runExcept(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Error")(fn))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Effect_Exception.error)(Foreign.readString(Data_Identity.monadIdentity)(fn)))));
  };
  var toAff = toAff$prime(coerce);
  var toAffE = function (f) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(f))(toAff);
  };
  exports["fromAff"] = fromAff;
  exports["toAffE"] = toAffE;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */
  "use strict";

  function id(x) {
    return x;
  }

  exports.fromBoolean = id;
  exports.fromNumber = id;
  exports.fromString = id;
  exports.fromArray = id;
  exports.fromObject = id;

  exports.jsonNull = null;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  function isArray(a) {
    return Object.prototype.toString.call(a) === "[object Array]";
  }

  exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull();
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (Object.prototype.toString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._fmapObject = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  exports._mapWithKey = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(k)(m0[k]);
      }
    }
    return m;
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  exports.size = function (m) {
    var s = 0;
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        ++s;
      }
    }
    return s;
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  exports._lookupST = function (no, yes, k, m) {
    return function () {
      return k in m ? yes(m[k]) : no;
    };
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;

  exports.keys = Object.keys || toArrayWithKey(function (k) {
    return function () { return k; };
  });
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };                                                                                                 

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unconsImpl = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports.findLastIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = xs.length - 1; i >= 0; i--) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  exports.partition = function (f) {
    return function (xs) {
      var yes = [];
      var no  = [];
      for (var i = 0; i < xs.length; i++) {
        var x = xs[i];
        if (f(x))
          yes.push(x);
        else
          no.push(x);
      }
      return { yes: yes, no: no };
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortByImpl = (function () {
    function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {
      var mid;
      var i;
      var j;
      var k;
      var x;
      var y;
      var c;

      mid = from + ((to - from) >> 1);
      if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);
      if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);

      i = from;
      j = mid;
      k = from;
      while (i < mid && j < to) {
        x = xs2[i];
        y = xs2[j];
        c = fromOrdering(compare(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        }
        else {
          xs1[k++] = x;
          ++i;
        }
      }
      while (i < mid) {
        xs1[k++] = xs2[i++];
      }
      while (j < to) {
        xs1[k++] = xs2[j++];
      }
    }

    return function (compare) {
      return function (fromOrdering) {
        return function (xs) {
          var out;

          if (xs.length < 2) return xs;

          out = xs.slice(0);
          mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);

          return out;
        };
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Folding ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.any = function (p) {
    return function (xs) {
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        if (p(xs[i])) return true;
      }
      return false;
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return [];
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }                         

  exports.thaw = copyImpl;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];                     
  var withArray = function (f) {
      return function (xs) {
          return function __do() {
              var result = $foreign.thaw(xs)();
              f(result)();
              return $foreign.unsafeFreeze(result)();
          };
      };
  };
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["withArray"] = withArray;
  exports["push"] = push;
  exports["new"] = $foreign["new"];
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Array.ST.Iterator"] = $PS["Data.Array.ST.Iterator"] || {};
  var exports = $PS["Data.Array.ST.Iterator"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var peek = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          return v.value0(i);
      };
  };
  var next = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          Control_Monad_ST_Internal.modify(function (v1) {
              return v1 + 1 | 0;
          })(v.value1)();
          return v.value0(i);
      };
  };
  var pushWhile = function (p) {
      return function (iter) {
          return function (array) {
              return function __do() {
                  var $$break = Control_Monad_ST_Internal["new"](false)();
                  while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                      (function __do() {
                          var mx = peek(iter)();
                          if (mx instanceof Data_Maybe.Just && p(mx.value0)) {
                              Data_Array_ST.push(mx.value0)(array)();
                              return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter))();
                          };
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      })();
                  };
                  return {};
              };
          };
      };
  };                                                    
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
  };
  var iterate = function (iter) {
      return function (f) {
          return function __do() {
              var $$break = Control_Monad_ST_Internal["new"](false)();
              while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                  (function __do() {
                      var mx = next(iter)();
                      if (mx instanceof Data_Maybe.Just) {
                          return f(mx.value0)();
                      };
                      if (mx instanceof Data_Maybe.Nothing) {
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      };
                      throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [ mx.constructor.name ]);
                  })();
              };
              return {};
          };
      };
  };
  exports["iterator"] = iterator;
  exports["iterate"] = iterate;
  exports["pushWhile"] = pushWhile;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = $PS["Data.Array.ST.Iterator"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);                                   
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  };
  var uncons = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var toUnfoldable = function (dictUnfoldable) {
      return function (xs) {
          var len = $foreign.length(xs);
          var f = function (i) {
              if (i < len) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Array (line 158, column 3 - line 160, column 26): " + [ i.constructor.name ]);
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
      };
  };
  var take = function (n) {
      return function (xs) {
          var $67 = n < 1;
          if ($67) {
              return [  ];
          };
          return $foreign.slice(0)(n)(xs);
      };
  };
  var tail = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var sortBy = function (comp) {
      return $foreign.sortByImpl(comp)(function (v) {
          if (v instanceof Data_Ordering.GT) {
              return 1;
          };
          if (v instanceof Data_Ordering.EQ) {
              return 0;
          };
          if (v instanceof Data_Ordering.LT) {
              return -1 | 0;
          };
          throw new Error("Failed pattern match at Data.Array (line 831, column 31 - line 834, column 11): " + [ v.constructor.name ]);
      });
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return Data_Array_ST.withArray(Data_Array_ST.push(x))(xs)();
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var nubByEq = function (eq) {
      return function (xs) {
          return (function __do() {
              var arr = Data_Array_ST["new"]();
              Control_Monad_ST_Internal.foreach(xs)(function (x) {
                  return function __do() {
                      var e = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                          var $99 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                          var $100 = $foreign.any(function (v) {
                              return eq(v)(x);
                          });
                          return function ($101) {
                              return $99($100($101));
                          };
                      })())(Data_Array_ST.unsafeFreeze(arr))();
                      return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(e)(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(x)(arr)))();
                  };
              })();
              return Data_Array_ST.unsafeFreeze(arr)();
          })();
      };
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var intercalate = function (dictMonoid) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(dictMonoid);
  };                                                                                     
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array (line 340, column 1 - line 340, column 45): " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var span = function (p) {
      return function (arr) {
          var go = function ($copy_i) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(i) {
                  var v = index(arr)(i);
                  if (v instanceof Data_Maybe.Just) {
                      var $74 = p(v.value0);
                      if ($74) {
                          $copy_i = i + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return new Data_Maybe.Just(i);
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.Array (line 966, column 5 - line 968, column 25): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_i);
              };
              return $tco_result;
          };
          var breakIndex = go(0);
          if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
              return {
                  init: [  ],
                  rest: arr
              };
          };
          if (breakIndex instanceof Data_Maybe.Just) {
              return {
                  init: $foreign.slice(0)(breakIndex.value0)(arr),
                  rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
              };
          };
          if (breakIndex instanceof Data_Maybe.Nothing) {
              return {
                  init: arr,
                  rest: [  ]
              };
          };
          throw new Error("Failed pattern match at Data.Array (line 953, column 3 - line 959, column 30): " + [ breakIndex.constructor.name ]);
      };
  };
  var takeWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).init;
      };
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var groupBy = function (op) {
      return function (xs) {
          return (function __do() {
              var result = Data_Array_ST["new"]();
              var iter = Data_Array_ST_Iterator.iterator(function (v) {
                  return index(xs)(v);
              })();
              Data_Array_ST_Iterator.iterate(iter)(function (x) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(function __do() {
                      var sub = Data_Array_ST["new"]();
                      Data_Array_ST.push(x)(sub)();
                      Data_Array_ST_Iterator.pushWhile(op(x))(iter)(sub)();
                      var grp = Data_Array_ST.unsafeFreeze(sub)();
                      return Data_Array_ST.push(grp)(result)();
                  });
              })();
              return Data_Array_ST.unsafeFreeze(result)();
          })();
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
  var foldl = Data_Foldable.foldl(Data_Foldable.foldableArray);
  var fold = function (dictMonoid) {
      return Data_Foldable.fold(Data_Foldable.foldableArray)(dictMonoid);
  };                                                                              
  var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var intersectBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return $foreign.filter(function (x) {
                  return Data_Maybe.isJust(findIndex(eq(x))(ys));
              })(xs);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var notElem = function (dictEq) {
      return function (a) {
          return function (arr) {
              return Data_Maybe.isNothing(elemIndex(dictEq)(a)(arr));
          };
      };
  };
  var elem = function (dictEq) {
      return function (a) {
          return function (arr) {
              return Data_Maybe.isJust(elemIndex(dictEq)(a)(arr));
          };
      };
  };
  var drop = function (n) {
      return function (xs) {
          var $89 = n < 1;
          if ($89) {
              return xs;
          };
          return $foreign.slice(n)($foreign.length(xs))(xs);
      };
  };
  var takeEnd = function (n) {
      return function (xs) {
          return drop($foreign.length(xs) - n | 0)(xs);
      };
  };
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return foldr($$delete(dictEq));
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $109 = Data_Maybe.maybe([  ])(singleton);
          return function ($110) {
              return $109(f($110));
          };
      })());
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["elem"] = elem;
  exports["notElem"] = notElem;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["concatMap"] = concatMap;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["foldl"] = foldl;
  exports["fold"] = fold;
  exports["intercalate"] = intercalate;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["sortWith"] = sortWith;
  exports["take"] = take;
  exports["takeEnd"] = takeEnd;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["groupBy"] = groupBy;
  exports["nubByEq"] = nubByEq;
  exports["delete"] = $$delete;
  exports["difference"] = difference;
  exports["intersect"] = intersect;
  exports["zip"] = zip;
  exports["length"] = $foreign.length;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["partition"] = $foreign.partition;
  exports["slice"] = $foreign.slice;
  exports["any"] = $foreign.any;
})(PS);
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Functor = $PS["Data.Functor"];          
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  };
  var functorWithIndexArray = new FunctorWithIndex(function () {
      return Data_Functor.functorArray;
  }, $foreign.mapWithIndexArray);
  exports["FunctorWithIndex"] = FunctorWithIndex;
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];              
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = new FoldableWithIndex(function () {
      return Data_Foldable.foldableArray;
  }, function (dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
  }, function (f) {
      return function (z) {
          var $163 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
              return function (v) {
                  return f(v.value0)(y)(v.value1);
              };
          })(z);
          var $164 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
          return function ($165) {
              return $163($164($165));
          };
      };
  }, function (f) {
      return function (z) {
          var $166 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
              return function (y) {
                  return f(v.value0)(v.value1)(y);
              };
          })(z);
          var $167 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
          return function ($168) {
              return $166($167($168));
          };
      };
  });
  var foldMapWithIndex = function (dict) {
      return dict.foldMapWithIndex;
  };
  exports["FoldableWithIndex"] = FoldableWithIndex;
  exports["foldMapWithIndex"] = foldMapWithIndex;
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var traversableTuple = new Traversable(function () {
      return Data_Foldable.foldableTuple;
  }, function () {
      return Data_Tuple.functorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(v.value0))(f(v.value1));
          };
      };
  });
  var traversableMaybe = new Traversable(function () {
      return Data_Foldable.foldableMaybe;
  }, function () {
      return Data_Maybe.functorMaybe;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["for"] = $$for;
  exports["traversableArray"] = traversableArray;
  exports["traversableMaybe"] = traversableMaybe;
  exports["traversableTuple"] = traversableTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.TraversableWithIndex"] = $PS["Data.TraversableWithIndex"] || {};
  var exports = $PS["Data.TraversableWithIndex"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Traversable = $PS["Data.Traversable"];  
  var TraversableWithIndex = function (FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
      this.FoldableWithIndex1 = FoldableWithIndex1;
      this.FunctorWithIndex0 = FunctorWithIndex0;
      this.Traversable2 = Traversable2;
      this.traverseWithIndex = traverseWithIndex;
  };
  var traverseWithIndexDefault = function (dictTraversableWithIndex) {
      return function (dictApplicative) {
          return function (f) {
              var $63 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
              var $64 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
              return function ($65) {
                  return $63($64($65));
              };
          };
      };
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  };
  var traversableWithIndexArray = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexArray;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexArray;
  }, function () {
      return Data_Traversable.traversableArray;
  }, function (dictApplicative) {
      return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
  });
  exports["TraversableWithIndex"] = TraversableWithIndex;
  exports["traverseWithIndex"] = traverseWithIndex;
  exports["traversableWithIndexArray"] = traversableWithIndexArray;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (k) {
    return function (m) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
  exports["delete"] = $foreign["delete"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];        
  var values = $foreign.toArrayWithKey(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var toUnfoldable = function (dictUnfoldable) {
      var $36 = Data_Array.toUnfoldable(dictUnfoldable);
      var $37 = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
      return function ($38) {
          return $36($37($38));
      };
  };                                                                
  var toArray = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
  var thawST = $foreign["_copyST"];
  var singleton = function (k) {
      return function (v) {
          return $foreign.runST(Control_Bind.bindFlipped(Control_Monad_ST_Internal.bindST)(Foreign_Object_ST.poke(k)(v))(Foreign_Object_ST["new"]));
      };
  };
  var showObject = function (dictShow) {
      return new Data_Show.Show(function (m) {
          return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(Data_Show.showString)(dictShow)))(toArray(m)) + ")");
      });
  };
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var s = thawST(m)();
              f(s)();
              return s;
          });
      };
  };                                                                                                    
  var mapWithKey = function (f) {
      return function (m) {
          return $foreign["_mapWithKey"](m, f);
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var functorObject = new Data_Functor.Functor(function (f) {
      return function (m) {
          return $foreign["_fmapObject"](m, f);
      };
  });
  var functorWithIndexObject = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorObject;
  }, mapWithKey);
  var fromFoldableWith = function (dictFoldable) {
      return function (f) {
          return function (l) {
              return $foreign.runST(function __do() {
                  var s = Foreign_Object_ST["new"]();
                  Data_Foldable.for_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(l)(function (v) {
                      return function __do() {
                          var v$prime = $foreign["_lookupST"](v.value1, f(v.value1), v.value0, s)();
                          return Foreign_Object_ST.poke(v.value0)(v$prime)(s)();
                      };
                  })();
                  return s;
              });
          };
      };
  };
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return $foreign.runST(function __do() {
              var s = Foreign_Object_ST["new"]();
              Control_Monad_ST_Internal.foreach(Data_Array.fromFoldable(dictFoldable)(l))(function (v) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Foreign_Object_ST.poke(v.value0)(v.value1)(s));
              })();
              return s;
          });
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (z) {
              return $foreign["_foldM"](Control_Bind.bind(dictMonad.Bind1()))(f)(Control_Applicative.pure(dictMonad.Applicative0())(z));
          };
      };
  };
  var unionWith = function (f) {
      return function (m1) {
          return function (m2) {
              return mutate(function (s1) {
                  return foldM(Control_Monad_ST_Internal.monadST)(function (s2) {
                      return function (k) {
                          return function (v1) {
                              return Foreign_Object_ST.poke(k)($foreign["_lookup"](v1, function (v2) {
                                  return f(v1)(v2);
                              }, k, m2))(s2);
                          };
                      };
                  })(s1)(m1);
              })(m2);
          };
      };
  };
  var semigroupObject = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(unionWith(Data_Semigroup.append(dictSemigroup)));
  };
  var monoidObject = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupObject(dictSemigroup);
      }, $foreign.empty);
  };
  var fold = $foreign["_foldM"](Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableObject = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return foldMap(dictMonoid)(Data_Function["const"](f));
      };
  }, function (f) {
      return fold(function (z) {
          return function (v) {
              return f(z);
          };
      });
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
          };
      };
  });
  var foldableWithIndexObject = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableObject;
  }, function (dictMonoid) {
      return foldMap(dictMonoid);
  }, function (f) {
      return fold(Data_Function.flip(f));
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
          };
      };
  });
  var traversableWithIndexObject = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexObject;
  }, function () {
      return functorWithIndexObject;
  }, function () {
      return traversableObject;
  }, function (dictApplicative) {
      return function (f) {
          return function (ms) {
              return fold(function (acc) {
                  return function (k) {
                      return function (v) {
                          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                      };
                  };
              })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
          };
      };
  });
  var traversableObject = new Data_Traversable.Traversable(function () {
      return foldableObject;
  }, function () {
      return functorObject;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      var $43 = Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative);
      return function ($44) {
          return $43(Data_Function["const"]($44));
      };
  });
  var $$delete = function (k) {
      return mutate(Foreign_Object_ST["delete"](k));
  };
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["fromFoldableWith"] = fromFoldableWith;
  exports["delete"] = $$delete;
  exports["mapWithKey"] = mapWithKey;
  exports["values"] = values;
  exports["functorObject"] = functorObject;
  exports["foldableObject"] = foldableObject;
  exports["traversableObject"] = traversableObject;
  exports["showObject"] = showObject;
  exports["semigroupObject"] = semigroupObject;
  exports["monoidObject"] = monoidObject;
  exports["empty"] = $foreign.empty;
  exports["size"] = $foreign.size;
  exports["keys"] = $foreign.keys;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var verbJsonType = function (def) {
      return function (f) {
          return function (g) {
              return g(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var jsonSingletonObject = function (key) {
      return function (val) {
          return $foreign.fromObject(Foreign_Object.singleton(key)(val));
      };
  };                                            
  var jsonEmptyObject = $foreign.fromObject(Foreign_Object.empty);
  var isJsonType = verbJsonType(false)(Data_Function["const"](true));
  var caseJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var toString = toJsonType(caseJsonString);
  var caseJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };                                        
  var toObject = toJsonType(caseJsonObject);
  var caseJsonNumber = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var caseJsonNull = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };
  var isNull = isJsonType(caseJsonNull);      
  var caseJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
          };
      };
  };                                      
  var toArray = toJsonType(caseJsonArray);
  exports["caseJsonNumber"] = caseJsonNumber;
  exports["caseJsonString"] = caseJsonString;
  exports["caseJsonObject"] = caseJsonObject;
  exports["isNull"] = isNull;
  exports["toString"] = toString;
  exports["toArray"] = toArray;
  exports["toObject"] = toObject;
  exports["jsonEmptyObject"] = jsonEmptyObject;
  exports["jsonSingletonObject"] = jsonSingletonObject;
  exports["fromBoolean"] = $foreign.fromBoolean;
  exports["fromNumber"] = $foreign.fromNumber;
  exports["fromString"] = $foreign.fromString;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromObject"] = $foreign.fromObject;
  exports["jsonNull"] = $foreign.jsonNull;
  exports["stringify"] = $foreign.stringify;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Argonaut.Decode.Error"] = $PS["Data.Argonaut.Decode.Error"] || {};
  var exports = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Show = $PS["Data.Show"];                
  var TypeMismatch = (function () {
      function TypeMismatch(value0) {
          this.value0 = value0;
      };
      TypeMismatch.create = function (value0) {
          return new TypeMismatch(value0);
      };
      return TypeMismatch;
  })();
  var UnexpectedValue = (function () {
      function UnexpectedValue(value0) {
          this.value0 = value0;
      };
      UnexpectedValue.create = function (value0) {
          return new UnexpectedValue(value0);
      };
      return UnexpectedValue;
  })();
  var AtIndex = (function () {
      function AtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AtIndex.create = function (value0) {
          return function (value1) {
              return new AtIndex(value0, value1);
          };
      };
      return AtIndex;
  })();
  var AtKey = (function () {
      function AtKey(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AtKey.create = function (value0) {
          return function (value1) {
              return new AtKey(value0, value1);
          };
      };
      return AtKey;
  })();
  var Named = (function () {
      function Named(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Named.create = function (value0) {
          return function (value1) {
              return new Named(value0, value1);
          };
      };
      return Named;
  })();
  var MissingValue = (function () {
      function MissingValue() {

      };
      MissingValue.value = new MissingValue();
      return MissingValue;
  })();
  var showJsonDecodeError = new Data_Show.Show(function (v) {
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof UnexpectedValue) {
          return "(UnexpectedValue " + (Data_Argonaut_Core.stringify(v.value0) + ")");
      };
      if (v instanceof AtIndex) {
          return "(AtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
      };
      if (v instanceof AtKey) {
          return "(AtKey " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
      };
      if (v instanceof Named) {
          return "(Named " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
      };
      if (v instanceof MissingValue) {
          return "MissingValue";
      };
      throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 24, column 10 - line 30, column 35): " + [ v.constructor.name ]);
  });
  var printJsonDecodeError = function (err) {
      var go = function (v) {
          if (v instanceof TypeMismatch) {
              return "  Expected value of type '" + (v.value0 + "'.");
          };
          if (v instanceof UnexpectedValue) {
              return "  Unexpected value " + (Data_Argonaut_Core.stringify(v.value0) + ".");
          };
          if (v instanceof AtIndex) {
              return "  At array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (":\x0a" + go(v.value1)));
          };
          if (v instanceof AtKey) {
              return "  At object key '" + (v.value0 + ("':\x0a" + go(v.value1)));
          };
          if (v instanceof Named) {
              return "  Under '" + (v.value0 + ("':\x0a" + go(v.value1)));
          };
          if (v instanceof MissingValue) {
              return "  No value was found.";
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 37, column 8 - line 43, column 44): " + [ v.constructor.name ]);
      };
      return "An error occurred while decoding a JSON value:\x0a" + go(err);
  };
  exports["TypeMismatch"] = TypeMismatch;
  exports["AtIndex"] = AtIndex;
  exports["AtKey"] = AtKey;
  exports["Named"] = Named;
  exports["MissingValue"] = MissingValue;
  exports["printJsonDecodeError"] = printJsonDecodeError;
  exports["showJsonDecodeError"] = showJsonDecodeError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var bifunctorTuple = new Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Data_Tuple.Tuple(f(v.value0), g(v.value1));
          };
      };
  });
  var bifunctorEither = new Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Data_Either.Left) {
                  return new Data_Either.Left(v(v2.value0));
              };
              if (v2 instanceof Data_Either.Right) {
                  return new Data_Either.Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["bimap"] = bimap;
  exports["lmap"] = lmap;
  exports["bifunctorEither"] = bifunctorEither;
  exports["bifunctorTuple"] = bifunctorTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Argonaut.Decode.Decoders"] = $PS["Data.Argonaut.Decode.Decoders"] || {};
  var exports = $PS["Data.Argonaut.Decode.Decoders"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Foreign_Object = $PS["Foreign.Object"];
  var getField = function (decoder) {
      return function (obj) {
          return function (str) {
              return Data_Maybe.maybe(Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(str, Data_Argonaut_Decode_Error.MissingValue.value)))((function () {
                  var $18 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                  return function ($19) {
                      return $18(decoder($19));
                  };
              })())(Foreign_Object.lookup(str)(obj));
          };
      };
  };
  var decodeString = Data_Argonaut_Core.caseJsonString(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("String")))(Data_Either.Right.create);
  var decodeNumber = Data_Argonaut_Core.caseJsonNumber(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Number")))(Data_Either.Right.create);
  var decodeMaybe = function (decoder) {
      return function (json) {
          if (Data_Argonaut_Core.isNull(json)) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          if (Data_Boolean.otherwise) {
              return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decoder(json));
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Decoders (line 37, column 1 - line 41, column 38): " + [ decoder.constructor.name, json.constructor.name ]);
      };
  };
  var decodeJObject = (function () {
      var $20 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Object"));
      return function ($21) {
          return $20(Data_Argonaut_Core.toObject($21));
      };
  })();
  var decodeJArray = (function () {
      var $22 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Array"));
      return function ($23) {
          return $22(Data_Argonaut_Core.toArray($23));
      };
  })();
  var decodeInt = Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
      var $54 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Integer"));
      return function ($55) {
          return $54(Data_Int.fromNumber($55));
      };
  })())(decodeNumber);
  var decodeForeignObject = function (decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $56 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("ForeignObject"));
          var $57 = Data_Traversable.traverse(Foreign_Object.traversableObject)(Data_Either.applicativeEither)(decoder);
          return function ($58) {
              return $56($57($58));
          };
      })())(decodeJObject);
  };                                                                                                                                                                
  var decodeArray = function (decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $59 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("Array"));
          var $60 = Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexArray)(Data_Either.applicativeEither)(function (i) {
              var $62 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtIndex.create(i));
              return function ($63) {
                  return $62(decoder($63));
              };
          });
          return function ($61) {
              return $59($60($61));
          };
      })())(decodeJArray);
  };
  exports["decodeMaybe"] = decodeMaybe;
  exports["decodeInt"] = decodeInt;
  exports["decodeString"] = decodeString;
  exports["decodeForeignObject"] = decodeForeignObject;
  exports["decodeArray"] = decodeArray;
  exports["getField"] = getField;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Argonaut.Decode.Class"] = $PS["Data.Argonaut.Decode.Class"] || {};
  var exports = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Decoders = $PS["Data.Argonaut.Decode.Decoders"];
  var Data_Either = $PS["Data.Either"];
  var DecodeJson = function (decodeJson) {
      this.decodeJson = decodeJson;
  };
  var decodeJsonString = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeString);                
  var decodeJsonJson = new DecodeJson(Data_Either.Right.create);
  var decodeJsonInt = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeInt);        
  var decodeJson = function (dict) {
      return dict.decodeJson;
  };
  var decodeJsonMaybe = function (dictDecodeJson) {
      return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeMaybe(decodeJson(dictDecodeJson)));
  };
  var decodeForeignObject = function (dictDecodeJson) {
      return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeForeignObject(decodeJson(dictDecodeJson)));
  };
  var decodeArray = function (dictDecodeJson) {
      return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeArray(decodeJson(dictDecodeJson)));
  };
  exports["decodeJson"] = decodeJson;
  exports["DecodeJson"] = DecodeJson;
  exports["decodeJsonMaybe"] = decodeJsonMaybe;
  exports["decodeJsonInt"] = decodeJsonInt;
  exports["decodeJsonString"] = decodeJsonString;
  exports["decodeJsonJson"] = decodeJsonJson;
  exports["decodeForeignObject"] = decodeForeignObject;
  exports["decodeArray"] = decodeArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Argonaut.Decode.Combinators"] = $PS["Data.Argonaut.Decode.Combinators"] || {};
  var exports = $PS["Data.Argonaut.Decode.Combinators"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Decoders = $PS["Data.Argonaut.Decode.Decoders"];
  var getField = function (dictDecodeJson) {
      return Data_Argonaut_Decode_Decoders.getField(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
  };
  exports["getField"] = getField;
})(PS);
(function(exports) {
  "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Argonaut.Parser"] = $PS["Data.Argonaut.Parser"] || {};
  var exports = $PS["Data.Argonaut.Parser"];
  var $foreign = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];                
  var jsonParser = function (j) {
      return $foreign["_jsonParser"](Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Argonaut.Decode.Parser"] = $PS["Data.Argonaut.Decode.Parser"] || {};
  var exports = $PS["Data.Argonaut.Decode.Parser"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];                
  var parseJson = (function () {
      var $1 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(function (v) {
          return new Data_Argonaut_Decode_Error.TypeMismatch("JSON");
      });
      return function ($2) {
          return $1(Data_Argonaut_Parser.jsonParser($2));
      };
  })();
  exports["parseJson"] = parseJson;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Argonaut.Encode.Encoders"] = $PS["Data.Argonaut.Encode.Encoders"] || {};
  var exports = $PS["Data.Argonaut.Encode.Encoders"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var extend = function (encoder) {
      return function (v) {
          var $32 = Data_Argonaut_Core.caseJsonObject(Data_Argonaut_Core.jsonSingletonObject(v.value0)(v.value1))((function () {
              var $34 = Foreign_Object.insert(v.value0)(v.value1);
              return function ($35) {
                  return Data_Argonaut_Core.fromObject($34($35));
              };
          })());
          return function ($33) {
              return $32(encoder($33));
          };
      };
  };
  var encodeString = Data_Argonaut_Core.fromString;
  var encodeMaybe = function (encoder) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Argonaut_Core.jsonNull;
          };
          if (v instanceof Data_Maybe.Just) {
              return encoder(v.value0);
          };
          throw new Error("Failed pattern match at Data.Argonaut.Encode.Encoders (line 31, column 23 - line 33, column 22): " + [ v.constructor.name ]);
      };
  };
  var encodeInt = function ($48) {
      return Data_Argonaut_Core.fromNumber(Data_Int.toNumber($48));
  };
  var encodeBoolean = Data_Argonaut_Core.fromBoolean;
  var encodeArray = function (encoder) {
      var $53 = Data_Functor.map(Data_Functor.functorArray)(encoder);
      return function ($54) {
          return Data_Argonaut_Core.fromArray($53($54));
      };
  };
  var assoc = function (encoder) {
      return function (k) {
          var $59 = Data_Tuple.Tuple.create(k);
          return function ($60) {
              return $59(encoder($60));
          };
      };
  };
  exports["encodeMaybe"] = encodeMaybe;
  exports["encodeBoolean"] = encodeBoolean;
  exports["encodeInt"] = encodeInt;
  exports["encodeString"] = encodeString;
  exports["encodeArray"] = encodeArray;
  exports["assoc"] = assoc;
  exports["extend"] = extend;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Argonaut.Encode.Class"] = $PS["Data.Argonaut.Encode.Class"] || {};
  var exports = $PS["Data.Argonaut.Encode.Class"];
  var Control_Category = $PS["Control.Category"];
  var Data_Argonaut_Encode_Encoders = $PS["Data.Argonaut.Encode.Encoders"];
  var EncodeJson = function (encodeJson) {
      this.encodeJson = encodeJson;
  };                                                                            
  var encodeJsonJson = new EncodeJson(Control_Category.identity(Control_Category.categoryFn));
  var encodeJsonJString = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeString);
  var encodeJsonJBoolean = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeBoolean);
  var encodeJsonInt = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeInt);  
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  var encodeJsonArray = function (dictEncodeJson) {
      return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeArray(encodeJson(dictEncodeJson)));
  };
  var encodeJsonMaybe = function (dictEncodeJson) {
      return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeMaybe(encodeJson(dictEncodeJson)));
  };
  exports["encodeJson"] = encodeJson;
  exports["EncodeJson"] = EncodeJson;
  exports["encodeJsonMaybe"] = encodeJsonMaybe;
  exports["encodeJsonJBoolean"] = encodeJsonJBoolean;
  exports["encodeJsonInt"] = encodeJsonInt;
  exports["encodeJsonJString"] = encodeJsonJString;
  exports["encodeJsonJson"] = encodeJsonJson;
  exports["encodeJsonArray"] = encodeJsonArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Argonaut.Encode.Combinators"] = $PS["Data.Argonaut.Encode.Combinators"] || {};
  var exports = $PS["Data.Argonaut.Encode.Combinators"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Encoders = $PS["Data.Argonaut.Encode.Encoders"];
  var extend = function (dictEncodeJson) {
      return Data_Argonaut_Encode_Encoders.extend(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson));
  };
  var assoc = function (dictEncodeJson) {
      return Data_Argonaut_Encode_Encoders.assoc(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson));
  };
  exports["assoc"] = assoc;
  exports["extend"] = extend;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Array.NonEmpty.Internal"] = $PS["Data.Array.NonEmpty.Internal"] || {};
  var exports = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Traversable = $PS["Data.Traversable"];                
  var NonEmptyArray = function (x) {
      return x;
  };                                                                                          
  var traversableNonEmptyArray = Data_Traversable.traversableArray;
  exports["NonEmptyArray"] = NonEmptyArray;
  exports["traversableNonEmptyArray"] = traversableNonEmptyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];         
  var unsafeFromArray = Data_Array_NonEmpty_Internal.NonEmptyArray;
  var toArray = function (v) {
      return v;
  };
  var singleton = function ($60) {
      return unsafeFromArray(Data_Array.singleton($60));
  };
  var fromArray = function (xs) {
      if (Data_Array.length(xs) > 0) {
          return new Data_Maybe.Just(unsafeFromArray(xs));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Array.NonEmpty (line 159, column 1 - line 159, column 58): " + [ xs.constructor.name ]);
  };
  var cons$prime = function (x) {
      return function (xs) {
          return unsafeFromArray(Data_Array.cons(x)(xs));
      };
  };
  var adaptMaybe = function (f) {
      var $75 = Data_Maybe.fromJust();
      return function ($76) {
          return $75(f(toArray($76)));
      };
  };
  var head = adaptMaybe(Data_Array.head);
  var tail = adaptMaybe(Data_Array.tail);
  var uncons = adaptMaybe(Data_Array.uncons);
  var toNonEmpty = function ($77) {
      return (function (v) {
          return new Data_NonEmpty.NonEmpty(v.head, v.tail);
      })(uncons($77));
  };                                         
  var adaptAny = function (f) {
      return function ($78) {
          return f(toArray($78));
      };
  };                                     
  var length = adaptAny(Data_Array.length);
  var unsafeAdapt = function (f) {
      var $79 = adaptAny(f);
      return function ($80) {
          return unsafeFromArray($79($80));
      };
  };
  var cons = function (x) {
      return unsafeAdapt(Data_Array.cons(x));
  };
  exports["fromArray"] = fromArray;
  exports["toArray"] = toArray;
  exports["toNonEmpty"] = toNonEmpty;
  exports["singleton"] = singleton;
  exports["cons'"] = cons$prime;
  exports["head"] = head;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Bifoldable"] = $PS["Data.Bifoldable"] || {};
  var exports = $PS["Data.Bifoldable"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Bifoldable = function (bifoldMap, bifoldl, bifoldr) {
      this.bifoldMap = bifoldMap;
      this.bifoldl = bifoldl;
      this.bifoldr = bifoldr;
  };
  var bifoldableTuple = new Bifoldable(function (dictMonoid) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(g(v.value1));
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return g(f(z)(v.value0))(v.value1);
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return f(v.value0)(g(v.value1)(z));
              };
          };
      };
  });
  exports["bifoldableTuple"] = bifoldableTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Bitraversable"] = $PS["Data.Bitraversable"] || {};
  var exports = $PS["Data.Bitraversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Bifoldable = $PS["Data.Bifoldable"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Bitraversable = function (Bifoldable1, Bifunctor0, bisequence, bitraverse) {
      this.Bifoldable1 = Bifoldable1;
      this.Bifunctor0 = Bifunctor0;
      this.bisequence = bisequence;
      this.bitraverse = bitraverse;
  };
  var bitraverse = function (dict) {
      return dict.bitraverse;
  };
  var ltraverse = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (f) {
              return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative));
          };
      };
  };
  var bitraversableTuple = new Bitraversable(function () {
      return Data_Bifoldable.bifoldableTuple;
  }, function () {
      return Data_Bifunctor.bifunctorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create)(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create)(f(v.value0)))(g(v.value1));
              };
          };
      };
  });
  exports["bitraverse"] = bitraverse;
  exports["ltraverse"] = ltraverse;
  exports["bitraversableTuple"] = bitraversableTuple;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  }; 
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $51 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($51) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Char"] = $PS["Data.Char"] || {};
  var exports = $PS["Data.Char"];
  var Data_Enum = $PS["Data.Enum"];                              
  var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
  exports["fromCharCode"] = fromCharCode;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Const"] = $PS["Data.Const"] || {};
  var exports = $PS["Data.Const"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Const = function (x) {
      return x;
  };
  var functorConst = new Data_Functor.Functor(function (f) {
      return function (m) {
          return m;
      };
  });
  var applyConst = function (dictSemigroup) {
      return new Control_Apply.Apply(function () {
          return functorConst;
      }, function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v)(v1);
          };
      });
  };
  var applicativeConst = function (dictMonoid) {
      return new Control_Applicative.Applicative(function () {
          return applyConst(dictMonoid.Semigroup0());
      }, function (v) {
          return Data_Monoid.mempty(dictMonoid);
      });
  };
  exports["Const"] = Const;
  exports["applyConst"] = applyConst;
  exports["applicativeConst"] = applicativeConst;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.DateTime.Instant"] = $PS["Data.DateTime.Instant"] || {};
  var exports = $PS["Data.DateTime.Instant"];
  var unInstant = function (v) {
      return v;
  };
  exports["unInstant"] = unInstant;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Functor.Compose"] = $PS["Data.Functor.Compose"] || {};
  var exports = $PS["Data.Functor.Compose"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];          
  var Compose = function (x) {
      return x;
  }; 
  var functorCompose = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function (v) {
                  return Compose(Data_Functor.map(dictFunctor)(Data_Functor.map(dictFunctor1)(f))(v));
              };
          });
      };
  };
  var applyCompose = function (dictApply) {
      return function (dictApply1) {
          return new Control_Apply.Apply(function () {
              return functorCompose(dictApply.Functor0())(dictApply1.Functor0());
          }, function (v) {
              return function (v1) {
                  return Compose(Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Control_Apply.apply(dictApply1))(v))(v1));
              };
          });
      };
  };
  var applicativeCompose = function (dictApplicative) {
      return function (dictApplicative1) {
          return new Control_Applicative.Applicative(function () {
              return applyCompose(dictApplicative.Apply0())(dictApplicative1.Apply0());
          }, (function () {
              var $51 = Control_Applicative.pure(dictApplicative);
              var $52 = Control_Applicative.pure(dictApplicative1);
              return function ($53) {
                  return Compose($51($52($53)));
              };
          })());
      };
  };
  exports["Compose"] = Compose;
  exports["applyCompose"] = applyCompose;
  exports["applicativeCompose"] = applicativeCompose;
})(PS);
(function(exports) {
  "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Lazy"] = $PS["Data.Lazy"] || {};
  var exports = $PS["Data.Lazy"];
  var $foreign = $PS["Data.Lazy"];
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Profunctor"] = $PS["Data.Profunctor"] || {};
  var exports = $PS["Data.Profunctor"];                  
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  exports["dimap"] = dimap;
  exports["profunctorFn"] = profunctorFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Lens.Iso"] = $PS["Data.Lens.Iso"] || {};
  var exports = $PS["Data.Lens.Iso"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var iso = function (f) {
      return function (g) {
          return function (dictProfunctor) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictProfunctor)(f)(g)(pab);
              };
          };
      };
  };
  exports["iso"] = iso;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Lens.Iso.Newtype"] = $PS["Data.Lens.Iso.Newtype"] || {};
  var exports = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var _Newtype = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (dictProfunctor) {
              return Data_Lens_Iso.iso(Data_Newtype.unwrap())(Data_Newtype.wrap())(dictProfunctor);
          };
      };
  };
  exports["_Newtype"] = _Newtype;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Profunctor.Strong"] = $PS["Data.Profunctor.Strong"] || {};
  var exports = $PS["Data.Profunctor.Strong"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Strong = function (Profunctor0, first, second) {
      this.Profunctor0 = Profunctor0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var first = function (dict) {
      return dict.first;
  };
  exports["first"] = first;
  exports["strongFn"] = strongFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Lens.Lens"] = $PS["Data.Lens.Lens"] || {};
  var exports = $PS["Data.Lens.Lens"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var lens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  exports["lens"] = lens;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var set = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictCons1) {
              return function (l) {
                  return function (b) {
                      return function (r) {
                          return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(b)(r);
                      };
                  };
              };
          };
      };
  };
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
  exports["set"] = set;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Lens.Record"] = $PS["Data.Lens.Record"] || {};
  var exports = $PS["Data.Lens.Record"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Record = $PS["Record"];                
  var prop = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictCons1) {
              return function (l) {
                  return function (dictStrong) {
                      return Data_Lens_Lens.lens(Record.get(dictIsSymbol)()(l))(Data_Function.flip(Record.set(dictIsSymbol)()()(l)))(dictStrong);
                  };
              };
          };
      };
  };
  exports["prop"] = prop;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Lens.Setter"] = $PS["Data.Lens.Setter"] || {};
  var exports = $PS["Data.Lens.Setter"];             
  var over = function (l) {
      return l;
  };
  exports["over"] = over;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];                    
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var empty = Leaf.value;
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["member"] = member;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];                
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  var showNullable = function (dictShow) {
      return new Data_Show.Show((function () {
          var $5 = Data_Maybe.maybe("null")(Data_Show.show(dictShow));
          return function ($6) {
              return $5(toMaybe($6));
          };
      })());
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
  exports["showNullable"] = showNullable;
  exports["null"] = $foreign["null"];
  exports["notNull"] = $foreign.notNull;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Posix.Signal"] = $PS["Data.Posix.Signal"] || {};
  var exports = $PS["Data.Posix.Signal"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var SIGABRT = (function () {
      function SIGABRT() {

      };
      SIGABRT.value = new SIGABRT();
      return SIGABRT;
  })();
  var SIGALRM = (function () {
      function SIGALRM() {

      };
      SIGALRM.value = new SIGALRM();
      return SIGALRM;
  })();
  var SIGBUS = (function () {
      function SIGBUS() {

      };
      SIGBUS.value = new SIGBUS();
      return SIGBUS;
  })();
  var SIGCHLD = (function () {
      function SIGCHLD() {

      };
      SIGCHLD.value = new SIGCHLD();
      return SIGCHLD;
  })();
  var SIGCLD = (function () {
      function SIGCLD() {

      };
      SIGCLD.value = new SIGCLD();
      return SIGCLD;
  })();
  var SIGCONT = (function () {
      function SIGCONT() {

      };
      SIGCONT.value = new SIGCONT();
      return SIGCONT;
  })();
  var SIGEMT = (function () {
      function SIGEMT() {

      };
      SIGEMT.value = new SIGEMT();
      return SIGEMT;
  })();
  var SIGFPE = (function () {
      function SIGFPE() {

      };
      SIGFPE.value = new SIGFPE();
      return SIGFPE;
  })();
  var SIGHUP = (function () {
      function SIGHUP() {

      };
      SIGHUP.value = new SIGHUP();
      return SIGHUP;
  })();
  var SIGILL = (function () {
      function SIGILL() {

      };
      SIGILL.value = new SIGILL();
      return SIGILL;
  })();
  var SIGINFO = (function () {
      function SIGINFO() {

      };
      SIGINFO.value = new SIGINFO();
      return SIGINFO;
  })();
  var SIGINT = (function () {
      function SIGINT() {

      };
      SIGINT.value = new SIGINT();
      return SIGINT;
  })();
  var SIGIO = (function () {
      function SIGIO() {

      };
      SIGIO.value = new SIGIO();
      return SIGIO;
  })();
  var SIGIOT = (function () {
      function SIGIOT() {

      };
      SIGIOT.value = new SIGIOT();
      return SIGIOT;
  })();
  var SIGKILL = (function () {
      function SIGKILL() {

      };
      SIGKILL.value = new SIGKILL();
      return SIGKILL;
  })();
  var SIGLOST = (function () {
      function SIGLOST() {

      };
      SIGLOST.value = new SIGLOST();
      return SIGLOST;
  })();
  var SIGPIPE = (function () {
      function SIGPIPE() {

      };
      SIGPIPE.value = new SIGPIPE();
      return SIGPIPE;
  })();
  var SIGPOLL = (function () {
      function SIGPOLL() {

      };
      SIGPOLL.value = new SIGPOLL();
      return SIGPOLL;
  })();
  var SIGPROF = (function () {
      function SIGPROF() {

      };
      SIGPROF.value = new SIGPROF();
      return SIGPROF;
  })();
  var SIGPWR = (function () {
      function SIGPWR() {

      };
      SIGPWR.value = new SIGPWR();
      return SIGPWR;
  })();
  var SIGQUIT = (function () {
      function SIGQUIT() {

      };
      SIGQUIT.value = new SIGQUIT();
      return SIGQUIT;
  })();
  var SIGSEGV = (function () {
      function SIGSEGV() {

      };
      SIGSEGV.value = new SIGSEGV();
      return SIGSEGV;
  })();
  var SIGSTKFLT = (function () {
      function SIGSTKFLT() {

      };
      SIGSTKFLT.value = new SIGSTKFLT();
      return SIGSTKFLT;
  })();
  var SIGSTOP = (function () {
      function SIGSTOP() {

      };
      SIGSTOP.value = new SIGSTOP();
      return SIGSTOP;
  })();
  var SIGSYS = (function () {
      function SIGSYS() {

      };
      SIGSYS.value = new SIGSYS();
      return SIGSYS;
  })();
  var SIGTERM = (function () {
      function SIGTERM() {

      };
      SIGTERM.value = new SIGTERM();
      return SIGTERM;
  })();
  var SIGTRAP = (function () {
      function SIGTRAP() {

      };
      SIGTRAP.value = new SIGTRAP();
      return SIGTRAP;
  })();
  var SIGTSTP = (function () {
      function SIGTSTP() {

      };
      SIGTSTP.value = new SIGTSTP();
      return SIGTSTP;
  })();
  var SIGTTIN = (function () {
      function SIGTTIN() {

      };
      SIGTTIN.value = new SIGTTIN();
      return SIGTTIN;
  })();
  var SIGTTOU = (function () {
      function SIGTTOU() {

      };
      SIGTTOU.value = new SIGTTOU();
      return SIGTTOU;
  })();
  var SIGUNUSED = (function () {
      function SIGUNUSED() {

      };
      SIGUNUSED.value = new SIGUNUSED();
      return SIGUNUSED;
  })();
  var SIGURG = (function () {
      function SIGURG() {

      };
      SIGURG.value = new SIGURG();
      return SIGURG;
  })();
  var SIGUSR1 = (function () {
      function SIGUSR1() {

      };
      SIGUSR1.value = new SIGUSR1();
      return SIGUSR1;
  })();
  var SIGUSR2 = (function () {
      function SIGUSR2() {

      };
      SIGUSR2.value = new SIGUSR2();
      return SIGUSR2;
  })();
  var SIGVTALRM = (function () {
      function SIGVTALRM() {

      };
      SIGVTALRM.value = new SIGVTALRM();
      return SIGVTALRM;
  })();
  var SIGWINCH = (function () {
      function SIGWINCH() {

      };
      SIGWINCH.value = new SIGWINCH();
      return SIGWINCH;
  })();
  var SIGXCPU = (function () {
      function SIGXCPU() {

      };
      SIGXCPU.value = new SIGXCPU();
      return SIGXCPU;
  })();
  var SIGXFSZ = (function () {
      function SIGXFSZ() {

      };
      SIGXFSZ.value = new SIGXFSZ();
      return SIGXFSZ;
  })();
  var toString = function (s) {
      if (s instanceof SIGABRT) {
          return "SIGABRT";
      };
      if (s instanceof SIGALRM) {
          return "SIGALRM";
      };
      if (s instanceof SIGBUS) {
          return "SIGBUS";
      };
      if (s instanceof SIGCHLD) {
          return "SIGCHLD";
      };
      if (s instanceof SIGCLD) {
          return "SIGCLD";
      };
      if (s instanceof SIGCONT) {
          return "SIGCONT";
      };
      if (s instanceof SIGEMT) {
          return "SIGEMT";
      };
      if (s instanceof SIGFPE) {
          return "SIGFPE";
      };
      if (s instanceof SIGHUP) {
          return "SIGHUP";
      };
      if (s instanceof SIGILL) {
          return "SIGILL";
      };
      if (s instanceof SIGINFO) {
          return "SIGINFO";
      };
      if (s instanceof SIGINT) {
          return "SIGINT";
      };
      if (s instanceof SIGIO) {
          return "SIGIO";
      };
      if (s instanceof SIGIOT) {
          return "SIGIOT";
      };
      if (s instanceof SIGKILL) {
          return "SIGKILL";
      };
      if (s instanceof SIGLOST) {
          return "SIGLOST";
      };
      if (s instanceof SIGPIPE) {
          return "SIGPIPE";
      };
      if (s instanceof SIGPOLL) {
          return "SIGPOLL";
      };
      if (s instanceof SIGPROF) {
          return "SIGPROF";
      };
      if (s instanceof SIGPWR) {
          return "SIGPWR";
      };
      if (s instanceof SIGQUIT) {
          return "SIGQUIT";
      };
      if (s instanceof SIGSEGV) {
          return "SIGSEGV";
      };
      if (s instanceof SIGSTKFLT) {
          return "SIGSTKFLT";
      };
      if (s instanceof SIGSTOP) {
          return "SIGSTOP";
      };
      if (s instanceof SIGSYS) {
          return "SIGSYS";
      };
      if (s instanceof SIGTERM) {
          return "SIGTERM";
      };
      if (s instanceof SIGTRAP) {
          return "SIGTRAP";
      };
      if (s instanceof SIGTSTP) {
          return "SIGTSTP";
      };
      if (s instanceof SIGTTIN) {
          return "SIGTTIN";
      };
      if (s instanceof SIGTTOU) {
          return "SIGTTOU";
      };
      if (s instanceof SIGUNUSED) {
          return "SIGUNUSED";
      };
      if (s instanceof SIGURG) {
          return "SIGURG";
      };
      if (s instanceof SIGUSR1) {
          return "SIGUSR1";
      };
      if (s instanceof SIGUSR2) {
          return "SIGUSR2";
      };
      if (s instanceof SIGVTALRM) {
          return "SIGVTALRM";
      };
      if (s instanceof SIGWINCH) {
          return "SIGWINCH";
      };
      if (s instanceof SIGXCPU) {
          return "SIGXCPU";
      };
      if (s instanceof SIGXFSZ) {
          return "SIGXFSZ";
      };
      throw new Error("Failed pattern match at Data.Posix.Signal (line 48, column 14 - line 86, column 24): " + [ s.constructor.name ]);
  };                                            
  var fromString = function (s) {
      if (s === "SIGABRT") {
          return new Data_Maybe.Just(SIGABRT.value);
      };
      if (s === "SIGALRM") {
          return new Data_Maybe.Just(SIGALRM.value);
      };
      if (s === "SIGBUS") {
          return new Data_Maybe.Just(SIGBUS.value);
      };
      if (s === "SIGCHLD") {
          return new Data_Maybe.Just(SIGCHLD.value);
      };
      if (s === "SIGCLD") {
          return new Data_Maybe.Just(SIGCLD.value);
      };
      if (s === "SIGCONT") {
          return new Data_Maybe.Just(SIGCONT.value);
      };
      if (s === "SIGEMT") {
          return new Data_Maybe.Just(SIGEMT.value);
      };
      if (s === "SIGFPE") {
          return new Data_Maybe.Just(SIGFPE.value);
      };
      if (s === "SIGHUP") {
          return new Data_Maybe.Just(SIGHUP.value);
      };
      if (s === "SIGILL") {
          return new Data_Maybe.Just(SIGILL.value);
      };
      if (s === "SIGINFO") {
          return new Data_Maybe.Just(SIGINFO.value);
      };
      if (s === "SIGINT") {
          return new Data_Maybe.Just(SIGINT.value);
      };
      if (s === "SIGIO") {
          return new Data_Maybe.Just(SIGIO.value);
      };
      if (s === "SIGIOT") {
          return new Data_Maybe.Just(SIGIOT.value);
      };
      if (s === "SIGKILL") {
          return new Data_Maybe.Just(SIGKILL.value);
      };
      if (s === "SIGLOST") {
          return new Data_Maybe.Just(SIGLOST.value);
      };
      if (s === "SIGPIPE") {
          return new Data_Maybe.Just(SIGPIPE.value);
      };
      if (s === "SIGPOLL") {
          return new Data_Maybe.Just(SIGPOLL.value);
      };
      if (s === "SIGPROF") {
          return new Data_Maybe.Just(SIGPROF.value);
      };
      if (s === "SIGPWR") {
          return new Data_Maybe.Just(SIGPWR.value);
      };
      if (s === "SIGQUIT") {
          return new Data_Maybe.Just(SIGQUIT.value);
      };
      if (s === "SIGSEGV") {
          return new Data_Maybe.Just(SIGSEGV.value);
      };
      if (s === "SIGSTKFLT") {
          return new Data_Maybe.Just(SIGSTKFLT.value);
      };
      if (s === "SIGSTOP") {
          return new Data_Maybe.Just(SIGSTOP.value);
      };
      if (s === "SIGSYS") {
          return new Data_Maybe.Just(SIGSYS.value);
      };
      if (s === "SIGTERM") {
          return new Data_Maybe.Just(SIGTERM.value);
      };
      if (s === "SIGTRAP") {
          return new Data_Maybe.Just(SIGTRAP.value);
      };
      if (s === "SIGTSTP") {
          return new Data_Maybe.Just(SIGTSTP.value);
      };
      if (s === "SIGTTIN") {
          return new Data_Maybe.Just(SIGTTIN.value);
      };
      if (s === "SIGTTOU") {
          return new Data_Maybe.Just(SIGTTOU.value);
      };
      if (s === "SIGUNUSED") {
          return new Data_Maybe.Just(SIGUNUSED.value);
      };
      if (s === "SIGURG") {
          return new Data_Maybe.Just(SIGURG.value);
      };
      if (s === "SIGUSR1") {
          return new Data_Maybe.Just(SIGUSR1.value);
      };
      if (s === "SIGUSR2") {
          return new Data_Maybe.Just(SIGUSR2.value);
      };
      if (s === "SIGVTALRM") {
          return new Data_Maybe.Just(SIGVTALRM.value);
      };
      if (s === "SIGWINCH") {
          return new Data_Maybe.Just(SIGWINCH.value);
      };
      if (s === "SIGXCPU") {
          return new Data_Maybe.Just(SIGXCPU.value);
      };
      if (s === "SIGXFSZ") {
          return new Data_Maybe.Just(SIGXFSZ.value);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["SIGKILL"] = SIGKILL;
  exports["SIGTERM"] = SIGTERM;
  exports["toString"] = toString;
  exports["fromString"] = fromString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Unit = $PS["Data.Unit"];
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.member(dictOrd)(a)(v);
          };
      };
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  }; 
  var empty = Data_Map_Internal.empty;
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["member"] = member;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._countPrefix = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasStringIterator) {
        return function (pred) {
          return function (str) {
            var iter = str[Symbol.iterator]();
            for (var cpCount = 0; ; ++cpCount) {
              var o = iter.next();
              if (o.done) return cpCount;
              var cp = unsafeCodePointAt0(o.value);
              if (!pred(cp)) return cpCount;
            }
          };
        };
      }
      return fallback;
    };
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports._indexOfStartingAt = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.indexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.splitAt = function (i) {
    return function (s) {
      return { before: s.substring(0, i), after: s.substring(i) };
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];

  // | If the string ends with the given suffix, return the portion of the
  // | string left after removing it, as a `Just` value. Otherwise, return
  // | `Nothing`.
  // |
  // | ```purescript
  // | stripSuffix (Pattern ".exe") "psc.exe" == Just "psc"
  // | stripSuffix (Pattern ".exe") "psc" == Nothing
  // | ```
  var stripSuffix = function (v) {
      return function (str) {
          var v1 = $foreign.splitAt($foreign.length(str) - $foreign.length(v) | 0)(str);
          var $9 = v1.after === v;
          if ($9) {
              return new Data_Maybe.Just(v1.before);
          };
          return Data_Maybe.Nothing.value;
      };
  };                                                                                           

  // | Returns the index of the first occurrence of the pattern in the
  // | given string, starting at the specified index. Returns `Nothing` if there is
  // | no match.
  // |
  // | ```purescript
  // | indexOf' (Pattern "a") 2 "ababa" == Just 2
  // | indexOf' (Pattern "a") 3 "ababa" == Just 4
  // | ```
  // |
  var indexOf$prime = $foreign["_indexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

  // | Returns the index of the first occurrence of the pattern in the
  // | given string. Returns `Nothing` if there is no match.
  // |
  // | ```purescript
  // | indexOf (Pattern "c") "abcdc" == Just 2
  // | indexOf (Pattern "c") "aaa" == Nothing
  // | ```
  // |
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

  // | Returns the string without the last `n` characters.
  // |
  // | ```purescript
  // | dropRight 6 "Hello World" == "Hello"
  // | ```
  // |
  var dropRight = function (i) {
      return function (s) {
          return $foreign.take($foreign.length(s) - i | 0)(s);
      };
  };

  // | Checks whether the pattern appears in the given string.
  // |
  // | ```purescript
  // | contains (Pattern "needle") "haystack with needle" == true
  // | contains (Pattern "needle") "haystack" == false
  // | ```
  var contains = function (pat) {
      var $20 = indexOf(pat);
      return function ($21) {
          return Data_Maybe.isJust($20($21));
      };
  };

  // | Returns the character at the given index, if the index is within bounds.
  // |
  // | ```purescript
  // | charAt 2 "Hello" == Just 'l'
  // | charAt 10 "Hello" == Nothing
  // | ```
  // |
  var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["stripSuffix"] = stripSuffix;
  exports["contains"] = contains;
  exports["charAt"] = charAt;
  exports["indexOf"] = indexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["dropRight"] = dropRight;
  exports["singleton"] = $foreign.singleton;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var CodePoint = function (x) {
      return x;
  };
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var eqCodePoint = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  var countTail = function ($copy_p) {
      return function ($copy_s) {
          return function ($copy_accum) {
              var $tco_var_p = $copy_p;
              var $tco_var_s = $copy_s;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(p, s, accum) {
                  var v = uncons(s);
                  if (v instanceof Data_Maybe.Just) {
                      var $39 = p(v.value0.head);
                      if ($39) {
                          $tco_var_p = p;
                          $tco_var_s = v.value0.tail;
                          $copy_accum = accum + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return accum;
                  };
                  $tco_done = true;
                  return accum;
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);
              };
              return $tco_result;
          };
      };
  };
  var countFallback = function (p) {
      return function (s) {
          return countTail(p)(s)(0);
      };
  };
  var countPrefix = $foreign["_countPrefix"](countFallback)(unsafeCodePointAt0);
  var takeWhile = function (p) {
      return function (s) {
          return take(countPrefix(p)(s))(s);
      };
  };
  var codePointFromChar = (function () {
      var $55 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
      return function ($56) {
          return CodePoint($55($56));
      };
  })();
  exports["codePointFromChar"] = codePointFromChar;
  exports["singleton"] = singleton;
  exports["length"] = length;
  exports["indexOf"] = indexOf;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["eqCodePoint"] = eqCodePoint;
})(PS);
(function(exports) {
  "use strict";

  exports.replaceAll = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2); // eslint-disable-line no-useless-escape
      };
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];                
  var $$null = function (s) {
      return s === "";
  };
  exports["null"] = $$null;
  exports["replaceAll"] = $foreign.replaceAll;
  exports["split"] = $foreign.split;
  exports["toLower"] = $foreign.toLower;
  exports["toUpper"] = $foreign.toUpper;
  exports["trim"] = $foreign.trim;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  exports.regexImpl = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports.test = function (r) {
    return function (s) {
      var lastIndex = r.lastIndex;
      var result = r.test(s);
      r.lastIndex = lastIndex;
      return result;
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null || m.length === 0) {
            return nothing;
          } else {
            for (var i = 0; i < m.length; i++) {
              m[i] = m[i] == null ? nothing : just(m[i]);
            }
            return just(m);
          }
        };
      };
    };
  };

  exports.replace = function (r) {
    return function (s1) {
      return function (s2) {
        return s2.replace(r, s1);
      };
    };
  };

  exports.split = function (r) {
    return function (s) {
      return s.split(r);
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];                                                          
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.dotAll) {
              return "s";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })()))));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign.regexImpl(Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var match = $foreign["_match"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["regex"] = regex;
  exports["match"] = match;
  exports["test"] = $foreign.test;
  exports["replace"] = $foreign.replace;
  exports["split"] = $foreign.split;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];                      
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var unicode = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: true
  });
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  var multiline = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: true,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  var global = new RegexFlags({
      global: true,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  exports["noFlags"] = noFlags;
  exports["global"] = global;
  exports["multiline"] = multiline;
  exports["unicode"] = unicode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Regex.Unsafe"] = $PS["Data.String.Regex.Unsafe"] || {};
  var exports = $PS["Data.String.Regex.Unsafe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var unsafeRegex = function (s) {
      return function (f) {
          return Data_Either.either(Partial_Unsafe.unsafeCrashWith)(Control_Category.identity(Control_Category.categoryFn))(Data_String_Regex.regex(s)(f));
      };
  };
  exports["unsafeRegex"] = unsafeRegex;
})(PS);
(function(exports) {
  "use strict";

  function codePointAtImpl (just, nothing, i, s) {
    var codePointArray = Array.from(s);
    var isWithinRange  = i >= 0 && i < codePointArray.length;

    return isWithinRange ? just(codePointArray[i].codePointAt(0)) : nothing;
  }

  function codePointAtPrimeImpl (just, nothing, i, s) {
    return i >= 0 && i < s.length ? just(s.codePointAt(i)) : nothing;
  }

  function endsWithImpl (searchString, s) {
    return s.endsWith(searchString);
  }

  function endsWithPrimeImpl (searchString, position, s) {
    return s.endsWith(searchString, position);
  }

  function escapeRegexImpl (str) {
    return str.replace(/[.*+?^${}()|[\]\-\\]/g, "\\$&");
  }

  function fromCharArrayImpl (array) {
    return array.join("");
  }

  function includesImpl (searchString, str) {
    return str.includes(searchString);
  }

  function includesPrimeImpl (needle, position, haystack) {
    // For negative `position` values, we search from the beginning of the
    // string. This is in accordance with the native
    // `String.prototype.include` function.
    var pos = Math.max(0, position);

    // Converting to arrays takes care of any surrogate code points
    var needleA    = Array.from(needle);
    var haystackA  = Array.from(haystack).slice(pos);
    var needleALen = needleA.length;

    var maxIndex = haystackA.length + 1 - needleALen;
    var found    = false;
    var i;

    // Naive implementation, at some point we should check whether Boyer-Moore
    // or Knuth-Morris-Pratt are worthwhile
    for (i = 0; i < maxIndex; i++) {
      if (needleA.every(function (e, j) { return e === haystackA[i+j]; })) {
        found = true;
        break;
      }
    }

    return found;
  }

  function lengthImpl (str) {
    return Array.from(str).length;
  }

  function linesImpl (str) {
    // See http://www.unicode.org/reports/tr18/#RL1.6
    return str.split(/\r\n|[\n\v\f\r\u0085\u2028\u2029]/);
  }

  function normalizeImpl (str) {
    return str.normalize();
  }

  function normalizePrimeImpl (normalizationForm, str) {
    return str.normalize(normalizationForm);
  }

  function padEndPrimeImpl (targetLength, str) {
    return str.padEnd(targetLength);
  }

  function padStartPrimeImpl (targetLength, str) {
    return str.padStart(targetLength);
  }

  function repeatImpl (just, nothing, n, str) {
    var result;

    try {
      result = just(str.repeat(n));
    }
    catch (error) {
      result = nothing;
    }

    return result;
  }

  function startsWithImpl (searchString, s) {
    return s.startsWith(searchString);
  }

  function startsWithPrimeImpl (searchString, position, s) {
    return s.startsWith(searchString, position);
  }

  function stripCharsImpl (chars, s) {
    return s.replace(RegExp("[" + escapeRegexImpl(chars) + "]", "g"), "");
  }

  function stripDiacriticsImpl (str) {
    return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  }

  function toCharArrayImpl (str) {
    return Array.from(str);
  }

  function unsafeCodePointAtImpl (i, s) {
    var codePointArray = Array.from(s);
    var isWithinRange = i >= 0 && i < codePointArray.length;

    if (isWithinRange) {
      return codePointArray[i].codePointAt(0);
    }
    else {
      throw new Error("Data.String.Utils.unsafeCodePointAt: Invalid index");
    }
  }

  function unsafeCodePointAtPrimeImpl (i, s) {
    if (i >= 0 && i < s.length) {
      return s.codePointAt(i);
    }
    else {
      throw new Error("Data.String.Utils.unsafeCodePointAt': Invalid index");
    }
  }

  function unsafeRepeatImpl (n, str) {
    try {
      return str.repeat(n);
    }
    catch (error) {
      throw new Error("Data.String.Utils.unsafeRepeat: Invalid count");
    }
  }

  function wordsImpl (s) {
    // Split at every Unicode whitespace character (25 as of Unicode 12.1)
    return s.split(/[\u000a-\u000d\u0085\u2028\u2029\u0009\u0020\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000]+/);
  }                                                         
  exports.endsWithImpl               = endsWithImpl;
  exports.linesImpl                  = linesImpl; 
  exports.startsWithImpl             = startsWithImpl;     
  exports.toCharArrayImpl            = toCharArrayImpl;
})(PS["Data.String.Utils"] = PS["Data.String.Utils"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Utils"] = $PS["Data.String.Utils"] || {};
  var exports = $PS["Data.String.Utils"];
  var $foreign = $PS["Data.String.Utils"];
  var toCharArray = function (s) {
      return $foreign.toCharArrayImpl(s);
  };
  var startsWith = function (searchString) {
      return function (s) {
          return $foreign.startsWithImpl(searchString, s);
      };
  };
  var lines = function (s) {
      return $foreign.linesImpl(s);
  };
  var endsWith = function (searchString) {
      return function (s) {
          return $foreign.endsWithImpl(searchString, s);
      };
  };
  exports["endsWith"] = endsWith;
  exports["lines"] = lines;
  exports["startsWith"] = startsWith;
  exports["toCharArray"] = toCharArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Time.Duration"] = $PS["Data.Time.Duration"] || {};
  var exports = $PS["Data.Time.Duration"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Seconds = function (x) {
      return x;
  };
  var Milliseconds = function (x) {
      return x;
  };
  var Duration = function (fromDuration, toDuration) {
      this.fromDuration = fromDuration;
      this.toDuration = toDuration;
  }; 
  var semigroupMilliseconds = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return v + v1;
      };
  });                                 
  var ordMilliseconds = Data_Ord.ordNumber;
  var monoidMilliseconds = new Data_Monoid.Monoid(function () {
      return semigroupMilliseconds;
  }, 0.0);
  var fromDuration = function (dict) {
      return dict.fromDuration;
  };                            
  var durationSeconds = new Duration(Data_Newtype.over()()(Seconds)(function (v) {
      return v * 1000.0;
  }), Data_Newtype.over()()(Milliseconds)(function (v) {
      return v / 1000.0;
  }));
  exports["fromDuration"] = fromDuration;
  exports["Milliseconds"] = Milliseconds;
  exports["Seconds"] = Seconds;
  exports["ordMilliseconds"] = ordMilliseconds;
  exports["monoidMilliseconds"] = monoidMilliseconds;
  exports["durationSeconds"] = durationSeconds;
})(PS);
(function(exports) {
  'use strict';

  var mkV4UUID = null;
  exports.getUUIDImpl = function () {
    if (mkV4UUID === null) {
      var uuid = require('uuid');
      mkV4UUID = uuid.v4;
    }
    return mkV4UUID();
  };
})(PS["Data.UUID"] = PS["Data.UUID"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.UUID"] = $PS["Data.UUID"] || {};
  var exports = $PS["Data.UUID"];
  var $foreign = $PS["Data.UUID"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Effect = $PS["Effect"];                                              
  var UUID = function (x) {
      return x;
  };
  var toString = function (v) {
      return v;
  };
  var genUUID = Control_Bind.bind(Effect.bindEffect)($foreign.getUUIDImpl)((function () {
      var $24 = Control_Applicative.pure(Effect.applicativeEffect);
      return function ($25) {
          return $24(UUID($25));
      };
  })());
  exports["genUUID"] = genUUID;
  exports["toString"] = toString;
})(PS);
(function(exports) {
  "use strict";

  var AVar = function () {

    function MutableQueue () {
      this.head = null;
      this.last = null;
      this.size = 0;
    }

    function MutableCell (queue, value) {
      this.queue = queue;
      this.value = value;
      this.next  = null;
      this.prev  = null;
    }

    function AVar (value) {
      this.draining = false;
      this.error    = null;
      this.value    = value;
      this.takes    = new MutableQueue();
      this.reads    = new MutableQueue();
      this.puts     = new MutableQueue();
    }

    var EMPTY = {};

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function putLast (queue, value) {
      var cell = new MutableCell(queue, value);
      switch (queue.size) {
        case 0:
          queue.head = cell;
          break;
        case 1:
          cell.prev = queue.head;
          queue.head.next = cell;
          queue.last = cell;
          break;
        default:
          cell.prev = queue.last;
          queue.last.next = cell;
          queue.last = cell;
      }
      queue.size++;
      return cell;
    }

    function takeLast (queue) {
      var cell;
      switch (queue.size) {
        case 0:
          return null;
        case 1:
          cell = queue.head;
          queue.head = null;
          break;
        case 2:
          cell = queue.last;
          queue.head.next = null;
          queue.last = null;
          break;
        default:
          cell = queue.last;
          queue.last = cell.prev;
          queue.last.next = null;
      }
      cell.prev = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function takeHead (queue) {
      var cell;
      switch (queue.size) {
        case 0:
          return null;
        case 1:
          cell = queue.head;
          queue.head = null;
          break;
        case 2:
          cell = queue.head;
          queue.last.prev = null;
          queue.head = queue.last;
          queue.last = null;
          break;
        default:
          cell = queue.head;
          queue.head = cell.next;
          queue.head.prev = null;
      }
      cell.next = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function deleteCell (cell) {
      if (cell.queue === null) {
        return;
      }
      if (cell.queue.last === cell) {
        takeLast(cell.queue);
        return;
      }
      if (cell.queue.head === cell) {
        takeHead(cell.queue);
        return;
      }
      if (cell.prev) {
        cell.prev.next = cell.next;
      }
      if (cell.next) {
        cell.next.prev = cell.prev;
      }
      cell.queue.size--;
      cell.queue = null;
      cell.value = null;
      cell.next  = null;
      cell.prev  = null;
    }

    function drainVar (util, avar) {
      if (avar.draining) {
        return;
      }

      var ps = avar.puts;
      var ts = avar.takes;
      var rs = avar.reads;
      var p, r, t, value, rsize;

      avar.draining = true;

      while (1) { // eslint-disable-line no-constant-condition
        p = null;
        r = null;
        t = null;
        value = avar.value;
        rsize = rs.size;

        if (avar.error !== null) {
          value = util.left(avar.error);
          while (p = takeHead(ps)) { // eslint-disable-line no-cond-assign
            runEff(p.cb(value));
          }
          while (r = takeHead(rs)) { // eslint-disable-line no-cond-assign
            runEff(r(value));
          }
          while (t = takeHead(ts)) { // eslint-disable-line no-cond-assign
            runEff(t(value));
          }
          break;
        }

        // Process the next put. We do not immediately invoke the callback
        // because we want to preserve ordering. If there are takes/reads
        // we want to run those first.
        if (value === EMPTY && (p = takeHead(ps))) {
          avar.value = value = p.value;
        }

        if (value !== EMPTY) {
          // We go ahead and queue up the next take for the same reasons as
          // above. Invoking the read callbacks can affect the mutable queue.
          t = takeHead(ts);
          // We only want to process the reads queued up before running these
          // callbacks so we guard on rsize.
          while (rsize-- && (r = takeHead(rs))) {
            runEff(r(util.right(value)));
          }
          if (t !== null) {
            avar.value = EMPTY;
            runEff(t(util.right(value)));
          }
        }

        if (p !== null) {
          runEff(p.cb(util.right(void 0)));
        }

        // Callbacks could have queued up more items so we need to guard on the
        // actual mutable properties.
        if (avar.value === EMPTY && ps.size === 0 || avar.value !== EMPTY && ts.size === 0) {
          break;
        }
      }
      avar.draining = false;
    }

    AVar.EMPTY      = EMPTY;
    AVar.putLast    = putLast;
    AVar.takeLast   = takeLast;
    AVar.takeHead   = takeHead;
    AVar.deleteCell = deleteCell;
    AVar.drainVar   = drainVar;

    return AVar;
  }();

  exports.empty = function () {
    return new AVar(AVar.EMPTY);
  };

  exports._readVar = function (util, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.reads, cb);
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };

  exports._tryPutVar = function (util, value, avar) {
    return function () {
      if (avar.value === AVar.EMPTY && avar.error === null) {
        avar.value = value;
        AVar.drainVar(util, avar);
        return true;
      } else {
        return false;
      }
    };
  };

  exports._status = function (util, avar) {
    return function () {
      if (avar.error) {
        return util.killed(avar.error);
      }
      if (avar.value === AVar.EMPTY) {
        return util.empty;
      }
      return util.filled(avar.value);
    };
  };
})(PS["Effect.AVar"] = PS["Effect.AVar"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.AVar"] = $PS["Effect.AVar"] || {};
  var exports = $PS["Effect.AVar"];
  var $foreign = $PS["Effect.AVar"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Killed = (function () {
      function Killed(value0) {
          this.value0 = value0;
      };
      Killed.create = function (value0) {
          return new Killed(value0);
      };
      return Killed;
  })();
  var Filled = (function () {
      function Filled(value0) {
          this.value0 = value0;
      };
      Filled.create = function (value0) {
          return new Filled(value0);
      };
      return Filled;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var isFilled = function (v) {
      if (v instanceof Filled) {
          return true;
      };
      return false;
  };
  var ffiUtil = {
      left: Data_Either.Left.create,
      right: Data_Either.Right.create,
      nothing: Data_Maybe.Nothing.value,
      just: Data_Maybe.Just.create,
      killed: Killed.create,
      filled: Filled.create,
      empty: Empty.value
  };
  var read = function (avar) {
      return function (cb) {
          return $foreign["_readVar"](ffiUtil, avar, cb);
      };
  };
  var status = function (avar) {
      return $foreign["_status"](ffiUtil, avar);
  };
  var tryPut = function (value) {
      return function (avar) {
          return $foreign["_tryPutVar"](ffiUtil, value, avar);
      };
  };
  exports["tryPut"] = tryPut;
  exports["read"] = read;
  exports["status"] = status;
  exports["isFilled"] = isFilled;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Aff.AVar"] = $PS["Effect.Aff.AVar"] || {};
  var exports = $PS["Effect.Aff.AVar"];
  var Effect_AVar = $PS["Effect.AVar"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var tryPut = function (value) {
      var $4 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
      var $5 = Effect_AVar.tryPut(value);
      return function ($6) {
          return $4($5($6));
      };
  };
  var status = (function () {
      var $7 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
      return function ($8) {
          return $7(Effect_AVar.status($8));
      };
  })();
  var read = function (avar) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var c = Effect_AVar.read(avar)(k)();
              return Effect_Aff.effectCanceler(c);
          };
      });
  };
  var empty = Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_AVar.empty);
  exports["empty"] = empty;
  exports["status"] = status;
  exports["tryPut"] = tryPut;
  exports["read"] = read;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Exception.Unsafe"] = $PS["Effect.Exception.Unsafe"] || {};
  var exports = $PS["Effect.Exception.Unsafe"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];                
  var unsafeThrowException = function ($0) {
      return Effect_Unsafe.unsafePerformEffect(Effect_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Effect_Exception.error($1));
  };
  exports["unsafeThrow"] = unsafeThrow;
})(PS);
(function(exports) {
  "use strict";

  exports.now = function () {
    return Date.now();
  };
})(PS["Effect.Now"] = PS["Effect.Now"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Now"] = $PS["Effect.Now"] || {};
  var exports = $PS["Effect.Now"];
  var $foreign = $PS["Effect.Now"];
  exports["now"] = $foreign.now;
})(PS);
(function(exports) {
  "use strict";

  exports.random = Math.random;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Random"] = $PS["Effect.Random"] || {};
  var exports = $PS["Effect.Random"];
  var $foreign = $PS["Effect.Random"];
  var Data_Int = $PS["Data.Int"];
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var n = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * n + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  exports["randomInt"] = randomInt;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify"] = modify;
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  "use strict";

  exports.runEffectFn1 = function runEffectFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };

  exports.runEffectFn4 = function runEffectFn4(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function() {
              return fn(a, b, c, d);
            };
          };
        };
      };
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Uncurried"] = $PS["Effect.Uncurried"] || {};
  var exports = $PS["Effect.Uncurried"];
  var $foreign = $PS["Effect.Uncurried"];
  exports["runEffectFn1"] = $foreign.runEffectFn1;
  exports["runEffectFn4"] = $foreign.runEffectFn4;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Foreign.Index"] = $PS["Foreign.Index"] || {};
  var exports = $PS["Foreign.Index"];
  var $foreign = $PS["Foreign.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Function = $PS["Data.Function"];
  var Foreign = $PS["Foreign"];                
  var Index = function (errorAt, hasOwnProperty, hasProperty, index) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.index = index;
  };
  var Indexable = function (ix) {
      this.ix = ix;
  };
  var unsafeReadProp = function (dictMonad) {
      return function (k) {
          return function (value) {
              return $foreign.unsafeReadPropImpl(Foreign.fail(dictMonad)(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad)), k, value);
          };
      };
  };
  var readProp = function (dictMonad) {
      return unsafeReadProp(dictMonad);
  };
  var ix = function (dict) {
      return dict.ix;
  };
  var index = function (dict) {
      return dict.index;
  };
  var indexableForeign = function (dictMonad) {
      return new Indexable(function (dictIndex) {
          return index(dictIndex);
      });
  };
  var hasPropertyImpl = function (v) {
      return function (value) {
          if (Foreign.isNull(value)) {
              return false;
          };
          if (Foreign.isUndefined(value)) {
              return false;
          };
          if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasProperty(v, value);
          };
          return false;
      };
  };
  var hasOwnPropertyImpl = function (v) {
      return function (value) {
          if (Foreign.isNull(value)) {
              return false;
          };
          if (Foreign.isUndefined(value)) {
              return false;
          };
          if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasOwnProperty(v, value);
          };
          return false;
      };
  };
  var indexString = function (dictMonad) {
      return new Index(Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readProp(dictMonad)));
  };
  exports["ix"] = ix;
  exports["indexString"] = indexString;
  exports["indexableForeign"] = indexableForeign;
})(PS);
(function(exports) {
  exports.unsafeStringify = function (x) {
    return JSON.stringify(x);
  };
})(PS["Foreign.Internal.Stringify"] = PS["Foreign.Internal.Stringify"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Foreign.Internal.Stringify"] = $PS["Foreign.Internal.Stringify"] || {};
  var exports = $PS["Foreign.Internal.Stringify"];
  var $foreign = $PS["Foreign.Internal.Stringify"];
  exports["unsafeStringify"] = $foreign.unsafeStringify;
})(PS);
(function(exports) {
  "use strict";

  exports.parseJSONImpl = function (str) {
    return JSON.parse(str);
  };
})(PS["Foreign.JSON"] = PS["Foreign.JSON"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Foreign.JSON"] = $PS["Foreign.JSON"] || {};
  var exports = $PS["Foreign.JSON"];
  var $foreign = $PS["Foreign.JSON"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Foreign = $PS["Foreign"];                
  var parseJSON = (function () {
      var $0 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)((function () {
          var $3 = Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList);
          return function ($4) {
              return $3(Foreign.ForeignError.create(Effect_Exception.message($4)));
          };
      })());
      var $1 = Effect_Uncurried.runEffectFn1($foreign.parseJSONImpl);
      return function ($2) {
          return Control_Monad_Except_Trans.ExceptT(Data_Identity.Identity($0(Effect_Unsafe.unsafePerformEffect(Effect_Exception["try"]($1($2))))));
      };
  })();
  exports["parseJSON"] = parseJSON;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Foreign.NullOrUndefined"] = $PS["Foreign.NullOrUndefined"] || {};
  var exports = $PS["Foreign.NullOrUndefined"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign = $PS["Foreign"];                
  var readNullOrUndefined = function (v) {
      return function (value) {
          if (Foreign.isNull(value) || Foreign.isUndefined(value)) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
          };
          return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Maybe.Just.create)(v(value));
      };
  };
  exports["readNullOrUndefined"] = readNullOrUndefined;
})(PS);
(function(exports) {
  "use strict";
  var path =require("path"); 

  exports.normalize = path.normalize;

  exports.concat = function (segments) {
    return path.join.apply(this, segments);
  };

  exports.resolve = function (from) {
    return function (to) {
      return function () {
        return path.resolve.apply(this, from.concat([to]));
      };
    };
  };                             

  exports.sep = path.sep;

  exports.delimiter = path.delimiter;
})(PS["Node.Path"] = PS["Node.Path"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.Path"] = $PS["Node.Path"] || {};
  var exports = $PS["Node.Path"];
  var $foreign = $PS["Node.Path"];
  exports["normalize"] = $foreign.normalize;
  exports["concat"] = $foreign.concat;
  exports["resolve"] = $foreign.resolve;
  exports["sep"] = $foreign.sep;
  exports["delimiter"] = $foreign.delimiter;
})(PS);
(function(exports) {
  "use strict";

  exports.process = process;

  exports.copyArray = function (xs) {
    return function () {
      return xs.slice();
    };
  };

  exports.copyObject = function (o) {
    return function () {
      return Object.assign({}, o);
    };
  };
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.Platform"] = $PS["Node.Platform"] || {};
  var exports = $PS["Node.Platform"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var AIX = (function () {
      function AIX() {

      };
      AIX.value = new AIX();
      return AIX;
  })();
  var Darwin = (function () {
      function Darwin() {

      };
      Darwin.value = new Darwin();
      return Darwin;
  })();
  var FreeBSD = (function () {
      function FreeBSD() {

      };
      FreeBSD.value = new FreeBSD();
      return FreeBSD;
  })();
  var Linux = (function () {
      function Linux() {

      };
      Linux.value = new Linux();
      return Linux;
  })();
  var OpenBSD = (function () {
      function OpenBSD() {

      };
      OpenBSD.value = new OpenBSD();
      return OpenBSD;
  })();
  var SunOS = (function () {
      function SunOS() {

      };
      SunOS.value = new SunOS();
      return SunOS;
  })();
  var Win32 = (function () {
      function Win32() {

      };
      Win32.value = new Win32();
      return Win32;
  })();
  var Android = (function () {
      function Android() {

      };
      Android.value = new Android();
      return Android;
  })();
  var fromString = function (v) {
      if (v === "aix") {
          return new Data_Maybe.Just(AIX.value);
      };
      if (v === "darwin") {
          return new Data_Maybe.Just(Darwin.value);
      };
      if (v === "freebsd") {
          return new Data_Maybe.Just(FreeBSD.value);
      };
      if (v === "linux") {
          return new Data_Maybe.Just(Linux.value);
      };
      if (v === "openbsd") {
          return new Data_Maybe.Just(OpenBSD.value);
      };
      if (v === "sunos") {
          return new Data_Maybe.Just(SunOS.value);
      };
      if (v === "win32") {
          return new Data_Maybe.Just(Win32.value);
      };
      if (v === "android") {
          return new Data_Maybe.Just(Android.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var eqPlatform = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof AIX && y instanceof AIX) {
              return true;
          };
          if (x instanceof Darwin && y instanceof Darwin) {
              return true;
          };
          if (x instanceof FreeBSD && y instanceof FreeBSD) {
              return true;
          };
          if (x instanceof Linux && y instanceof Linux) {
              return true;
          };
          if (x instanceof OpenBSD && y instanceof OpenBSD) {
              return true;
          };
          if (x instanceof SunOS && y instanceof SunOS) {
              return true;
          };
          if (x instanceof Win32 && y instanceof Win32) {
              return true;
          };
          if (x instanceof Android && y instanceof Android) {
              return true;
          };
          return false;
      };
  });
  exports["Win32"] = Win32;
  exports["fromString"] = fromString;
  exports["eqPlatform"] = eqPlatform;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.Process"] = $PS["Node.Process"] || {};
  var exports = $PS["Node.Process"];
  var $foreign = $PS["Node.Process"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Node_Platform = $PS["Node.Platform"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var platformStr = $foreign.process.platform;
  var platform = Node_Platform.fromString(platformStr);
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  var lookupMutableObject = function (k) {
      return function (o) {
          return mkEffect(function (v) {
              return Foreign_Object.lookup(k)(o);
          });
      };
  };
  var lookupEnv = function (k) {
      return lookupMutableObject(k)($foreign.process.env);
  };
  var getEnv = $foreign.copyObject($foreign.process.env);      
  var cwd = $foreign.process.cwd;
  var argv = $foreign.copyArray($foreign.process.argv);
  exports["argv"] = argv;
  exports["cwd"] = cwd;
  exports["getEnv"] = getEnv;
  exports["lookupEnv"] = lookupEnv;
  exports["platform"] = platform;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.Buffer.Class"] = $PS["Node.Buffer.Class"] || {};
  var exports = $PS["Node.Buffer.Class"];
  var MutableBuffer = function (Monad0, concat, concat$prime, copy, create, fill, freeze, fromArray, fromArrayBuffer, fromString, getAtOffset, read, readString, setAtOffset, size, slice, thaw, toArray, toArrayBuffer, toString, unsafeFreeze, unsafeThaw, write, writeString) {
      this.Monad0 = Monad0;
      this.concat = concat;
      this["concat'"] = concat$prime;
      this.copy = copy;
      this.create = create;
      this.fill = fill;
      this.freeze = freeze;
      this.fromArray = fromArray;
      this.fromArrayBuffer = fromArrayBuffer;
      this.fromString = fromString;
      this.getAtOffset = getAtOffset;
      this.read = read;
      this.readString = readString;
      this.setAtOffset = setAtOffset;
      this.size = size;
      this.slice = slice;
      this.thaw = thaw;
      this.toArray = toArray;
      this.toArrayBuffer = toArrayBuffer;
      this.toString = toString;
      this.unsafeFreeze = unsafeFreeze;
      this.unsafeThaw = unsafeThaw;
      this.write = write;
      this.writeString = writeString;
  };
  var toString = function (dict) {
      return dict.toString;
  };
  var readString = function (dict) {
      return dict.readString;
  };
  exports["MutableBuffer"] = MutableBuffer;
  exports["readString"] = readString;
  exports["toString"] = toString;
})(PS);
(function(exports) {
  /* global Buffer */
  "use strict";

  exports.copyAll = function (a) {
    return function () {
      return Buffer.from(a);
    };
  };

  exports.writeInternal = function (ty) {
    return function (value) {
      return function (offset) {
        return function (buf) {
          return function () {
            buf["write" + ty](value, offset);
          };
        };
      };
    };
  };

  exports.writeStringInternal = function (encoding) {
    return function (offset) {
      return function (length) {
        return function (value) {
          return function (buff) {
            return function () {
              return buff.write(value, offset, length, encoding);
            };
          };
        };
      };
    };
  };

  exports.setAtOffset = function (value) {
    return function (offset) {
      return function (buff) {
        return function () {
          buff[offset] = value;
        };
      };
    };
  };

  exports.copy = function (srcStart) {
    return function (srcEnd) {
      return function (src) {
        return function (targStart) {
          return function (targ) {
            return function () {
              return src.copy(targ, targStart, srcStart, srcEnd);
            };
          };
        };
      };
    };
  };

  exports.fill = function (octet) {
    return function (start) {
      return function (end) {
        return function (buf) {
          return function () {
            buf.fill(octet, start, end);
          };
        };
      };
    };
  };
})(PS["Node.Buffer.Internal"] = PS["Node.Buffer.Internal"] || {});
(function(exports) {
  /* global Buffer */
  "use strict";

  exports.create = function (size) {
    return Buffer.alloc(size);
  };

  exports.fromArray = function (octets) {
    return Buffer.from(octets);
  };

  exports.size = function (buff) {
    return buff.length;
  };

  exports.toArray = function (buff) {
    var json = buff.toJSON();
    return json.data || json;
  };

  exports.toArrayBuffer = function (buff) {
    return buff.buffer.slice(buff.byteOffset, buff.byteOffset + buff.byteLength);
  };

  exports.fromArrayBuffer = function (ab) {
    return Buffer.from(ab);
  };

  exports.fromStringImpl = function (str) {
    return function (encoding) {
      return Buffer.from(str, encoding);
    };
  };

  exports.readImpl = function (ty) {
    return function (offset) {
      return function (buf) {
        return buf["read" + ty](offset);
      };
    };
  };

  exports.readStringImpl = function (enc) {
    return function (start) {
      return function (end) {
        return function (buff) {
          return buff.toString(enc, start, end);
        };
      };
    };
  };

  exports.getAtOffsetImpl = function (just) {
    return function (nothing) {
      return function (offset) {
        return function (buff) {
          var octet = buff[offset];
          return octet == null ? nothing : just(octet);
        };
      };
    };
  };

  exports.toStringImpl = function (enc) {
    return function (buff) {
      return buff.toString(enc);
    };
  };

  exports.slice = function (start) {
    return function (end) {
      return function (buff) {
        return buff.slice(start, end);
      };
    };
  };

  exports.concat = function (buffs) {
    return Buffer.concat(buffs);
  };

  exports.concatToLength = function (buffs) {
    return function (totalLength) {
      return Buffer.concat(buffs, totalLength);
    };
  };
})(PS["Node.Buffer.Immutable"] = PS["Node.Buffer.Immutable"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.Buffer.Types"] = $PS["Node.Buffer.Types"] || {};
  var exports = $PS["Node.Buffer.Types"];
  var Data_Show = $PS["Data.Show"];                
  var UInt8 = (function () {
      function UInt8() {

      };
      UInt8.value = new UInt8();
      return UInt8;
  })();
  var UInt16LE = (function () {
      function UInt16LE() {

      };
      UInt16LE.value = new UInt16LE();
      return UInt16LE;
  })();
  var UInt16BE = (function () {
      function UInt16BE() {

      };
      UInt16BE.value = new UInt16BE();
      return UInt16BE;
  })();
  var UInt32LE = (function () {
      function UInt32LE() {

      };
      UInt32LE.value = new UInt32LE();
      return UInt32LE;
  })();
  var UInt32BE = (function () {
      function UInt32BE() {

      };
      UInt32BE.value = new UInt32BE();
      return UInt32BE;
  })();
  var Int8 = (function () {
      function Int8() {

      };
      Int8.value = new Int8();
      return Int8;
  })();
  var Int16LE = (function () {
      function Int16LE() {

      };
      Int16LE.value = new Int16LE();
      return Int16LE;
  })();
  var Int16BE = (function () {
      function Int16BE() {

      };
      Int16BE.value = new Int16BE();
      return Int16BE;
  })();
  var Int32LE = (function () {
      function Int32LE() {

      };
      Int32LE.value = new Int32LE();
      return Int32LE;
  })();
  var Int32BE = (function () {
      function Int32BE() {

      };
      Int32BE.value = new Int32BE();
      return Int32BE;
  })();
  var FloatLE = (function () {
      function FloatLE() {

      };
      FloatLE.value = new FloatLE();
      return FloatLE;
  })();
  var FloatBE = (function () {
      function FloatBE() {

      };
      FloatBE.value = new FloatBE();
      return FloatBE;
  })();
  var DoubleLE = (function () {
      function DoubleLE() {

      };
      DoubleLE.value = new DoubleLE();
      return DoubleLE;
  })();
  var DoubleBE = (function () {
      function DoubleBE() {

      };
      DoubleBE.value = new DoubleBE();
      return DoubleBE;
  })();
  var showBufferValueType = new Data_Show.Show(function (v) {
      if (v instanceof UInt8) {
          return "UInt8";
      };
      if (v instanceof UInt16LE) {
          return "UInt16LE";
      };
      if (v instanceof UInt16BE) {
          return "UInt16BE";
      };
      if (v instanceof UInt32LE) {
          return "UInt32LE";
      };
      if (v instanceof UInt32BE) {
          return "UInt32BE";
      };
      if (v instanceof Int8) {
          return "Int8";
      };
      if (v instanceof Int16LE) {
          return "Int16LE";
      };
      if (v instanceof Int16BE) {
          return "Int16BE";
      };
      if (v instanceof Int32LE) {
          return "Int32LE";
      };
      if (v instanceof Int32BE) {
          return "Int32BE";
      };
      if (v instanceof FloatLE) {
          return "FloatLE";
      };
      if (v instanceof FloatBE) {
          return "FloatBE";
      };
      if (v instanceof DoubleLE) {
          return "DoubleLE";
      };
      if (v instanceof DoubleBE) {
          return "DoubleBE";
      };
      throw new Error("Failed pattern match at Node.Buffer.Types (line 33, column 1 - line 47, column 29): " + [ v.constructor.name ]);
  });
  exports["showBufferValueType"] = showBufferValueType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.Encoding"] = $PS["Node.Encoding"] || {};
  var exports = $PS["Node.Encoding"];
  var Data_Show = $PS["Data.Show"];                
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = new Data_Show.Show(function (v) {
      if (v instanceof ASCII) {
          return "ASCII";
      };
      if (v instanceof UTF8) {
          return "UTF8";
      };
      if (v instanceof UTF16LE) {
          return "UTF16LE";
      };
      if (v instanceof UCS2) {
          return "UCS2";
      };
      if (v instanceof Base64) {
          return "Base64";
      };
      if (v instanceof Latin1) {
          return "Latin1";
      };
      if (v instanceof Binary) {
          return "Binary";
      };
      if (v instanceof Hex) {
          return "Hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [ v.constructor.name ]);
  });
  var encodingToNode = function (v) {
      if (v instanceof ASCII) {
          return "ascii";
      };
      if (v instanceof UTF8) {
          return "utf8";
      };
      if (v instanceof UTF16LE) {
          return "utf16le";
      };
      if (v instanceof UCS2) {
          return "ucs2";
      };
      if (v instanceof Base64) {
          return "base64";
      };
      if (v instanceof Latin1) {
          return "latin1";
      };
      if (v instanceof Binary) {
          return "binary";
      };
      if (v instanceof Hex) {
          return "hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 31, column 1 - line 31, column 37): " + [ v.constructor.name ]);
  };
  exports["UTF8"] = UTF8;
  exports["encodingToNode"] = encodingToNode;
  exports["showEncoding"] = showEncoding;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.Buffer.Immutable"] = $PS["Node.Buffer.Immutable"] || {};
  var exports = $PS["Node.Buffer.Immutable"];
  var $foreign = $PS["Node.Buffer.Immutable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Node_Buffer_Types = $PS["Node.Buffer.Types"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var toString = function ($3) {
      return $foreign.toStringImpl(Node_Encoding.encodingToNode($3));
  };                                                     
  var readString = function ($4) {
      return $foreign.readStringImpl(Node_Encoding.encodingToNode($4));
  };
  var read = (function () {
      var $5 = Data_Show.show(Node_Buffer_Types.showBufferValueType);
      return function ($6) {
          return $foreign.readImpl($5($6));
      };
  })();
  var getAtOffset = $foreign.getAtOffsetImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = function (str) {
      var $7 = $foreign.fromStringImpl(str);
      return function ($8) {
          return $7(Node_Encoding.encodingToNode($8));
      };
  }; 
  var concat$prime = $foreign.concatToLength;
  exports["fromString"] = fromString;
  exports["read"] = read;
  exports["readString"] = readString;
  exports["toString"] = toString;
  exports["getAtOffset"] = getAtOffset;
  exports["concat'"] = concat$prime;
  exports["create"] = $foreign.create;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromArrayBuffer"] = $foreign.fromArrayBuffer;
  exports["toArray"] = $foreign.toArray;
  exports["toArrayBuffer"] = $foreign.toArrayBuffer;
  exports["concat"] = $foreign.concat;
  exports["slice"] = $foreign.slice;
  exports["size"] = $foreign.size;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.Buffer.Internal"] = $PS["Node.Buffer.Internal"] || {};
  var exports = $PS["Node.Buffer.Internal"];
  var $foreign = $PS["Node.Buffer.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Node_Buffer_Immutable = $PS["Node.Buffer.Immutable"];
  var Node_Buffer_Types = $PS["Node.Buffer.Types"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var writeString = function (dictMonad) {
      return function ($20) {
          return $foreign.writeStringInternal(Node_Encoding.encodingToNode($20));
      };
  };
  var write = function (dictMonad) {
      var $21 = Data_Show.show(Node_Buffer_Types.showBufferValueType);
      return function ($22) {
          return $foreign.writeInternal($21($22));
      };
  };
  var unsafeThaw = function (dictMonad) {
      var $23 = Control_Applicative.pure(dictMonad.Applicative0());
      return function ($24) {
          return $23($24);
      };
  };
  var usingToImmutable = function (dictMonad) {
      return function (f) {
          return function (x) {
              return unsafeThaw(dictMonad)(f(x));
          };
      };
  };
  var unsafeFreeze = function (dictMonad) {
      var $25 = Control_Applicative.pure(dictMonad.Applicative0());
      return function ($26) {
          return $25($26);
      };
  };
  var usingFromImmutable = function (dictMonad) {
      return function (f) {
          return function (buf) {
              return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(f)(unsafeFreeze(dictMonad)(buf));
          };
      };
  };
  var toString = function (dictMonad) {
      return function (m) {
          return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toString(m));
      };
  };
  var toArrayBuffer = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArrayBuffer);
  };
  var toArray = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArray);
  };
  var slice = Node_Buffer_Immutable.slice;
  var size = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.size);
  };
  var readString = function (dictMonad) {
      return function (m) {
          return function (o) {
              return function (o$prime) {
                  return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.readString(m)(o)(o$prime));
              };
          };
      };
  };
  var read = function (dictMonad) {
      return function (t) {
          return function (o) {
              return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.read(t)(o));
          };
      };
  };
  var getAtOffset = function (dictMonad) {
      return function (o) {
          return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.getAtOffset(o));
      };
  };
  var fromString = function (dictMonad) {
      return function (s) {
          return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromString(s));
      };
  };
  var fromArrayBuffer = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArrayBuffer);
  };
  var fromArray = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArray);
  };
  var create = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.create);
  };
  var concat$prime = function (dictMonad) {
      return function (arrs) {
          return function (n) {
              return function (v) {
                  return Node_Buffer_Immutable["concat'"](arrs)(n);
              };
          };
      };
  };
  var concat = function (arrs) {
      return function (v) {
          return Node_Buffer_Immutable.concat(arrs);
      };
  };
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["unsafeThaw"] = unsafeThaw;
  exports["create"] = create;
  exports["fromArray"] = fromArray;
  exports["fromString"] = fromString;
  exports["fromArrayBuffer"] = fromArrayBuffer;
  exports["toArrayBuffer"] = toArrayBuffer;
  exports["read"] = read;
  exports["readString"] = readString;
  exports["toString"] = toString;
  exports["write"] = write;
  exports["writeString"] = writeString;
  exports["toArray"] = toArray;
  exports["getAtOffset"] = getAtOffset;
  exports["slice"] = slice;
  exports["size"] = size;
  exports["concat"] = concat;
  exports["concat'"] = concat$prime;
  exports["copyAll"] = $foreign.copyAll;
  exports["setAtOffset"] = $foreign.setAtOffset;
  exports["copy"] = $foreign.copy;
  exports["fill"] = $foreign.fill;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.Buffer"] = $PS["Node.Buffer"] || {};
  var exports = $PS["Node.Buffer"];
  var Effect = $PS["Effect"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_Buffer_Internal = $PS["Node.Buffer.Internal"];          
  var mutableBufferEffect = new Node_Buffer_Class.MutableBuffer(function () {
      return Effect.monadEffect;
  }, Node_Buffer_Internal.concat, Node_Buffer_Internal["concat'"](Effect.monadEffect), Node_Buffer_Internal.copy, Node_Buffer_Internal.create(Effect.monadEffect), Node_Buffer_Internal.fill, Node_Buffer_Internal.copyAll, Node_Buffer_Internal.fromArray(Effect.monadEffect), Node_Buffer_Internal.fromArrayBuffer(Effect.monadEffect), Node_Buffer_Internal.fromString(Effect.monadEffect), Node_Buffer_Internal.getAtOffset(Effect.monadEffect), Node_Buffer_Internal.read(Effect.monadEffect), Node_Buffer_Internal.readString(Effect.monadEffect), Node_Buffer_Internal.setAtOffset, Node_Buffer_Internal.size(Effect.monadEffect), Node_Buffer_Internal.slice, Node_Buffer_Internal.copyAll, Node_Buffer_Internal.toArray(Effect.monadEffect), Node_Buffer_Internal.toArrayBuffer(Effect.monadEffect), Node_Buffer_Internal.toString(Effect.monadEffect), Node_Buffer_Internal.unsafeFreeze(Effect.monadEffect), Node_Buffer_Internal.unsafeThaw(Effect.monadEffect), Node_Buffer_Internal.write(Effect.monadEffect), Node_Buffer_Internal.writeString(Effect.monadEffect));
  exports["mutableBufferEffect"] = mutableBufferEffect;
})(PS);
(function(exports) {
  "use strict";

  /* eslint-env node*/

  exports.unsafeFromNullable = function unsafeFromNullable(msg) {
    return function (x) {
      if (x === null) throw new Error(msg);
      return x;
    };
  };

  exports.spawnImpl = function spawnImpl(command) {
    return function (args) {
      return function (opts) {
        return function () {
          return require("child_process").spawn(command, args, opts);
        };
      };
    };
  };

  exports.execFileImpl = function execImpl(command) {
    return function (args) {
      return function (opts) {
        return function (callback) {
          return function () {
            return require("child_process").execFile(
              command,
              args,
              opts,
              function (err, stdout, stderr) {
                callback(err)(stdout)(stderr)();
              }
            );
          };
        };
      };
    };
  };

  exports.mkOnExit = function mkOnExit(mkChildExit) {
    return function onExit(cp) {
      return function (cb) {
        return function () {
          cp.on("exit", function (code, signal) {
            cb(mkChildExit(code)(signal))();
          });
        };
      };
    };
  };

  exports.mkOnClose = function mkOnClose(mkChildExit) {
    return function onClose(cp) {
      return function (cb) {
        return function () {
          cp.on("close", function (code, signal) {
            cb(mkChildExit(code)(signal))();
          });
        };
      };
    };
  };

  exports.onError = function onError(cp) {
    return function (cb) {
      return function () {
        cp.on("error", function (err) {
          cb(err)();
        });
      };
    };
  };

  exports.undefined = undefined;
})(PS["Node.ChildProcess"] = PS["Node.ChildProcess"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.ChildProcess"] = $PS["Node.ChildProcess"] || {};
  var exports = $PS["Node.ChildProcess"];
  var $foreign = $PS["Node.ChildProcess"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Posix_Signal = $PS["Data.Posix.Signal"];
  var Effect_Exception_Unsafe = $PS["Effect.Exception.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var Pipe = (function () {
      function Pipe() {

      };
      Pipe.value = new Pipe();
      return Pipe;
  })();
  var Ignore = (function () {
      function Ignore() {

      };
      Ignore.value = new Ignore();
      return Ignore;
  })();
  var ShareStream = (function () {
      function ShareStream(value0) {
          this.value0 = value0;
      };
      ShareStream.create = function (value0) {
          return new ShareStream(value0);
      };
      return ShareStream;
  })();
  var ShareFD = (function () {
      function ShareFD(value0) {
          this.value0 = value0;
      };
      ShareFD.create = function (value0) {
          return new ShareFD(value0);
      };
      return ShareFD;
  })();
  var Normally = (function () {
      function Normally(value0) {
          this.value0 = value0;
      };
      Normally.create = function (value0) {
          return new Normally(value0);
      };
      return Normally;
  })();
  var BySignal = (function () {
      function BySignal(value0) {
          this.value0 = value0;
      };
      BySignal.create = function (value0) {
          return new BySignal(value0);
      };
      return BySignal;
  })();
  var toStandardError = Unsafe_Coerce.unsafeCoerce;
  var toActualStdIOBehaviour = function (b) {
      if (b instanceof Pipe) {
          return "pipe";
      };
      if (b instanceof Ignore) {
          return "ignore";
      };
      if (b instanceof ShareFD) {
          return b.value0;
      };
      if (b instanceof ShareStream) {
          return b.value0;
      };
      throw new Error("Failed pattern match at Node.ChildProcess (line 510, column 28 - line 514, column 33): " + [ b.constructor.name ]);
  };
  var toActualStdIOOptions = Data_Functor.map(Data_Functor.functorArray)((function () {
      var $29 = Data_Functor.map(Data_Maybe.functorMaybe)(toActualStdIOBehaviour);
      return function ($30) {
          return Data_Nullable.toNullable($29($30));
      };
  })());
  var spawn = function (cmd) {
      return function (args) {
          var convertOpts = function (opts) {
              return {
                  cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
                  stdio: toActualStdIOOptions(opts.stdio),
                  env: Data_Nullable.toNullable(opts.env),
                  detached: opts.detached,
                  uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
                  gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
              };
          };
          var $31 = $foreign.spawnImpl(cmd)(args);
          return function ($32) {
              return $31(convertOpts($32));
          };
      };
  }; 
  var runChildProcess = function (v) {
      return v;
  };
  var pipe = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.Just.create)([ Pipe.value, Pipe.value, Pipe.value ]);
  var mkExit = function (code) {
      return function (signal) {
          var fromSignal = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Data_Nullable.toMaybe)((function () {
              var $34 = Data_Functor.map(Data_Maybe.functorMaybe)(BySignal.create);
              return function ($35) {
                  return $34(Data_Posix_Signal.fromString($35));
              };
          })());
          var fromCode = (function () {
              var $36 = Data_Functor.map(Data_Maybe.functorMaybe)(Normally.create);
              return function ($37) {
                  return $36(Data_Nullable.toMaybe($37));
              };
          })();
          var v = Control_Alt.alt(Data_Maybe.altMaybe)(fromCode(code))(fromSignal(signal));
          if (v instanceof Data_Maybe.Just) {
              return v.value0;
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Effect_Exception_Unsafe.unsafeThrow("Node.ChildProcess.mkExit: Invalid arguments");
          };
          throw new Error("Failed pattern match at Node.ChildProcess (line 169, column 3 - line 171, column 73): " + [ v.constructor.name ]);
      };
  };
  var onClose = $foreign.mkOnClose(mkExit);
  var onExit = $foreign.mkOnExit(mkExit);
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  var missingStream = function (str) {
      return "Node.ChildProcess: stream not available: " + (str + ("\x0aThis is probably " + ("because you passed something other than Pipe to the stdio option when " + "you spawned it.")));
  };
  var stderr = (function () {
      var $38 = $foreign.unsafeFromNullable(missingStream("stderr"));
      return function ($39) {
          return $38((function (v) {
              return v.stderr;
          })(runChildProcess($39)));
      };
  })();
  var stdin = (function () {
      var $40 = $foreign.unsafeFromNullable(missingStream("stdin"));
      return function ($41) {
          return $40((function (v) {
              return v.stdin;
          })(runChildProcess($41)));
      };
  })();
  var stdout = (function () {
      var $42 = $foreign.unsafeFromNullable(missingStream("stdout"));
      return function ($43) {
          return $42((function (v) {
              return v.stdout;
          })(runChildProcess($43)));
      };
  })();
  var kill = function (sig) {
      return function (v) {
          return mkEffect(function (v1) {
              return v.kill(Data_Posix_Signal.toString(sig));
          });
      };
  };
  var defaultSpawnOptions = {
      cwd: Data_Maybe.Nothing.value,
      stdio: pipe,
      env: Data_Maybe.Nothing.value,
      detached: false,
      uid: Data_Maybe.Nothing.value,
      gid: Data_Maybe.Nothing.value
  };
  var defaultExecOptions = {
      cwd: Data_Maybe.Nothing.value,
      env: Data_Maybe.Nothing.value,
      timeout: Data_Maybe.Nothing.value,
      maxBuffer: Data_Maybe.Nothing.value,
      killSignal: Data_Maybe.Nothing.value,
      uid: Data_Maybe.Nothing.value,
      gid: Data_Maybe.Nothing.value
  };
  var convertExecOptions = function (opts) {
      return {
          cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
          env: Data_Maybe.fromMaybe($foreign["undefined"])(opts.env),
          timeout: Data_Maybe.fromMaybe($foreign["undefined"])(opts.timeout),
          maxBuffer: Data_Maybe.fromMaybe($foreign["undefined"])(opts.maxBuffer),
          killSignal: Data_Maybe.fromMaybe($foreign["undefined"])(opts.killSignal),
          uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
          gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
      };
  };
  var execFile = function (cmd) {
      return function (args) {
          return function (opts) {
              return function (callback) {
                  return $foreign.execFileImpl(cmd)(args)(convertExecOptions(opts))(function (err) {
                      return function (stdout$prime) {
                          return function (stderr$prime) {
                              return callback({
                                  error: Data_Nullable.toMaybe(err),
                                  stdout: stdout$prime,
                                  stderr: stderr$prime
                              });
                          };
                      };
                  });
              };
          };
      };
  };
  exports["stdin"] = stdin;
  exports["stdout"] = stdout;
  exports["stderr"] = stderr;
  exports["kill"] = kill;
  exports["toStandardError"] = toStandardError;
  exports["Normally"] = Normally;
  exports["onExit"] = onExit;
  exports["onClose"] = onClose;
  exports["spawn"] = spawn;
  exports["defaultSpawnOptions"] = defaultSpawnOptions;
  exports["execFile"] = execFile;
  exports["defaultExecOptions"] = defaultExecOptions;
  exports["pipe"] = pipe;
  exports["onError"] = $foreign.onError;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeRequireFS = require("fs");
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.FS.Internal"] = $PS["Node.FS.Internal"] || {};
  var exports = $PS["Node.FS.Internal"];
  var $foreign = $PS["Node.FS.Internal"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  exports["mkEffect"] = mkEffect;
  exports["unsafeRequireFS"] = $foreign.unsafeRequireFS;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.FS.Sync"] = $PS["Node.FS.Sync"] || {};
  var exports = $PS["Node.FS.Sync"];
  var Data_Show = $PS["Data.Show"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Internal = $PS["Node.FS.Internal"];          
  var fs = Node_FS_Internal.unsafeRequireFS;
  var readTextFile = function (encoding) {
      return function (file) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readFileSync(file, {
                  encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
              });
          });
      };
  };
  var unlink = function (file) {
      return Node_FS_Internal.mkEffect(function (v) {
          return fs.unlinkSync(file);
      });
  };
  var writeTextFile = function (encoding) {
      return function (file) {
          return function (text) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.writeFileSync(file, text, {
                      encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                  });
              });
          };
      };
  };
  var appendTextFile = function (encoding) {
      return function (file) {
          return function (buff) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.appendFileSync(file, buff, {
                      encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                  });
              });
          };
      };
  };
  exports["unlink"] = unlink;
  exports["readTextFile"] = readTextFile;
  exports["writeTextFile"] = writeTextFile;
  exports["appendTextFile"] = appendTextFile;
})(PS);
(function(exports) {
  
  var which =require("which"); 

  exports.whichImpl = function (options) {
    return function (path) {
      return function (errcb) {
        return function (cb) {
          return function() {
            which(path, { all: true, path: options.path, pathExt: options.pathExt }, function(err, resolved) {
              if (err) {
                errcb(err)();
              }
              else {
                cb(resolved)();
              }
            });
          };
        };
      };
    };
  };
})(PS["Node.Which"] = PS["Node.Which"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.Which"] = $PS["Node.Which"] || {};
  var exports = $PS["Node.Which"];
  var $foreign = $PS["Node.Which"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var which$prime = function (v) {
      return function (s) {
          return Effect_Aff.makeAff(function (cb) {
              return Data_Functor.voidRight(Effect.functorEffect)(Effect_Aff.nonCanceler)($foreign.whichImpl({
                  path: Data_Nullable.toNullable(v.path),
                  pathExt: Data_Nullable.toNullable(v.pathExt)
              })(s)(function ($5) {
                  return cb(Data_Either.Left.create($5));
              })(function ($6) {
                  return cb(Data_Either.Right.create($6));
              }));
          });
      };
  };
  exports["which'"] = which$prime;
})(PS);
(function(exports) {
  
  var net =require("net"); 

  exports.send = function(cmd){
    return function(port){
      return function(cb){
        return function(err){
          return function(){
            var sock = net.createConnection({port: port})
              , result = ""
            sock.on('data', function (data) {
              result += data
            })
            .on('end', function () {
              cb(result)()
            })
            .on('connect', function () {
              sock.setEncoding('utf8');
              sock.write(cmd + "\n")
            })
            .on('error', function (e) {
              err(e)()
            })
          }
        }
      }
    }
  }
})(PS["PscIde"] = PS["PscIde"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["PscIde.Command"] = $PS["PscIde.Command"] || {};
  var exports = $PS["PscIde.Command"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Combinators = $PS["Data.Argonaut.Decode.Combinators"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Decode_Parser = $PS["Data.Argonaut.Decode.Parser"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Combinators = $PS["Data.Argonaut.Encode.Combinators"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];                
  var Package = (function () {
      function Package() {

      };
      Package.value = new Package();
      return Package;
  })();
  var Ident = (function () {
      function Ident() {

      };
      Ident.value = new Ident();
      return Ident;
  })();
  var NSValue = (function () {
      function NSValue() {

      };
      NSValue.value = new NSValue();
      return NSValue;
  })();
  var NSType = (function () {
      function NSType() {

      };
      NSType.value = new NSType();
      return NSType;
  })();
  var NSKind = (function () {
      function NSKind() {

      };
      NSKind.value = new NSKind();
      return NSKind;
  })();
  var ModuleList = function (x) {
      return x;
  };
  var Message = function (x) {
      return x;
  };
  var Flex = (function () {
      function Flex(value0) {
          this.value0 = value0;
      };
      Flex.create = function (value0) {
          return new Flex(value0);
      };
      return Flex;
  })();
  var Distance = (function () {
      function Distance(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Distance.create = function (value0) {
          return function (value1) {
              return new Distance(value0, value1);
          };
      };
      return Distance;
  })();
  var LoadedModules = (function () {
      function LoadedModules() {

      };
      LoadedModules.value = new LoadedModules();
      return LoadedModules;
  })();
  var Imports = (function () {
      function Imports(value0) {
          this.value0 = value0;
      };
      Imports.create = function (value0) {
          return new Imports(value0);
      };
      return Imports;
  })();
  var AvailableModules = (function () {
      function AvailableModules() {

      };
      AvailableModules.value = new AvailableModules();
      return AvailableModules;
  })();
  var Implicit = (function () {
      function Implicit() {

      };
      Implicit.value = new Implicit();
      return Implicit;
  })();
  var Explicit = (function () {
      function Explicit(value0) {
          this.value0 = value0;
      };
      Explicit.create = function (value0) {
          return new Explicit(value0);
      };
      return Explicit;
  })();
  var Hiding = (function () {
      function Hiding(value0) {
          this.value0 = value0;
      };
      Hiding.create = function (value0) {
          return new Hiding(value0);
      };
      return Hiding;
  })();
  var AddImplicitImport = (function () {
      function AddImplicitImport(value0) {
          this.value0 = value0;
      };
      AddImplicitImport.create = function (value0) {
          return new AddImplicitImport(value0);
      };
      return AddImplicitImport;
  })();
  var AddQualifiedImport = (function () {
      function AddQualifiedImport(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AddQualifiedImport.create = function (value0) {
          return function (value1) {
              return new AddQualifiedImport(value0, value1);
          };
      };
      return AddQualifiedImport;
  })();
  var AddImport = (function () {
      function AddImport(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AddImport.create = function (value0) {
          return function (value1) {
              return new AddImport(value0, value1);
          };
      };
      return AddImport;
  })();
  var DeclValue = (function () {
      function DeclValue() {

      };
      DeclValue.value = new DeclValue();
      return DeclValue;
  })();
  var DeclType = (function () {
      function DeclType() {

      };
      DeclType.value = new DeclType();
      return DeclType;
  })();
  var DeclTypeSynonym = (function () {
      function DeclTypeSynonym() {

      };
      DeclTypeSynonym.value = new DeclTypeSynonym();
      return DeclTypeSynonym;
  })();
  var DeclDataConstructor = (function () {
      function DeclDataConstructor() {

      };
      DeclDataConstructor.value = new DeclDataConstructor();
      return DeclDataConstructor;
  })();
  var DeclTypeClass = (function () {
      function DeclTypeClass() {

      };
      DeclTypeClass.value = new DeclTypeClass();
      return DeclTypeClass;
  })();
  var DeclValueOperator = (function () {
      function DeclValueOperator() {

      };
      DeclValueOperator.value = new DeclValueOperator();
      return DeclValueOperator;
  })();
  var DeclTypeOperator = (function () {
      function DeclTypeOperator() {

      };
      DeclTypeOperator.value = new DeclTypeOperator();
      return DeclTypeOperator;
  })();
  var DeclModule = (function () {
      function DeclModule() {

      };
      DeclModule.value = new DeclModule();
      return DeclModule;
  })();
  var ExactFilter = (function () {
      function ExactFilter(value0) {
          this.value0 = value0;
      };
      ExactFilter.create = function (value0) {
          return new ExactFilter(value0);
      };
      return ExactFilter;
  })();
  var PrefixFilter = (function () {
      function PrefixFilter(value0) {
          this.value0 = value0;
      };
      PrefixFilter.create = function (value0) {
          return new PrefixFilter(value0);
      };
      return PrefixFilter;
  })();
  var ModuleFilter = (function () {
      function ModuleFilter(value0) {
          this.value0 = value0;
      };
      ModuleFilter.create = function (value0) {
          return new ModuleFilter(value0);
      };
      return ModuleFilter;
  })();
  var DependencyFilter = (function () {
      function DependencyFilter(value0) {
          this.value0 = value0;
      };
      DependencyFilter.create = function (value0) {
          return new DependencyFilter(value0);
      };
      return DependencyFilter;
  })();
  var NamespaceFilter = (function () {
      function NamespaceFilter(value0) {
          this.value0 = value0;
      };
      NamespaceFilter.create = function (value0) {
          return new NamespaceFilter(value0);
      };
      return NamespaceFilter;
  })();
  var DeclarationFilter = (function () {
      function DeclarationFilter(value0) {
          this.value0 = value0;
      };
      DeclarationFilter.create = function (value0) {
          return new DeclarationFilter(value0);
      };
      return DeclarationFilter;
  })();
  var SuccessFile = (function () {
      function SuccessFile(value0) {
          this.value0 = value0;
      };
      SuccessFile.create = function (value0) {
          return new SuccessFile(value0);
      };
      return SuccessFile;
  })();
  var SuccessText = (function () {
      function SuccessText(value0) {
          this.value0 = value0;
      };
      SuccessText.create = function (value0) {
          return new SuccessText(value0);
      };
      return SuccessText;
  })();
  var MultipleResults = (function () {
      function MultipleResults(value0) {
          this.value0 = value0;
      };
      MultipleResults.create = function (value0) {
          return new MultipleResults(value0);
      };
      return MultipleResults;
  })();
  var RebuildResult = function (x) {
      return x;
  };
  var JS = (function () {
      function JS() {

      };
      JS.value = new JS();
      return JS;
  })();
  var JSSourceMap = (function () {
      function JSSourceMap() {

      };
      JSSourceMap.value = new JSSourceMap();
      return JSSourceMap;
  })();
  var CoreFn = (function () {
      function CoreFn() {

      };
      CoreFn.value = new CoreFn();
      return CoreFn;
  })();
  var Other = (function () {
      function Other(value0) {
          this.value0 = value0;
      };
      Other.create = function (value0) {
          return new Other(value0);
      };
      return Other;
  })();
  var Cwd = (function () {
      function Cwd() {

      };
      Cwd.value = new Cwd();
      return Cwd;
  })();
  var Ls = (function () {
      function Ls(value0) {
          this.value0 = value0;
      };
      Ls.create = function (value0) {
          return new Ls(value0);
      };
      return Ls;
  })();
  var Quit = (function () {
      function Quit() {

      };
      Quit.value = new Quit();
      return Quit;
  })();
  var Reset = (function () {
      function Reset() {

      };
      Reset.value = new Reset();
      return Reset;
  })();
  var Load = (function () {
      function Load(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Load.create = function (value0) {
          return function (value1) {
              return new Load(value0, value1);
          };
      };
      return Load;
  })();
  var Complete = (function () {
      function Complete(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Complete.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Complete(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Complete;
  })();
  var Pursuit = (function () {
      function Pursuit(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Pursuit.create = function (value0) {
          return function (value1) {
              return new Pursuit(value0, value1);
          };
      };
      return Pursuit;
  })();
  var Type = (function () {
      function Type(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Type.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Type(value0, value1, value2);
              };
          };
      };
      return Type;
  })();
  var AddClause = (function () {
      function AddClause(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AddClause.create = function (value0) {
          return function (value1) {
              return new AddClause(value0, value1);
          };
      };
      return AddClause;
  })();
  var CaseSplit = (function () {
      function CaseSplit(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      CaseSplit.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new CaseSplit(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return CaseSplit;
  })();
  var ImportCmd = (function () {
      function ImportCmd(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      ImportCmd.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new ImportCmd(value0, value1, value2, value3);
                  };
              };
          };
      };
      return ImportCmd;
  })();
  var RebuildCmd = (function () {
      function RebuildCmd(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RebuildCmd.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RebuildCmd(value0, value1, value2);
              };
          };
      };
      return RebuildCmd;
  })();
  var Usages = (function () {
      function Usages(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Usages.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Usages(value0, value1, value2);
              };
          };
      };
      return Usages;
  })();
  var unwrapResponse = function (dictDecodeJson) {
      return function (dictDecodeJson1) {
          return function (s) {
              return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.printJsonDecodeError)(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Parser.parseJson(s))(function (json) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (o) {
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("resultType"))(function (resultType) {
                          if (resultType === "success") {
                              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(dictDecodeJson1)(o)("result"))(function (result) {
                                  return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Either.Right(result));
                              });
                          };
                          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(dictDecodeJson)(o)("result"))(function (result) {
                              return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Either.Left(result));
                          });
                      });
                  });
              }));
          };
      };
  };
  var showPursuitType = new Data_Show.Show(function (v) {
      if (v instanceof Package) {
          return "package";
      };
      if (v instanceof Ident) {
          return "completion";
      };
      throw new Error("Failed pattern match at PscIde.Command (line 19, column 1 - line 21, column 30): " + [ v.constructor.name ]);
  });
  var jsonSingletonObject$prime = function (dictEncodeJson) {
      return function (s) {
          return function (o) {
              return Data_Argonaut_Core.jsonSingletonObject(s)(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(o));
          };
      };
  };
  var filterWrapper = function (dictEncodeJson) {
      return function (f) {
          return function (q) {
              return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("filter")(f))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(dictEncodeJson)("params")(q))(Data_Argonaut_Core.jsonEmptyObject));
          };
      };
  };
  var encodePursuitType = new Data_Argonaut_Encode_Class.EncodeJson((function () {
      var $92 = Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString);
      var $93 = Data_Show.show(showPursuitType);
      return function ($94) {
          return $92($93($94));
      };
  })());
  var encodeNamespace = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      if (v instanceof NSValue) {
          return Data_Argonaut_Core.fromString("value");
      };
      if (v instanceof NSType) {
          return Data_Argonaut_Core.fromString("type");
      };
      if (v instanceof NSKind) {
          return Data_Argonaut_Core.fromString("kind");
      };
      throw new Error("Failed pattern match at PscIde.Command (line 241, column 1 - line 244, column 40): " + [ v.constructor.name ]);
  });
  var encodeMaybeNull = function (dictEncodeJson) {
      return Data_Maybe.maybe(Data_Argonaut_Core.jsonNull)(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson));
  };
  var encodeMatcher = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      if (v instanceof Flex) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("matcher")("flex"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("params")(jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("search")(v.value0)))(Data_Argonaut_Core.jsonEmptyObject));
      };
      if (v instanceof Distance) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("matcher")("distance"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("params")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("search")(v.value0))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonInt)("maximumDistance")(v.value1))(Data_Argonaut_Core.jsonEmptyObject))))(Data_Argonaut_Core.jsonEmptyObject));
      };
      throw new Error("Failed pattern match at PscIde.Command (line 30, column 1 - line 42, column 23): " + [ v.constructor.name ]);
  });
  var encodeImportCommand = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      if (v instanceof AddImplicitImport) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("importCommand")("addImplicitImport"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("module")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Core.jsonEmptyObject));
      };
      if (v instanceof AddQualifiedImport) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("importCommand")("addQualifiedImport"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("module")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("qualifier")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value1)))(Data_Argonaut_Core.jsonEmptyObject)));
      };
      if (v instanceof AddImport) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("importCommand")("addImport"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("identifier")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("qualifier")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonMaybe(Data_Argonaut_Encode_Class.encodeJsonJString))(v.value1)))(Data_Argonaut_Core.jsonEmptyObject)));
      };
      throw new Error("Failed pattern match at PscIde.Command (line 225, column 1 - line 239, column 23): " + [ v.constructor.name ]);
  });
  var encodeCompletionOptions = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("maxResults")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonInt)(v.maxResults)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("groupReexports")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJBoolean)(v.groupReexports)))(Data_Argonaut_Core.jsonEmptyObject));
  });
  var encodeCodegenTarget = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      if (v instanceof JS) {
          return Data_Argonaut_Core.fromString("js");
      };
      if (v instanceof JSSourceMap) {
          return Data_Argonaut_Core.fromString("sourcemaps");
      };
      if (v instanceof CoreFn) {
          return Data_Argonaut_Core.fromString("corefn");
      };
      if (v instanceof Other) {
          return Data_Argonaut_Core.fromString(v.value0);
      };
      throw new Error("Failed pattern match at PscIde.Command (line 246, column 1 - line 250, column 38): " + [ v.constructor.name ]);
  });
  var decodeTypePosition = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("name"))(function (name) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonInt))(o)("start"))(function (start) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonInt))(o)("end"))(function (end) {
                      if (start.length === 2 && end.length === 2) {
                          return new Data_Either.Right({
                              name: name,
                              start: {
                                  line: start[0],
                                  column: start[1]
                              },
                              end: {
                                  line: end[0],
                                  column: end[1]
                              }
                          });
                      };
                      return new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Array"));
                  });
              });
          });
      });
  });
  var decodeModuleList = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Data_Functor.map(Data_Either.functorEither)(ModuleList)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString))(json));
  });
  var decodeMessage = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Data_Maybe.maybe(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("String")))(function ($95) {
          return Data_Either.Right.create(Message($95));
      })(Data_Argonaut_Core.toString(json));
  });
  var decodeImport = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("module"))(function (moduleName) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("importType"))(function (importType) {
                  return Control_Bind.bind(Data_Either.bindEither)(Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("qualifier")))(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value)))(function (q) {
                      if (importType === "implicit") {
                          return Control_Applicative.pure(Data_Either.applicativeEither)({
                              moduleName: moduleName,
                              importType: Implicit.value,
                              qualifier: q
                          });
                      };
                      if (importType === "explicit") {
                          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString))(o)("identifiers"))(function (identifiers) {
                              return Control_Applicative.pure(Data_Either.applicativeEither)({
                                  moduleName: moduleName,
                                  importType: new Explicit(identifiers),
                                  qualifier: q
                              });
                          });
                      };
                      if (importType === "hiding") {
                          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString))(o)("identifiers"))(function (identifiers) {
                              return Control_Applicative.pure(Data_Either.applicativeEither)({
                                  moduleName: moduleName,
                                  importType: new Hiding(identifiers),
                                  qualifier: q
                              });
                          });
                      };
                      return new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("ImportType"));
                  });
              });
          });
      });
  });
  var decodeImportList = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      var decodeModuleNameBug = function (moduleName) {
          return Data_Functor.map(Data_Either.functorEither)(Data_String_Common.joinWith("."))(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString))(moduleName));
      };
      var decodeObject = Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonJson)(o)("moduleName"))(function (moduleNameField) {
              return Control_Bind.bind(Data_Either.bindEither)(Control_Alt.alt(Data_Either.altEither)(decodeModuleNameBug(moduleNameField))(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString)(moduleNameField)))(function (moduleName) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(decodeImport))(o)("imports"))(function (imports) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                          moduleName: new Data_Maybe.Just(moduleName),
                          imports: imports
                      });
                  });
              });
          });
      });
      var decodeArray = Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(decodeImport))(json))(function (imports) {
          return Control_Applicative.pure(Data_Either.applicativeEither)({
              moduleName: Data_Maybe.Nothing.value,
              imports: imports
          });
      });
      return Control_Alt.alt(Data_Either.altEither)(decodeObject)(decodeArray);
  });
  var declarationTypeToString = function (v) {
      if (v instanceof DeclValue) {
          return "value";
      };
      if (v instanceof DeclType) {
          return "type";
      };
      if (v instanceof DeclTypeSynonym) {
          return "synonym";
      };
      if (v instanceof DeclDataConstructor) {
          return "dataconstructor";
      };
      if (v instanceof DeclTypeClass) {
          return "typeclass";
      };
      if (v instanceof DeclValueOperator) {
          return "valueoperator";
      };
      if (v instanceof DeclTypeOperator) {
          return "typeoperator";
      };
      if (v instanceof DeclModule) {
          return "module";
      };
      throw new Error("Failed pattern match at PscIde.Command (line 131, column 27 - line 139, column 25): " + [ v.constructor.name ]);
  };
  var encodeFilter = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      if (v instanceof ExactFilter) {
          return filterWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("exact")(jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("search")(v.value0));
      };
      if (v instanceof PrefixFilter) {
          return filterWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("prefix")(jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("search")(v.value0));
      };
      if (v instanceof ModuleFilter) {
          return filterWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("modules")(jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJString))("modules")(v.value0));
      };
      if (v instanceof DependencyFilter) {
          return filterWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("dependencies")(jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJString))("modules")(v.value0));
      };
      if (v instanceof NamespaceFilter) {
          return filterWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("namespace")(jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonArray(encodeNamespace))("namespaces")(v.value0));
      };
      if (v instanceof DeclarationFilter) {
          return filterWrapper(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJString))("declarations")(Data_Functor.map(Data_Functor.functorArray)(declarationTypeToString)(v.value0));
      };
      throw new Error("Failed pattern match at PscIde.Command (line 61, column 1 - line 73, column 69): " + [ v.constructor.name ]);
  });
  var declarationTypeFromString = function (v) {
      if (v === "value") {
          return new Data_Maybe.Just(DeclValue.value);
      };
      if (v === "type") {
          return new Data_Maybe.Just(DeclType.value);
      };
      if (v === "synonym") {
          return new Data_Maybe.Just(DeclTypeSynonym.value);
      };
      if (v === "dataconstructor") {
          return new Data_Maybe.Just(DeclDataConstructor.value);
      };
      if (v === "typeclass") {
          return new Data_Maybe.Just(DeclTypeClass.value);
      };
      if (v === "valueoperator") {
          return new Data_Maybe.Just(DeclValueOperator.value);
      };
      if (v === "typeoperator") {
          return new Data_Maybe.Just(DeclTypeOperator.value);
      };
      if (v === "module") {
          return new Data_Maybe.Just(DeclModule.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var decodeTypeInfo = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      var getFieldMaybe = function (dictDecodeJson) {
          return function (o) {
              return function (f) {
                  return Data_Either.Right.create(Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Data_Argonaut_Decode_Combinators.getField(dictDecodeJson)(o)(f)));
              };
          };
      };
      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("identifier"))(function (identifier) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("type"))(function (type$prime) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("module"))(function (module$prime) {
                      return Control_Bind.bind(Data_Either.bindEither)(getFieldMaybe(decodeTypePosition)(o)("definedAt"))(function (definedAt) {
                          return Control_Bind.bind(Data_Either.bindEither)(getFieldMaybe(Data_Argonaut_Decode_Class.decodeJsonString)(o)("expandedType"))(function (expandedType) {
                              return Control_Bind.bind(Data_Either.bindEither)(getFieldMaybe(Data_Argonaut_Decode_Class.decodeJsonString)(o)("documentation"))(function (documentation) {
                                  return Control_Bind.bind(Data_Either.bindEither)(getFieldMaybe(Data_Argonaut_Decode_Class.decodeJsonString)(o)("declarationType"))(function (declarationTypeStr) {
                                      return Control_Bind.bind(Data_Either.bindEither)(Data_Either.Right.create(Data_Either.either(Data_Function["const"]([  ]))(Control_Category.identity(Control_Category.categoryFn))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString))(o)("exportedFrom"))))(function (exportedFrom) {
                                          return Control_Applicative.pure(Data_Either.applicativeEither)({
                                              identifier: identifier,
                                              "type'": type$prime,
                                              "module'": module$prime,
                                              definedAt: definedAt,
                                              expandedType: expandedType,
                                              documentation: documentation,
                                              exportedFrom: exportedFrom,
                                              declarationType: Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(declarationTypeFromString)(declarationTypeStr)
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  });
  var decodeImportResult = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Control_Alt.alt(Data_Either.altEither)(Control_Alt.alt(Data_Either.altEither)(Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)(SuccessText.create)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString))(json)))(Data_Functor.map(Data_Either.functorEither)(SuccessFile.create)(Data_Argonaut_Decode_Class.decodeJson(decodeMessage)(json))))(Data_Functor.map(Data_Either.functorEither)(MultipleResults.create)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(decodeTypeInfo))(json))))(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("ImportResult")));
  });
  var decodeRebuildError = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("message"))(function (message) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("errorCode"))(function (errorCode) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("errorLink"))(function (errorLink) {
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonMaybe(Data_Argonaut_Decode_Class.decodeJsonString))(o)("moduleName"))(function (moduleName) {
                          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonMaybe(Data_Argonaut_Decode_Class.decodeJsonString))(o)("filename"))(function (filename) {
                              return Control_Bind.bind(Data_Either.bindEither)(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Either.hush(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(o)("position"))(function (p) {
                                  return Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(function (v) {
                                      return function (v1) {
                                          return function (v2) {
                                              return function (v3) {
                                                  return {
                                                      startLine: v,
                                                      startColumn: v1,
                                                      endLine: v2,
                                                      endColumn: v3
                                                  };
                                              };
                                          };
                                      };
                                  })(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(p)("startLine")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(p)("startColumn")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(p)("endLine")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(p)("endColumn"));
                              }))))(function (position) {
                                  return Control_Bind.bind(Data_Either.bindEither)(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Either.hush(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(o)("pursIde"))(function (pio) {
                                      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(pio)("name"))(function (name) {
                                          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(decodeTypeInfo))(pio)("completions"))(function (completions) {
                                              return Control_Applicative.pure(Data_Either.applicativeEither)({
                                                  name: name,
                                                  completions: completions
                                              });
                                          });
                                      });
                                  }))))(function (pursIde) {
                                      return Control_Bind.bind(Data_Either.bindEither)(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Either.hush(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(o)("suggestion"))(function (so) {
                                          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(so)("replacement"))(function (replacement) {
                                              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(so)("replaceRange"))(function (rr) {
                                                  return Control_Bind.bind(Data_Either.bindEither)(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Either.hush(Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(function (v) {
                                                      return function (v1) {
                                                          return function (v2) {
                                                              return function (v3) {
                                                                  return {
                                                                      startLine: v,
                                                                      startColumn: v1,
                                                                      endLine: v2,
                                                                      endColumn: v3
                                                                  };
                                                              };
                                                          };
                                                      };
                                                  })(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(rr)("startLine")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(rr)("startColumn")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(rr)("endLine")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(rr)("endColumn")))))(function (replaceRange) {
                                                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                                                          replacement: replacement,
                                                          replaceRange: replaceRange
                                                      });
                                                  });
                                              });
                                          });
                                      }))))(function (suggestion) {
                                          return Control_Applicative.pure(Data_Either.applicativeEither)({
                                              errorCode: errorCode,
                                              errorLink: errorLink,
                                              moduleName: moduleName,
                                              filename: filename,
                                              message: message,
                                              position: position,
                                              pursIde: pursIde,
                                              suggestion: suggestion
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  });
  var decodeRebuildResult = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Data_Functor.map(Data_Either.functorEither)(RebuildResult)(Control_Alt.alt(Data_Either.altEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(decodeRebuildError))(json))(Data_Functor.map(Data_Either.functorEither)(Data_Array.singleton)(Data_Argonaut_Decode_Class.decodeJson(decodeRebuildError)(json))));
  });
  var commandWrapper = function (dictEncodeJson) {
      return function (s) {
          return function (o) {
              return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("command")(s))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(dictEncodeJson)("params")(o))(Data_Argonaut_Core.jsonEmptyObject));
          };
      };
  };
  var encodeCommand = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      if (v instanceof Cwd) {
          return jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("command")("cwd");
      };
      if (v instanceof Ls && v.value0 instanceof LoadedModules) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("list")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("type")("loadedModules"))(Data_Argonaut_Core.jsonEmptyObject));
      };
      if (v instanceof Ls && v.value0 instanceof AvailableModules) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("list")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("type")("availableModules"))(Data_Argonaut_Core.jsonEmptyObject));
      };
      if (v instanceof Ls && v.value0 instanceof Imports) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("list")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("type")("import"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("file")(v.value0.value0))(Data_Argonaut_Core.jsonEmptyObject)));
      };
      if (v instanceof Quit) {
          return jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("command")("quit");
      };
      if (v instanceof Reset) {
          return jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("command")("reset");
      };
      if (v instanceof Load) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("load")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("modules")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJString))(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("dependencies")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJString))(v.value1)))(Data_Argonaut_Core.jsonEmptyObject)));
      };
      if (v instanceof Complete) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("complete")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("filters")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(encodeFilter))(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("matcher")(encodeMaybeNull(encodeMatcher)(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("currentModule")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value2)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("options")(Data_Argonaut_Encode_Class.encodeJson(encodeCompletionOptions)(v.value3)))(Data_Argonaut_Core.jsonEmptyObject)))));
      };
      if (v instanceof Pursuit) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("pursuit")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("type")(Data_Argonaut_Encode_Class.encodeJson(encodePursuitType)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("query")(v.value1))(Data_Argonaut_Core.jsonEmptyObject)));
      };
      if (v instanceof Type) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("type")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("search")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("filters")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(encodeFilter))(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("currentModule")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value2)))(Data_Argonaut_Core.jsonEmptyObject))));
      };
      if (v instanceof AddClause) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("addClause")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("line")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("annotations")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJBoolean)(v.value1)))(Data_Argonaut_Core.jsonEmptyObject)));
      };
      if (v instanceof CaseSplit) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("caseSplit")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("line")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("begin")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonInt)(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("end")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonInt)(v.value2)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("annotations")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJBoolean)(v.value3)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("type")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value4)))(Data_Argonaut_Core.jsonEmptyObject))))));
      };
      if (v instanceof ImportCmd) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("import")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("file")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("outfile")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("filters")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(encodeFilter))(v.value2)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("importCommand")(Data_Argonaut_Encode_Class.encodeJson(encodeImportCommand)(v.value3)))(Data_Argonaut_Core.jsonEmptyObject)))));
      };
      if (v instanceof RebuildCmd) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("rebuild")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("file")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("actualFile")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("codegen")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonArray(encodeCodegenTarget))(v.value2)))(Data_Argonaut_Core.jsonEmptyObject))));
      };
      if (v instanceof Usages) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("usages")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("module")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("namespace")(Data_Argonaut_Encode_Class.encodeJson(encodeNamespace)(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("identifier")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value2)))(Data_Argonaut_Core.jsonEmptyObject))));
      };
      throw new Error("Failed pattern match at PscIde.Command (line 147, column 1 - line 220, column 6): " + [ v.constructor.name ]);
  });
  exports["Flex"] = Flex;
  exports["Distance"] = Distance;
  exports["PrefixFilter"] = PrefixFilter;
  exports["ModuleFilter"] = ModuleFilter;
  exports["NamespaceFilter"] = NamespaceFilter;
  exports["Cwd"] = Cwd;
  exports["Ls"] = Ls;
  exports["Quit"] = Quit;
  exports["Load"] = Load;
  exports["Complete"] = Complete;
  exports["Type"] = Type;
  exports["AddClause"] = AddClause;
  exports["CaseSplit"] = CaseSplit;
  exports["ImportCmd"] = ImportCmd;
  exports["RebuildCmd"] = RebuildCmd;
  exports["Usages"] = Usages;
  exports["LoadedModules"] = LoadedModules;
  exports["Imports"] = Imports;
  exports["AvailableModules"] = AvailableModules;
  exports["NSValue"] = NSValue;
  exports["NSType"] = NSType;
  exports["NSKind"] = NSKind;
  exports["Other"] = Other;
  exports["AddImplicitImport"] = AddImplicitImport;
  exports["AddQualifiedImport"] = AddQualifiedImport;
  exports["AddImport"] = AddImport;
  exports["DeclValue"] = DeclValue;
  exports["DeclType"] = DeclType;
  exports["DeclTypeSynonym"] = DeclTypeSynonym;
  exports["DeclDataConstructor"] = DeclDataConstructor;
  exports["DeclTypeClass"] = DeclTypeClass;
  exports["DeclValueOperator"] = DeclValueOperator;
  exports["DeclTypeOperator"] = DeclTypeOperator;
  exports["DeclModule"] = DeclModule;
  exports["declarationTypeFromString"] = declarationTypeFromString;
  exports["declarationTypeToString"] = declarationTypeToString;
  exports["Implicit"] = Implicit;
  exports["Explicit"] = Explicit;
  exports["Hiding"] = Hiding;
  exports["SuccessFile"] = SuccessFile;
  exports["SuccessText"] = SuccessText;
  exports["MultipleResults"] = MultipleResults;
  exports["unwrapResponse"] = unwrapResponse;
  exports["encodeCommand"] = encodeCommand;
  exports["decodeMessage"] = decodeMessage;
  exports["decodeModuleList"] = decodeModuleList;
  exports["decodeTypeInfo"] = decodeTypeInfo;
  exports["decodeTypePosition"] = decodeTypePosition;
  exports["decodeImportList"] = decodeImportList;
  exports["decodeImportResult"] = decodeImportResult;
  exports["decodeRebuildError"] = decodeRebuildError;
  exports["decodeRebuildResult"] = decodeRebuildResult;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["PscIde"] = $PS["PscIde"] || {};
  var exports = $PS["PscIde"];
  var $foreign = $PS["PscIde"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var PscIde_Command = $PS["PscIde.Command"];                
  var sendCommandR = function (dictEncodeJson) {
      return function (dictDecodeJson) {
          return function (dictDecodeJson1) {
              return function (port) {
                  return function (command) {
                      return Effect_Aff.makeAff(function (cb) {
                          return Data_Functor.voidRight(Effect.functorEffect)(Effect_Aff.nonCanceler)($foreign.send(Data_Argonaut_Core.stringify(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(command)))(port)((function () {
                              var $6 = PscIde_Command.unwrapResponse(dictDecodeJson)(dictDecodeJson1);
                              return function ($7) {
                                  return cb(Data_Either.Right.create($6($7)));
                              };
                          })())(function ($8) {
                              return cb(Data_Either.Left.create($8));
                          }));
                      });
                  };
              };
          };
      };
  };
  var sendCommand = function (dictEncodeJson) {
      return function (dictDecodeJson) {
          return function (port) {
              return function (command) {
                  return Effect_Aff.makeAff(function (cb) {
                      return Data_Functor.voidRight(Effect.functorEffect)(Effect_Aff.nonCanceler)($foreign.send(Data_Argonaut_Core.stringify(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(command)))(port)((function () {
                          var $9 = Control_Bind.join(Data_Either.bindEither);
                          var $10 = PscIde_Command.unwrapResponse(Data_Argonaut_Decode_Class.decodeJsonString)(dictDecodeJson);
                          return function ($11) {
                              return cb(Data_Either.Right.create($9($10($11))));
                          };
                      })())(function ($12) {
                          return cb(Data_Either.Left.create($12));
                      }));
                  });
              };
          };
      };
  };
  var type$prime = function (port) {
      return function (s) {
          return function (fs) {
              return function (mod) {
                  return sendCommand(PscIde_Command.encodeCommand)(Data_Argonaut_Decode_Class.decodeArray(PscIde_Command.decodeTypeInfo))(port)(new PscIde_Command.Type(s, fs, mod));
              };
          };
      };
  };
  var usages = function (port) {
      return function (file) {
          return function (ns) {
              return function (ident) {
                  return sendCommand(PscIde_Command.encodeCommand)(Data_Argonaut_Decode_Class.decodeArray(PscIde_Command.decodeTypePosition))(port)(new PscIde_Command.Usages(file, ns, ident));
              };
          };
      };
  };
  var rebuild = function (port) {
      return function (file) {
          return function (actualFile) {
              return function (targets) {
                  return sendCommandR(PscIde_Command.encodeCommand)(PscIde_Command.decodeRebuildResult)(PscIde_Command.decodeRebuildResult)(port)(new PscIde_Command.RebuildCmd(file, actualFile, targets));
              };
          };
      };
  };
  var quit = function (port) {
      return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeMessage)(port)(PscIde_Command.Quit.value);
  };
  var qualifiedImport = function (port) {
      return function (infile) {
          return function (outfile) {
              return function (mod) {
                  return function (qualifier) {
                      return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeImportResult)(port)(new PscIde_Command.ImportCmd(infile, outfile, [  ], new PscIde_Command.AddQualifiedImport(mod, qualifier)));
                  };
              };
          };
      };
  };
  var load = function (port) {
      return function (ms) {
          return function (ds) {
              return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeMessage)(port)(new PscIde_Command.Load(ms, ds));
          };
      };
  };
  var listLoadedModules = function (port) {
      return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeModuleList)(port)(new PscIde_Command.Ls(PscIde_Command.LoadedModules.value));
  };
  var listImports = function (port) {
      return function (fp) {
          return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeImportList)(port)(new PscIde_Command.Ls(new PscIde_Command.Imports(fp)));
      };
  };
  var listAvailableModules = function (port) {
      return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeModuleList)(port)(new PscIde_Command.Ls(PscIde_Command.AvailableModules.value));
  };
  var implicitImport = function (port) {
      return function (infile) {
          return function (outfile) {
              return function (filters) {
                  return function (mod) {
                      return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeImportResult)(port)(new PscIde_Command.ImportCmd(infile, outfile, filters, new PscIde_Command.AddImplicitImport(mod)));
                  };
              };
          };
      };
  };
  var explicitImport = function (port) {
      return function (infile) {
          return function (outfile) {
              return function (filters) {
                  return function (ident) {
                      return function (qualifier) {
                          return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeImportResult)(port)(new PscIde_Command.ImportCmd(infile, outfile, filters, new PscIde_Command.AddImport(ident, qualifier)));
                      };
                  };
              };
          };
      };
  };
  var defaultCompletionOptions = {
      maxResults: Data_Maybe.Nothing.value,
      groupReexports: false
  };
  var cwd = function (port) {
      return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeMessage)(port)(PscIde_Command.Cwd.value);
  };
  var complete = function (port) {
      return function (fs) {
          return function (m) {
              return function (mod) {
                  return function (opts) {
                      return sendCommand(PscIde_Command.encodeCommand)(Data_Argonaut_Decode_Class.decodeArray(PscIde_Command.decodeTypeInfo))(port)(new PscIde_Command.Complete(fs, m, mod, opts));
                  };
              };
          };
      };
  };
  var suggestTypos = function (port) {
      return function (q) {
          return function (m) {
              return function (mod) {
                  return function (opts) {
                      return Data_Functor.map(Effect_Aff.functorAff)(function (v) {
                          return Control_Alt.alt(Data_Either.altEither)(v)(Control_Applicative.pure(Data_Either.applicativeEither)([  ]));
                      })(complete(port)([  ])(new Data_Maybe.Just(new PscIde_Command.Distance(q, m)))(mod)(opts));
                  };
              };
          };
      };
  };
  var caseSplit = function (port) {
      return function (line) {
          return function (begin) {
              return function (end) {
                  return function (annotations) {
                      return function (typ) {
                          return sendCommand(PscIde_Command.encodeCommand)(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString))(port)(new PscIde_Command.CaseSplit(line, begin, end, annotations, typ));
                      };
                  };
              };
          };
      };
  };
  var addClause = function (port) {
      return function (line) {
          return function (annotations) {
              return sendCommand(PscIde_Command.encodeCommand)(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString))(port)(new PscIde_Command.AddClause(line, annotations));
          };
      };
  };
  exports["cwd"] = cwd;
  exports["listLoadedModules"] = listLoadedModules;
  exports["listAvailableModules"] = listAvailableModules;
  exports["listImports"] = listImports;
  exports["load"] = load;
  exports["quit"] = quit;
  exports["defaultCompletionOptions"] = defaultCompletionOptions;
  exports["complete"] = complete;
  exports["type'"] = type$prime;
  exports["suggestTypos"] = suggestTypos;
  exports["addClause"] = addClause;
  exports["caseSplit"] = caseSplit;
  exports["implicitImport"] = implicitImport;
  exports["explicitImport"] = explicitImport;
  exports["qualifiedImport"] = qualifiedImport;
  exports["rebuild"] = rebuild;
  exports["usages"] = usages;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["PscIde.Server"] = $PS["PscIde.Server"] || {};
  var exports = $PS["PscIde.Server"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Random = $PS["Effect.Random"];
  var Node_Buffer = $PS["Node.Buffer"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_ChildProcess = $PS["Node.ChildProcess"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Sync = $PS["Node.FS.Sync"];
  var Node_Path = $PS["Node.Path"];
  var Node_Which = $PS["Node.Which"];
  var PscIde = $PS["PscIde"];                
  var Started = (function () {
      function Started(value0) {
          this.value0 = value0;
      };
      Started.create = function (value0) {
          return new Started(value0);
      };
      return Started;
  })();
  var Closed = (function () {
      function Closed() {

      };
      Closed.value = new Closed();
      return Closed;
  })();
  var StartError = (function () {
      function StartError(value0) {
          this.value0 = value0;
      };
      StartError.create = function (value0) {
          return new StartError(value0);
      };
      return StartError;
  })();
  var All = (function () {
      function All() {

      };
      All.value = new All();
      return All;
  })();
  var None = (function () {
      function None() {

      };
      None.value = new None();
      return None;
  })();
  var Debug = (function () {
      function Debug() {

      };
      Debug.value = new Debug();
      return Debug;
  })();
  var Perf = (function () {
      function Perf() {

      };
      Perf.value = new Perf();
      return Perf;
  })();
  var Executable = (function () {
      function Executable(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Executable.create = function (value0) {
          return function (value1) {
              return new Executable(value0, value1);
          };
      };
      return Executable;
  })();
  var stopServer = function (port) {
      return Data_Functor["void"](Effect_Aff.functorAff)(PscIde.quit(port));
  };
  var portFilePath = function (cwd) {
      return Node_Path.concat([ cwd, ".psc-ide-port" ]);
  };
  var savePort = function (port) {
      return function (cwd) {
          return Node_FS_Sync.writeTextFile(Node_Encoding.UTF8.value)(portFilePath(cwd))(Data_Show.show(Data_Show.showInt)(port));
      };
  };
  var pickFreshPort = Effect_Random.randomInt(15000)(16000);
  var logParam = function (v) {
      if (v instanceof All) {
          return "all";
      };
      if (v instanceof None) {
          return "none";
      };
      if (v instanceof Debug) {
          return "debug";
      };
      if (v instanceof Perf) {
          return "perf";
      };
      throw new Error("Failed pattern match at PscIde.Server (line 48, column 12 - line 52, column 17): " + [ v.constructor.name ]);
  };
  var startServer = function (v) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_ChildProcess.spawn(v.exe)(Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
          if (v.combinedExe) {
              return [ "ide", "server" ];
          };
          return [  ];
      })())(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Maybe.maybe([  ])(function (p) {
          return [ "-p", Data_Show.show(Data_Show.showInt)(p) ];
      })(v.port))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Maybe.maybe([  ])(function (d) {
          return [ "-d", d ];
      })(v.directory))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Maybe.maybe([  ])(function (od) {
          return [ "--output-directory", od ];
      })(v.outputDirectory))(Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
          if (v.watch) {
              return [  ];
          };
          return [ "--no-watch" ];
      })())(Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
          if (v.debug) {
              return [ "--debug" ];
          };
          return [  ];
      })())(Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
          if (v.polling) {
              return [ "--polling" ];
          };
          return [  ];
      })())(Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
          if (v.editorMode) {
              return [ "--editor-mode" ];
          };
          return [  ];
      })())(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Maybe.maybe([  ])(function (l) {
          return [ "--log-level", logParam(l) ];
      })(v.logLevel))(v.source))))))))))({
          cwd: v.cwd,
          stdio: v.stdio,
          env: Node_ChildProcess.defaultSpawnOptions.env,
          detached: Node_ChildProcess.defaultSpawnOptions.detached,
          uid: Node_ChildProcess.defaultSpawnOptions.uid,
          gid: Node_ChildProcess.defaultSpawnOptions.gid
      })))(function (cp) {
          var handleErr = Effect_Aff.makeAff(function (cb) {
              return Data_Functor.voidRight(Effect.functorEffect)(Effect_Aff.nonCanceler)(function __do() {
                  Node_ChildProcess.onError(cp)(function (v1) {
                      return cb(Data_Either.Right.create(StartError.create("psc-ide-server error:" + ("{ code: " + (v1.code + (", errno: " + (v1.errno + (", syscall: " + (v1.syscall + " }")))))))));
                  })();
                  return Node_ChildProcess.onClose(cp)(function (exit) {
                      if (exit instanceof Node_ChildProcess.Normally && exit.value0 === 0) {
                          return cb(new Data_Either.Right(Closed.value));
                      };
                      if (exit instanceof Node_ChildProcess.Normally) {
                          return cb(Data_Either.Right.create(StartError.create("Error code returned: " + Data_Show.show(Data_Show.showInt)(exit.value0))));
                      };
                      return cb(Data_Either.Right.create(new StartError("Other close error")));
                  })();
              });
          });
          return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Alt.alt(Effect_Aff.altParAff)(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(handleErr))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Data_Functor.voidLeft(Effect_Aff.functorAff)(Effect_Aff.delay(100.0))(new Started(cp)))));
      });
  };
  var getSavedPort = function (cwd) {
      return Data_Functor.map(Effect.functorEffect)(function (v) {
          return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Int.fromString)(Data_Either.hush(v));
      })(Control_Monad_Error_Class["try"](Control_Monad_Error_Class.monadErrorEffect)(Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(portFilePath(cwd))));
  };
  var findBins$prime = function (v) {
      return function (executable) {
          var getVersion = function (bin) {
              return Effect_Aff.makeAff(function (cb) {
                  return Data_Functor.voidRight(Effect.functorEffect)(Effect_Aff.nonCanceler)(Node_ChildProcess.execFile(bin)([ "--version" ])({
                      cwd: Node_ChildProcess.defaultExecOptions.cwd,
                      env: v.env,
                      timeout: Node_ChildProcess.defaultExecOptions.timeout,
                      maxBuffer: Node_ChildProcess.defaultExecOptions.maxBuffer,
                      killSignal: Node_ChildProcess.defaultExecOptions.killSignal,
                      uid: Node_ChildProcess.defaultExecOptions.uid,
                      gid: Node_ChildProcess.defaultExecOptions.gid
                  })(function (v1) {
                      return Data_Maybe.maybe(Control_Bind.bind(Effect.bindEffect)(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(Node_Buffer_Class.readString(Node_Buffer.mutableBufferEffect)(Node_Encoding.UTF8.value)(0)(100)(v1.stdout)))(cb))(function ($44) {
                          return cb(Data_Either.Left.create($44));
                      })(v1.error);
                  }));
              });
          };
          return Control_Bind.bind(Effect_Aff.bindAff)(Control_Alt.alt(Effect_Aff.altAff)(Node_Which["which'"]({
              path: v.path,
              pathExt: v.pathExt
          })(executable))(Control_Applicative.pure(Effect_Aff.applicativeAff)([  ])))(function (bins) {
              return Data_Traversable["for"](Effect_Aff.applicativeAff)(Data_Traversable.traversableArray)(bins)(function (bin) {
                  return Data_Functor.map(Effect_Aff.functorAff)(Data_Functor.map(Data_Functor.functorFn)(Executable.create(bin))(Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)))(Effect_Aff.attempt(getVersion(bin)));
              });
          });
      };
  }; 
  var deleteSavedPort = function (cwd) {
      return Node_FS_Sync.unlink(portFilePath(cwd));
  };
  var defaultServerArgs = {
      exe: "purs",
      combinedExe: true,
      cwd: Data_Maybe.Nothing.value,
      stdio: Node_ChildProcess.pipe,
      source: [  ],
      port: Data_Maybe.Nothing.value,
      directory: Data_Maybe.Nothing.value,
      outputDirectory: Data_Maybe.Nothing.value,
      watch: true,
      debug: false,
      polling: false,
      editorMode: false,
      logLevel: Data_Maybe.Nothing.value
  };
  exports["Started"] = Started;
  exports["Closed"] = Closed;
  exports["StartError"] = StartError;
  exports["All"] = All;
  exports["None"] = None;
  exports["Debug"] = Debug;
  exports["Perf"] = Perf;
  exports["defaultServerArgs"] = defaultServerArgs;
  exports["startServer"] = startServer;
  exports["savePort"] = savePort;
  exports["deleteSavedPort"] = deleteSavedPort;
  exports["getSavedPort"] = getSavedPort;
  exports["pickFreshPort"] = pickFreshPort;
  exports["stopServer"] = stopServer;
  exports["findBins'"] = findBins$prime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["IdePurescript.Exec"] = $PS["IdePurescript.Exec"] || {};
  var exports = $PS["IdePurescript.Exec"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Node_Path = $PS["Node.Path"];
  var Node_Process = $PS["Node.Process"];
  var PscIde_Server = $PS["PscIde.Server"];                
  var findBins = function (pathVar) {
      return function (server) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Process.getEnv))(function (env) {
              return PscIde_Server["findBins'"]({
                  pathExt: Data_Maybe.Nothing.value,
                  path: Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(pathVar),
                  env: Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))((function () {
                      var $2 = Data_Function.flip(Foreign_Object.insert("PATH"))(env);
                      return function ($3) {
                          return Data_Maybe.Just.create($2($3));
                      };
                  })())(pathVar)
              })(server);
          });
      };
  };
  var addNpmBinPath = function (rootDir) {
      return function (path) {
          return Node_Path.concat([ rootDir, "node_modules", ".bin" ]) + Data_Maybe.maybe("")(function (v) {
              return Node_Path.delimiter + v;
          })(path);
      };
  };
  var getPathVar = function (addNpmBin) {
      return function (rootDir) {
          return function __do() {
              var processPath = Node_Process.lookupEnv("PATH")();
              if (addNpmBin) {
                  return Data_Either.Right.create(addNpmBinPath(rootDir)(processPath));
              };
              return Data_Either.Left.create(Data_Maybe.fromMaybe("")(processPath));
          };
      };
  };
  exports["findBins"] = findBins;
  exports["getPathVar"] = getPathVar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["IdePurescript.PscErrors"] = $PS["IdePurescript.PscErrors"] || {};
  var exports = $PS["IdePurescript.PscErrors"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Combinators = $PS["Data.Argonaut.Decode.Combinators"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];
  var PscIde_Command = $PS["PscIde.Command"];
  var decodePscResult = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(PscIde_Command.decodeRebuildError))(o)("warnings"))(function (warnings) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(PscIde_Command.decodeRebuildError))(o)("errors"))(function (errors) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)({
                      warnings: warnings,
                      errors: errors
                  });
              });
          });
      });
  });
  var parsePscOutput = Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
      var $0 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Show.show(Data_Argonaut_Decode_Error.showJsonDecodeError));
      var $1 = Data_Argonaut_Decode_Class.decodeJson(decodePscResult);
      return function ($2) {
          return $0($1($2));
      };
  })())(Data_Argonaut_Parser.jsonParser);
  exports["parsePscOutput"] = parsePscOutput;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["IdePurescript.PscIde"] = $PS["IdePurescript.PscIde"] || {};
  var exports = $PS["IdePurescript.PscIde"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Exception = $PS["Effect.Exception"];
  var PscIde = $PS["PscIde"];
  var PscIde_Command = $PS["PscIde.Command"];
  var runMsg = function (v) {
      return v;
  };
  var primModules = [ "Prim", "Prim.Boolean", "Prim.Ordering", "Prim.Row", "Prim.RowList", "Prim.Symbol", "Prim.TypeError" ];
  var eitherToErr = function (c) {
      return Control_Bind.bind(Effect_Aff.bindAff)(c)(function (r) {
          if (r instanceof Data_Either.Left) {
              return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error(r.value0));
          };
          if (r instanceof Data_Either.Right) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(r.value0);
          };
          throw new Error("Failed pattern match at IdePurescript.PscIde (line 20, column 3 - line 22, column 26): " + [ r.constructor.name ]);
      });
  };
  var getCompletion$prime = function (matcher) {
      return function (mainFilter) {
          return function (port) {
              return function (currentModule) {
                  return function (modulePrefix) {
                      return function (unqualModules) {
                          return function (getQualifiedModule) {
                              return function (opts) {
                                  var modules = Data_Maybe.maybe(unqualModules)(getQualifiedModule)(modulePrefix);
                                  var moduleFilters = [ PscIde_Command.ModuleFilter.create((function () {
                                      var $11 = Data_Array["null"](modules);
                                      if ($11) {
                                          return unqualModules;
                                      };
                                      return modules;
                                  })()) ];
                                  return eitherToErr(PscIde.complete(port)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(mainFilter)(moduleFilters))(matcher)(currentModule)(opts));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var getCompletion = function (port) {
      return function (prefix) {
          return getCompletion$prime(Data_Maybe.Nothing.value)([ new PscIde_Command.PrefixFilter(prefix) ])(port);
      };
  };
  var result = function (f) {
      return function (a) {
          return eitherToErr(Data_Functor.map(Effect_Aff.functorAff)(function (v) {
              return Data_Functor.map(Data_Either.functorEither)(f)(v);
          })(a));
      };
  };
  var getAvailableModules = (function () {
      var conv = function (v) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(primModules)(v);
      };
      var $26 = result(conv);
      return function ($27) {
          return $26(PscIde.listAvailableModules($27));
      };
  })();
  var getLoadedModules = (function () {
      var conv = function (v) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(primModules)(v);
      };
      var $28 = result(conv);
      return function ($29) {
          return $28(PscIde.listLoadedModules($29));
      };
  })();
  var getTypeInfo = function (port) {
      return function (text) {
          return function (currentModule) {
              return function (modulePrefix) {
                  return function (unqualModules) {
                      return function (getQualifiedModule) {
                          var moduleFilters = [ PscIde_Command.ModuleFilter.create(Data_Maybe.maybe(unqualModules)(getQualifiedModule)(modulePrefix)) ];
                          return result(Data_Array.head)(PscIde["type'"](port)(text)(moduleFilters)(currentModule));
                      };
                  };
              };
          };
      };
  };
  var cwd = (function () {
      var $30 = result(runMsg);
      return function ($31) {
          return $30(PscIde.cwd($31));
      };
  })();
  exports["getCompletion"] = getCompletion;
  exports["getCompletion'"] = getCompletion$prime;
  exports["cwd"] = cwd;
  exports["eitherToErr"] = eitherToErr;
  exports["getAvailableModules"] = getAvailableModules;
  exports["getLoadedModules"] = getLoadedModules;
  exports["getTypeInfo"] = getTypeInfo;
})(PS);
(function(exports) {
  /* global Buffer */
  "use strict";

  exports.readChunkImpl = function (Left) {
    return function (Right) {
      return function (chunk) {
        if (chunk instanceof Buffer) {
          return Right(chunk);
        } else if (typeof chunk === "string") {
          return Left(chunk);
        } else {
          throw new Error(
            "Node.Stream.readChunkImpl: Unrecognised " +
              "chunk type; expected String or Buffer, got: " +
              chunk)
           ;
        }
      };
    };
  };

  exports.onDataEitherImpl = function (readChunk) {
    return function (r) {
      return function (f) {
        return function () {
          r.on("data", function (data) {
            f(readChunk(data))();
          });
        };
      };
    };
  };

  exports.writeStringImpl = function (w) {
    return function (enc) {
      return function (s) {
        return function (done) {
          return function () {
            return w.write(s, enc, done);
          };
        };
      };
    };
  };

  exports.end = function (w) {
    return function (done) {
      return function () {
        w.end(null, null, function () {
          done();
        });
      };
    };
  };
})(PS["Node.Stream"] = PS["Node.Stream"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.Stream"] = $PS["Node.Stream"] || {};
  var exports = $PS["Node.Stream"];
  var $foreign = $PS["Node.Stream"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Node_Buffer = $PS["Node.Buffer"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var writeString = function (w) {
      return function (enc) {
          return $foreign.writeStringImpl(w)(Data_Show.show(Node_Encoding.showEncoding)(enc));
      };
  };
  var readChunk = $foreign.readChunkImpl(Data_Either.Left.create)(Data_Either.Right.create);
  var onDataEither = function (r) {
      return function (cb) {
          return $foreign.onDataEitherImpl(readChunk)(r)(cb);
      };
  };
  var onData = function (r) {
      return function (cb) {
          var fromEither = function (x) {
              if (x instanceof Data_Either.Left) {
                  return Effect_Exception["throw"]("Stream encoding should not be set");
              };
              if (x instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(x.value0);
              };
              throw new Error("Failed pattern match at Node.Stream (line 94, column 5 - line 98, column 17): " + [ x.constructor.name ]);
          };
          return onDataEither(r)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)(cb)(fromEither));
      };
  };
  var onDataString = function (r) {
      return function (enc) {
          return function (cb) {
              return onData(r)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)(cb)(Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(enc)));
          };
      };
  };
  exports["onDataString"] = onDataString;
  exports["writeString"] = writeString;
  exports["end"] = $foreign.end;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["IdePurescript.PscIdeServer"] = $PS["IdePurescript.PscIdeServer"] || {};
  var exports = $PS["IdePurescript.PscIdeServer"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Posix_Signal = $PS["Data.Posix.Signal"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var IdePurescript_Exec = $PS["IdePurescript.Exec"];
  var IdePurescript_PscIde = $PS["IdePurescript.PscIde"];
  var Node_ChildProcess = $PS["Node.ChildProcess"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_Path = $PS["Node.Path"];
  var Node_Platform = $PS["Node.Platform"];
  var Node_Process = $PS["Node.Process"];
  var Node_Stream = $PS["Node.Stream"];
  var PscIde_Server = $PS["PscIde.Server"];
  var CorrectPath = (function () {
      function CorrectPath(value0) {
          this.value0 = value0;
      };
      CorrectPath.create = function (value0) {
          return new CorrectPath(value0);
      };
      return CorrectPath;
  })();
  var WrongPath = (function () {
      function WrongPath(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      WrongPath.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new WrongPath(value0, value1, value2);
              };
          };
      };
      return WrongPath;
  })();
  var Started = (function () {
      function Started(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Started.create = function (value0) {
          return function (value1) {
              return new Started(value0, value1);
          };
      };
      return Started;
  })();
  var Closed = (function () {
      function Closed() {

      };
      Closed.value = new Closed();
      return Closed;
  })();
  var StartError = (function () {
      function StartError(value0) {
          this.value0 = value0;
      };
      StartError.create = function (value0) {
          return new StartError(value0);
      };
      return StartError;
  })();
  var Success = (function () {
      function Success() {

      };
      Success.value = new Success();
      return Success;
  })();
  var Info = (function () {
      function Info() {

      };
      Info.value = new Info();
      return Info;
  })();
  var Warning = (function () {
      function Warning() {

      };
      Warning.value = new Warning();
      return Warning;
  })();
  var $$Error = (function () {
      function $$Error() {

      };
      $$Error.value = new $$Error();
      return $$Error;
  })();
  var stopServer = function (port) {
      return function (rootPath) {
          return function (cp) {
              var stopNicely = Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(PscIde_Server.stopServer(port));
              var killWithDelay = Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(Data_Time_Duration.Milliseconds(200.0)))(function () {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_ChildProcess.kill(Data_Posix_Signal.SIGKILL.value)(cp));
              }));
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.apathize(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(PscIde_Server.getSavedPort(rootPath)))(function (oldPort) {
                  return Control_Applicative.when(Effect_Aff.applicativeAff)(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(oldPort)(new Data_Maybe.Just(port)))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(PscIde_Server.deleteSavedPort(rootPath)));
              })))(function () {
                  return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Alt.alt(Effect_Aff.altParAff)(stopNicely)(killWithDelay));
              });
          };
      };
  };
  var startServer = function (logCb) {
      return function (v) {
          return function (rootPath) {
              var normalizePath = (function () {
                  var $87 = (function () {
                      var $22 = Data_Eq.eq(Data_Maybe.eqMaybe(Node_Platform.eqPlatform))(Node_Process.platform)(new Data_Maybe.Just(Node_Platform.Win32.value));
                      if ($22) {
                          return Data_String_Common.toLower;
                      };
                      return Control_Category.identity(Control_Category.categoryFn);
                  })();
                  return function ($88) {
                      return $87(Node_Path.normalize($88));
                  };
              })();
              var launchServer = function (connectPort) {
                  var r = function (v1) {
                      return function (v2) {
                          if (v2 instanceof PscIde_Server.Started) {
                              return new Started(v1, v2.value0);
                          };
                          if (v2 instanceof PscIde_Server.Closed) {
                              return Closed.value;
                          };
                          if (v2 instanceof PscIde_Server.StartError) {
                              return new StartError(v2.value0);
                          };
                          throw new Error("Failed pattern match at IdePurescript.PscIdeServer (line 179, column 7 - line 179, column 46): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                  };
                  return Control_Bind.bind(Effect_Aff.bindAff)(Data_Maybe.maybe(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(PscIde_Server.pickFreshPort))(Control_Applicative.pure(Effect_Aff.applicativeAff))(connectPort))(function (port) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                          logCb(Effect_Class.monadEffectEffect)(Info.value)("Starting IDE server on port " + (Data_Show.show(Data_Show.showInt)(port) + (" with cwd " + rootPath)))();
                          return Control_Applicative.when(Effect.applicativeEffect)(Data_Maybe.isNothing(connectPort))(PscIde_Server.savePort(port)(rootPath))();
                      }))(function () {
                          return Data_Functor.map(Effect_Aff.functorAff)(r(port))(PscIde_Server.startServer({
                              exe: v.exe,
                              combinedExe: v.combinedExe,
                              cwd: new Data_Maybe.Just(rootPath),
                              stdio: PscIde_Server.defaultServerArgs.stdio,
                              source: v.glob,
                              port: new Data_Maybe.Just(port),
                              directory: PscIde_Server.defaultServerArgs.directory,
                              outputDirectory: v.outputDirectory,
                              watch: PscIde_Server.defaultServerArgs.watch,
                              debug: PscIde_Server.defaultServerArgs.debug,
                              polling: v.polling,
                              editorMode: v.editorMode,
                              logLevel: v.logLevel
                          }));
                      });
                  });
              };
              var gotPath = function (port) {
                  return function (workingDir) {
                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)((function () {
                          var $27 = normalizePath(workingDir) === normalizePath(rootPath);
                          if ($27) {
                              return function __do() {
                                  logCb(Effect_Class.monadEffectEffect)(Info.value)("Found IDE server on port " + (Data_Show.show(Data_Show.showInt)(port) + (" with correct path: " + workingDir)))();
                                  return new CorrectPath(port);
                              };
                          };
                          return function __do() {
                              logCb(Effect_Class.monadEffectEffect)(Info.value)("Found IDE server on port " + (Data_Show.show(Data_Show.showInt)(port) + (" with wrong path: " + (normalizePath(workingDir) + (" instead of " + normalizePath(rootPath))))))();
                              return new WrongPath(port, workingDir, rootPath);
                          };
                      })());
                  };
              };
              var joinServer = function (port) {
                  return function (launchPort) {
                      return function (message) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(IdePurescript_PscIde.cwd(port)))(function (workingDir) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logCb(Effect_Class.monadEffectEffect)(Info.value)(message + (": " + (Data_Show.show(Data_Show.showInt)(port) + Data_Either.either(Data_Function["const"](""))(function (v1) {
                                  return ", cwd: " + v1;
                              })(workingDir))))))(function () {
                                  return Data_Either.either(Data_Function["const"](launchServer(launchPort)))(gotPath(port))(workingDir);
                              });
                          });
                      };
                  };
              };
              if (v.port instanceof Data_Maybe.Just) {
                  return joinServer(v.port.value0)(v.port)("Using configured port");
              };
              if (v.port instanceof Data_Maybe.Nothing) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(PscIde_Server.getSavedPort(rootPath)))(function (v1) {
                      if (v1 instanceof Data_Maybe.Just) {
                          return joinServer(v1.value0)(Data_Maybe.Nothing.value)("Found existing port from file");
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return launchServer(Data_Maybe.Nothing.value);
                      };
                      throw new Error("Failed pattern match at IdePurescript.PscIdeServer (line 147, column 57 - line 151, column 38): " + [ v1.constructor.name ]);
                  });
              };
              throw new Error("Failed pattern match at IdePurescript.PscIdeServer (line 144, column 3 - line 151, column 38): " + [ v.port.constructor.name ]);
          };
      };
  };
  var startServer$prime = function (v) {
      return function (path) {
          return function (addNpmBin) {
              return function (cb) {
                  return function (logCb) {
                      var muteReexportsWarn = function (logFn) {
                          return function (message) {
                              return Control_Applicative.unless(Effect.applicativeEffect)(Data_String_CodeUnits.contains("Failed to resolve reexports for Type.")(message))(logFn(message));
                          };
                      };
                      var wireOutput = function (cp) {
                          return function (log) {
                              return function __do() {
                                  Node_Stream.onDataString(Node_ChildProcess.stderr(cp))(Node_Encoding.UTF8.value)(log(Effect_Class.monadEffectEffect)(Warning.value))();
                                  return Node_Stream.onDataString(Node_ChildProcess.stdout(cp))(Node_Encoding.UTF8.value)(muteReexportsWarn(log(Effect_Class.monadEffectEffect)(Info.value)))();
                              };
                          };
                      };
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(IdePurescript_Exec.getPathVar(addNpmBin)(path)))(function (pathVar) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Exec.findBins(pathVar)(v.exe))(function (serverBins) {
                              var v1 = Data_Array.head(serverBins);
                              if (v1 instanceof Data_Maybe.Nothing) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(cb(Effect_Class.monadEffectEffect)(Info.value)("Couldn't find IDE server, check PATH. Looked for: " + (v.exe + (" in PATH: " + Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn))(pathVar))))))(function () {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                                          quit: Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit),
                                          port: Data_Maybe.Nothing.value
                                      });
                                  });
                              };
                              if (v1 instanceof Data_Maybe.Just) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logCb(Effect_Class.monadEffectEffect)(Info.value)("Resolved IDE server paths (npm-bin: " + (Data_Show.show(Data_Show.showBoolean)(addNpmBin) + (") from PATH of " + (Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn))(pathVar) + " (1st is used):"))))))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(function (v2) {
                                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logCb(Effect_Class.monadEffectEffect)(Info.value)(v2.value0 + (": " + Data_Maybe.fromMaybe("ERROR")(v2.value1))));
                                      })(serverBins))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Applicative.when(Effect.applicativeEffect)(Data_Array.length(serverBins) > 1)(cb(Effect_Class.monadEffectEffect)(Warning.value)("Found multiple IDE server executables; using " + v1.value0.value0))))(function () {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(startServer(function (dictMonadEffect) {
                                                  return logCb(dictMonadEffect);
                                              })({
                                                  exe: v1.value0.value0,
                                                  combinedExe: v.combinedExe,
                                                  glob: v.glob,
                                                  logLevel: v.logLevel,
                                                  editorMode: v.editorMode,
                                                  polling: v.polling,
                                                  outputDirectory: v.outputDirectory,
                                                  port: v.port
                                              })(path))(function (res) {
                                                  var noRes = {
                                                      quit: Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit),
                                                      port: Data_Maybe.Nothing.value
                                                  };
                                                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)((function () {
                                                      if (res instanceof CorrectPath) {
                                                          return Data_Functor.voidRight(Effect.functorEffect)({
                                                              quit: Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit),
                                                              port: new Data_Maybe.Just(res.value0)
                                                          })(cb(Effect_Class.monadEffectEffect)(Info.value)("Found existing IDE server with correct path on port " + Data_Show.show(Data_Show.showInt)(res.value0)));
                                                      };
                                                      if (res instanceof WrongPath) {
                                                          return function __do() {
                                                              cb(Effect_Class.monadEffectEffect)($$Error.value)("Found existing IDE server on port '" + (Data_Show.show(Data_Show.showInt)(res.value0) + ("' with wrong path: '" + (res.value1 + ("' instead of '" + (res.value2 + "'. Correct, kill or configure a different port, and restart."))))))();
                                                              return noRes;
                                                          };
                                                      };
                                                      if (res instanceof Started) {
                                                          return function __do() {
                                                              cb(Effect_Class.monadEffectEffect)(Success.value)("Started IDE server (port " + (Data_Show.show(Data_Show.showInt)(res.value0) + ")"))();
                                                              wireOutput(res.value1)(function (dictMonadEffect) {
                                                                  return logCb(dictMonadEffect);
                                                              })();
                                                              return {
                                                                  quit: stopServer(res.value0)(path)(res.value1),
                                                                  port: new Data_Maybe.Just(res.value0)
                                                              };
                                                          };
                                                      };
                                                      if (res instanceof Closed) {
                                                          return Data_Functor.voidRight(Effect.functorEffect)(noRes)(cb(Effect_Class.monadEffectEffect)(Info.value)("IDE server exited with success code"));
                                                      };
                                                      if (res instanceof StartError) {
                                                          return Data_Functor.voidRight(Effect.functorEffect)(noRes)(cb(Effect_Class.monadEffectEffect)($$Error.value)("Could not start IDE server process. Check the configured port number is valid.\x0a" + res.value0));
                                                      };
                                                      throw new Error("Failed pattern match at IdePurescript.PscIdeServer (line 110, column 20 - line 124, column 138): " + [ res.constructor.name ]);
                                                  })());
                                              });
                                          });
                                      });
                                  });
                              };
                              throw new Error("Failed pattern match at IdePurescript.PscIdeServer (line 98, column 3 - line 124, column 138): " + [ v1.constructor.name ]);
                          });
                      });
                  };
              };
          };
      };
  }; 
  var showErrorLevel = new Data_Show.Show(function (v) {
      if (v instanceof Success) {
          return "Success";
      };
      if (v instanceof Info) {
          return "Info";
      };
      if (v instanceof Warning) {
          return "Warning";
      };
      if (v instanceof $$Error) {
          return "Error";
      };
      throw new Error("Failed pattern match at IdePurescript.PscIdeServer (line 50, column 1 - line 54, column 23): " + [ v.constructor.name ]);
  });
  exports["startServer'"] = startServer$prime;
  exports["Success"] = Success;
  exports["Info"] = Info;
  exports["Warning"] = Warning;
  exports["Error"] = $$Error;
  exports["showErrorLevel"] = showErrorLevel;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["IdePurescript.Build"] = $PS["IdePurescript.Build"] || {};
  var exports = $PS["IdePurescript.Build"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Foreign_Object = $PS["Foreign.Object"];
  var IdePurescript_Exec = $PS["IdePurescript.Exec"];
  var IdePurescript_PscErrors = $PS["IdePurescript.PscErrors"];
  var IdePurescript_PscIdeServer = $PS["IdePurescript.PscIdeServer"];
  var Node_ChildProcess = $PS["Node.ChildProcess"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_Process = $PS["Node.Process"];
  var Node_Stream = $PS["Node.Stream"];
  var PscIde = $PS["PscIde"];                
  var Command = (function () {
      function Command(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Command.create = function (value0) {
          return function (value1) {
              return new Command(value0, value1);
          };
      };
      return Command;
  })();
  var spawn = function (v) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(IdePurescript_Exec.getPathVar(v.useNpmDir)(v.directory)))(function (pathVar) {
          return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Exec.findBins(pathVar)(v.command.value0))(function (cmdBins) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)((function () {
                  var v1 = Data_Array.uncons(cmdBins);
                  if (v1 instanceof Data_Maybe.Just) {
                      return function __do() {
                          var env = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Node_Process.getEnv)();
                          var childEnv = Foreign_Object.insert("PATH")(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn))(pathVar))(env);
                          return Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(Node_ChildProcess.spawn(v1.value0.head.value0)(v.command.value1)({
                              cwd: new Data_Maybe.Just(v.directory),
                              stdio: Node_ChildProcess.defaultSpawnOptions.stdio,
                              env: new Data_Maybe.Just(childEnv),
                              detached: Node_ChildProcess.defaultSpawnOptions.detached,
                              uid: Node_ChildProcess.defaultSpawnOptions.uid,
                              gid: Node_ChildProcess.defaultSpawnOptions.gid
                          }))();
                      };
                  };
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value);
              })()))(function (cp) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                      cmdBins: cmdBins,
                      cp: cp
                  });
              });
          });
      });
  };
  var rebuildWithTmpFile = function (port) {
      return function (file) {
          return function (actualFile) {
              return function (targets) {
                  var onResult = (function () {
                      var unwrap = function (v) {
                          return v;
                      };
                      var $46 = Data_Either.either(function (errors) {
                          return {
                              errors: {
                                  errors: errors,
                                  warnings: [  ]
                              },
                              success: true
                          };
                      })(function (warnings) {
                          return {
                              errors: {
                                  errors: [  ],
                                  warnings: warnings
                              },
                              success: true
                          };
                      });
                      var $47 = Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither)(unwrap)(unwrap);
                      return function ($48) {
                          return $46($47($48));
                      };
                  })();
                  return Control_Bind.bind(Effect_Aff.bindAff)(PscIde.rebuild(port)(file)(new Data_Maybe.Just(actualFile))(targets))(function (res) {
                      return Data_Either.either((function () {
                          var $49 = Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff);
                          return function ($50) {
                              return $49(Effect_Exception.error($50));
                          };
                      })())((function () {
                          var $51 = Control_Applicative.pure(Effect_Aff.applicativeAff);
                          return function ($52) {
                              return $51(onResult($52));
                          };
                      })())(res);
                  });
              };
          };
      };
  };
  var rebuild = function (port) {
      return function (file) {
          return rebuildWithTmpFile(port)(file)(file);
      };
  };
  var build = function (notify) {
      return function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(spawn(v))(function (v1) {
              return Effect_Aff.makeAff(function (cb) {
                  var succ = function ($53) {
                      return cb(Data_Either.Right.create($53));
                  };
                  var err = function ($54) {
                      return cb(Data_Either.Left.create($54));
                  };
                  return function __do() {
                      notify(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Info.value)("Resolved build command (1st is used): ")();
                      Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (v2) {
                          return notify(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Info.value)(v2.value0 + Data_Maybe.maybe("")(function (v3) {
                              return ": " + v3;
                          })(v2.value1));
                      })(v1.cmdBins)();
                      (function () {
                          if (v1.cp instanceof Data_Maybe.Nothing) {
                              return succ(Data_Either.Left.create("Didn't find command in PATH: " + v.command.value0))();
                          };
                          if (v1.cp instanceof Data_Maybe.Just) {
                              notify(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Info.value)("Running build command: " + Data_Array.intercalate(Data_Monoid.monoidString)(" ")(Data_Array.cons(v.command.value0)(v.command.value1)))();
                              Node_ChildProcess.onError(v1.cp.value0)(function ($55) {
                                  return cb(Data_Either.Left.create(Node_ChildProcess.toStandardError($55)));
                              })();
                              var errOutput = Effect_Ref["new"]("")();
                              var outOutput = Effect_Ref["new"]("")();
                              var res = function (r) {
                                  return function (s) {
                                      return Effect_Ref.modify_(function (v2) {
                                          return v2 + s;
                                      })(r);
                                  };
                              };
                              Effect_Exception.catchException(err)(Node_Stream.onDataString(Node_ChildProcess.stderr(v1.cp.value0))(Node_Encoding.UTF8.value)(res(errOutput)))();
                              Effect_Exception.catchException(err)(Node_Stream.onDataString(Node_ChildProcess.stdout(v1.cp.value0))(Node_Encoding.UTF8.value)(res(outOutput)))();
                              return Node_ChildProcess.onClose(v1.cp.value0)(function (exit) {
                                  if (exit instanceof Node_ChildProcess.Normally && (exit.value0 === 0 || exit.value0 === 1)) {
                                      return function __do() {
                                          var pursError = Effect_Ref.read(errOutput)();
                                          var pursOutput = Effect_Ref.read(outOutput)();
                                          var lines = Data_String_Common.split("\x0a")(pursError + pursOutput);
                                          var v2 = Data_Array.partition(function (s) {
                                              return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints.indexOf("{\"")(s))(new Data_Maybe.Just(0));
                                          })(lines);
                                          notify(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Info.value)(Data_String_Common.joinWith("\x0a")(v2.no))();
                                          var v3 = Data_Functor.map(Data_Functor.functorArray)(IdePurescript_PscErrors.parsePscOutput)(v2.yes);
                                          if (v3.length === 1 && v3[0] instanceof Data_Either.Left) {
                                              return succ(Data_Either.Left.create("Couldn't parse build output: " + v3[0].value0))();
                                          };
                                          if (v3.length === 1 && v3[0] instanceof Data_Either.Right) {
                                              return succ(new Data_Either.Right({
                                                  errors: v3[0].value0,
                                                  success: exit.value0 === 0
                                              }))();
                                          };
                                          if (v3.length === 0) {
                                              return succ(new Data_Either.Left("Problem running build: didn't find JSON output"))();
                                          };
                                          return succ(new Data_Either.Left("Found multiple lines of JSON output, don't know what to do"))();
                                      };
                                  };
                                  return succ(new Data_Either.Left("Build process exited abnormally"));
                              })();
                          };
                          throw new Error("Failed pattern match at IdePurescript.Build (line 66, column 5 - line 91, column 62): " + [ v1.cp.constructor.name ]);
                      })();
                      return Data_Monoid.mempty(Effect_Aff.monoidCanceler);
                  };
              });
          });
      };
  };
  exports["Command"] = Command;
  exports["spawn"] = spawn;
  exports["build"] = build;
  exports["rebuild"] = rebuild;
  exports["rebuildWithTmpFile"] = rebuildWithTmpFile;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["IdePurescript.Regex"] = $PS["IdePurescript.Regex"] || {};
  var exports = $PS["IdePurescript.Regex"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Regex = $PS["Data.String.Regex"];                
  var test$prime = function (v) {
      if (v instanceof Data_Either.Left) {
          return Data_Function["const"](false);
      };
      if (v instanceof Data_Either.Right) {
          return Data_String_Regex.test(v.value0);
      };
      throw new Error("Failed pattern match at IdePurescript.Regex (line 18, column 1 - line 18, column 57): " + [ v.constructor.name ]);
  };
  var replace$prime = function (v) {
      return function (v1) {
          return function (s) {
              if (v instanceof Data_Either.Left) {
                  return s;
              };
              if (v instanceof Data_Either.Right) {
                  return Data_String_Regex.replace(v.value0)(v1)(s);
              };
              throw new Error("Failed pattern match at IdePurescript.Regex (line 10, column 1 - line 10, column 69): " + [ v.constructor.name, v1.constructor.name, s.constructor.name ]);
          };
      };
  };
  var match$prime = function (v) {
      return function (s) {
          if (v instanceof Data_Either.Left) {
              return Data_Maybe.Nothing.value;
          };
          if (v instanceof Data_Either.Right) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array_NonEmpty.toArray)(Data_String_Regex.match(v.value0)(s));
          };
          throw new Error("Failed pattern match at IdePurescript.Regex (line 14, column 1 - line 14, column 79): " + [ v.constructor.name, s.constructor.name ]);
      };
  };
  exports["replace'"] = replace$prime;
  exports["match'"] = match$prime;
  exports["test'"] = test$prime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["IdePurescript.Tokens"] = $PS["IdePurescript.Tokens"] || {};
  var exports = $PS["IdePurescript.Tokens"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var IdePurescript_Regex = $PS["IdePurescript.Regex"];                
  var startsWithCapitalLetter = IdePurescript_Regex["test'"](Data_String_Regex.regex("^[A-Z]")(Data_String_Regex_Flags.noFlags));
  var modulePart = "((?:[A-Z][A-Za-z0-9]*\\.)*(?:[A-Z][A-Za-z0-9]*))";
  var modulePrefix = "(?:^|[^A-Za-z_.])(?:" + (modulePart + "\\.)");
  var identifierAtPoint = function (line) {
      return function (column) {
          var wordRange = function (left) {
              return function (right) {
                  return {
                      left: column - left | 0,
                      right: column + right | 0
                  };
              };
          };
          var textBefore = Data_String_CodePoints.take(column)(line);
          var textAfter = Data_String_CodePoints.drop(column)(line);
          var moduleEndRegex = Data_String_Regex.regex(modulePrefix + "$")(Data_String_Regex_Flags.noFlags);
          var match$prime = function (r) {
              return function (t) {
                  return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(function (r$prime) {
                      return Data_String_Regex.match(r$prime)(t);
                  })(r);
              };
          };
          var beforeRegex = Data_String_Regex.regex("[a-zA-Z_0-9':!#$%&*+/<=>?@^|~\\\\-]*$")(Data_String_Regex_Flags.noFlags);
          var afterRegex = Data_String_Regex.regex("^[a-zA-Z_0-9':!#$%&*+/<=>?@^|~\\\\-]*")(Data_String_Regex_Flags.noFlags);
          var v = match$prime(afterRegex)(textAfter);
          var v1 = match$prime(beforeRegex)(textBefore);
          var v2 = function (v3) {
              return Data_Maybe.Nothing.value;
          };
          if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Just) {
              var $9 = Data_Array_NonEmpty.head(v1.value0);
              if ($9 instanceof Data_Maybe.Just) {
                  var $10 = Data_Array_NonEmpty.head(v.value0);
                  if ($10 instanceof Data_Maybe.Just) {
                      var qualifier = (function () {
                          var v3 = match$prime(moduleEndRegex)(Data_String_CodePoints.take(Data_String_CodePoints.length(textBefore) - Data_String_CodePoints.length($9.value0) | 0)(textBefore));
                          var v4 = function (v5) {
                              return Data_Maybe.Nothing.value;
                          };
                          if (v3 instanceof Data_Maybe.Just) {
                              var $12 = Data_Array_NonEmpty.toArray(v3.value0);
                              if ($12.length === 2) {
                                  return $12[1];
                              };
                              return v4(true);
                          };
                          return v4(true);
                      })();
                      return new Data_Maybe.Just({
                          word: $9.value0 + $10.value0,
                          range: wordRange(Data_String_CodePoints.length($9.value0))(Data_String_CodePoints.length($10.value0)),
                          qualifier: qualifier
                      });
                  };
                  return v2(true);
              };
              return v2(true);
          };
          return v2(true);
      };
  };
  var identPart = "((?:[a-zA-Z_][a-zA-Z0-9_']*)|[:!#$%&*+\\./<=>?@\\^|~\\\\-]+)";
  var moduleRegex = Data_String_Regex.regex(modulePrefix + ("?" + (identPart + "?$")))(Data_String_Regex_Flags.noFlags);
  var containsArrow = function (type$prime) {
      return Data_String_CodeUnits.contains("->")(type$prime) || Data_String_CodeUnits.contains("\u2192")(type$prime);
  };
  exports["modulePart"] = modulePart;
  exports["identPart"] = identPart;
  exports["moduleRegex"] = moduleRegex;
  exports["identifierAtPoint"] = identifierAtPoint;
  exports["startsWithCapitalLetter"] = startsWithCapitalLetter;
  exports["containsArrow"] = containsArrow;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["IdePurescript.Completion"] = $PS["IdePurescript.Completion"] || {};
  var exports = $PS["IdePurescript.Completion"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Utils = $PS["Data.String.Utils"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Aff = $PS["Effect.Aff"];
  var IdePurescript_PscIde = $PS["IdePurescript.PscIde"];
  var IdePurescript_Regex = $PS["IdePurescript.Regex"];
  var IdePurescript_Tokens = $PS["IdePurescript.Tokens"];
  var PscIde_Command = $PS["PscIde.Command"];                
  var Module = (function () {
      function Module() {

      };
      Module.value = new Module();
      return Module;
  })();
  var Type = (function () {
      function Type() {

      };
      Type.value = new Type();
      return Type;
  })();
  var DCtor = (function () {
      function DCtor() {

      };
      DCtor.value = new DCtor();
      return DCtor;
  })();
  var $$Function = (function () {
      function $$Function() {

      };
      $$Function.value = new $$Function();
      return $$Function;
  })();
  var Value = (function () {
      function Value() {

      };
      Value.value = new Value();
      return Value;
  })();
  var Kind = (function () {
      function Kind() {

      };
      Kind.value = new Kind();
      return Kind;
  })();
  var ModuleSuggestion = (function () {
      function ModuleSuggestion(value0) {
          this.value0 = value0;
      };
      ModuleSuggestion.create = function (value0) {
          return new ModuleSuggestion(value0);
      };
      return ModuleSuggestion;
  })();
  var IdentSuggestion = (function () {
      function IdentSuggestion(value0) {
          this.value0 = value0;
      };
      IdentSuggestion.create = function (value0) {
          return new IdentSuggestion(value0);
      };
      return IdentSuggestion;
  })();
  var QualifierSuggestion = (function () {
      function QualifierSuggestion(value0) {
          this.value0 = value0;
      };
      QualifierSuggestion.create = function (value0) {
          return new QualifierSuggestion(value0);
      };
      return QualifierSuggestion;
  })();
  var getModuleSuggestions = function (port) {
      return function (prefix) {
          return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.getAvailableModules(port))(function (list) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Array.filter(function (m) {
                  return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints.indexOf(prefix)(m))(new Data_Maybe.Just(0));
              })(list));
          });
      };
  };
  var explicitImportRegex = Data_String_Regex.regex("^import\\s+" + (IdePurescript_Tokens.modulePart + ("\\s+\\([^)]*?" + (IdePurescript_Tokens.identPart + "$"))))(Data_String_Regex_Flags.noFlags);
  var declarationTypeToNamespace = function (v) {
      if (v instanceof PscIde_Command.DeclValue) {
          return new Data_Maybe.Just(PscIde_Command.NSValue.value);
      };
      if (v instanceof PscIde_Command.DeclType) {
          return new Data_Maybe.Just(PscIde_Command.NSType.value);
      };
      if (v instanceof PscIde_Command.DeclTypeSynonym) {
          return new Data_Maybe.Just(PscIde_Command.NSType.value);
      };
      if (v instanceof PscIde_Command.DeclDataConstructor) {
          return new Data_Maybe.Just(PscIde_Command.NSValue.value);
      };
      if (v instanceof PscIde_Command.DeclTypeClass) {
          return new Data_Maybe.Just(PscIde_Command.NSType.value);
      };
      if (v instanceof PscIde_Command.DeclValueOperator) {
          return new Data_Maybe.Just(PscIde_Command.NSValue.value);
      };
      if (v instanceof PscIde_Command.DeclTypeOperator) {
          return new Data_Maybe.Just(PscIde_Command.NSType.value);
      };
      if (v instanceof PscIde_Command.DeclModule) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at IdePurescript.Completion (line 148, column 30 - line 156, column 24): " + [ v.constructor.name ]);
  };
  var getSuggestions = function (port) {
      return function (v) {
          var result = function (qualifier) {
              return function (prefix) {
                  return function (ns) {
                      return function (v1) {
                          var resolvedNS = Control_Alt.alt(Data_Maybe.altMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(v1.declarationType)(declarationTypeToNamespace))(ns);
                          var suggestType = (function () {
                              if (resolvedNS instanceof Data_Maybe.Just && resolvedNS.value0 instanceof PscIde_Command.NSKind) {
                                  return Kind.value;
                              };
                              if (resolvedNS instanceof Data_Maybe.Just && resolvedNS.value0 instanceof PscIde_Command.NSType) {
                                  return Type.value;
                              };
                              if (resolvedNS instanceof Data_Maybe.Just && resolvedNS.value0 instanceof PscIde_Command.NSValue) {
                                  if (IdePurescript_Tokens.startsWithCapitalLetter(v1.identifier)) {
                                      return DCtor.value;
                                  };
                                  if (IdePurescript_Tokens.containsArrow(v1["type'"])) {
                                      return $$Function.value;
                                  };
                              };
                              if (resolvedNS instanceof Data_Maybe.Just && resolvedNS.value0 instanceof PscIde_Command.NSValue) {
                                  return Value.value;
                              };
                              if (resolvedNS instanceof Data_Maybe.Nothing) {
                                  return Value.value;
                              };
                              throw new Error("Failed pattern match at IdePurescript.Completion (line 126, column 11 - line 132, column 29): " + [ resolvedNS.constructor.name ]);
                          })();
                          var prefixModule = Data_Array.head(Data_Array.sortBy(function (a) {
                              return function (b) {
                                  return Data_Ord.compare(Data_Ord.ordInt)(Data_String_CodePoints.length(a))(Data_String_CodePoints.length(b));
                              };
                          })(Data_Array.filter(function (m) {
                              return Data_String_Utils.startsWith(m + ".")(v1["module'"]);
                          })(v1.exportedFrom)));
                          var preferredModule = Data_Array.head(Data_Array.intersect(Data_Eq.eqString)(v.preferredModules)(v1.exportedFrom));
                          var existingModule = Data_Array.head(Data_Array.intersect(Data_Eq.eqString)(v.moduleInfo.importedModules)(v1.exportedFrom));
                          var exportMod = Data_Maybe.fromMaybe(v1["module'"])(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(preferredModule)(existingModule))(prefixModule));
                          return new IdentSuggestion({
                              origMod: v1["module'"],
                              exportMod: exportMod,
                              identifier: v1.identifier,
                              qualifier: qualifier,
                              suggestType: suggestType,
                              prefix: prefix,
                              valueType: v1["type'"],
                              namespace: ns,
                              exportedFrom: v1.exportedFrom,
                              documentation: v1.documentation
                          });
                      };
                  };
              };
          };
          var parsed = (function () {
              var v1 = IdePurescript_Regex["match'"](IdePurescript_Tokens.moduleRegex)(v.line);
              if (v1 instanceof Data_Maybe.Just && (v1.value0.length === 3 && (v1["value0"][0] instanceof Data_Maybe.Just && (Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqString))(v1["value0"][1])(Data_Maybe.Nothing.value) || Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqString))(v1["value0"][2])(Data_Maybe.Nothing.value))))) {
                  return new Data_Maybe.Just({
                      mod: v1["value0"][1],
                      token: Data_Maybe.fromMaybe("")(v1["value0"][2])
                  });
              };
              return Data_Maybe.Nothing.value;
          })();
          var opts = {
              maxResults: v.maxResults,
              groupReexports: v.groupCompletions
          };
          var modResult = function (prefix) {
              return function (moduleName) {
                  return new ModuleSuggestion({
                      text: moduleName,
                      suggestType: Module.value,
                      prefix: prefix
                  });
              };
          };
          var matchingQualifiers = function (token) {
              var convQ = function (text) {
                  return new QualifierSuggestion({
                      text: text
                  });
              };
              return Data_Functor.map(Data_Functor.functorArray)(convQ)(Data_Array.filter(function (q) {
                  return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints.indexOf(token)(q))(new Data_Maybe.Just(0));
              })(v.qualifiers));
          };
          var isImport = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints.indexOf("import")(v.line))(new Data_Maybe.Just(0));
          var hasBracket = Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints.indexOf("(")(v.line))(Data_Maybe.Nothing.value);
          var moduleCompletion = isImport && !hasBracket;
          var moduleExplicit = isImport && hasBracket;
          var getModuleName = function (v1) {
              return function (token) {
                  if (v1 === "") {
                      return token;
                  };
                  return v1 + ("." + token);
              };
          };
          if (moduleExplicit) {
              var v1 = IdePurescript_Regex["match'"](explicitImportRegex)(v.line);
              if (v1 instanceof Data_Maybe.Just && (v1.value0.length === 3 && (v1["value0"][0] instanceof Data_Maybe.Just && (v1["value0"][1] instanceof Data_Maybe.Just && v1["value0"][2] instanceof Data_Maybe.Just)))) {
                  var cc = function (ns) {
                      return Data_Functor.map(Effect_Aff.functorAff)(Data_Tuple.Tuple.create(ns))(IdePurescript_PscIde["getCompletion'"](Data_Maybe.Nothing.value)([ new PscIde_Command.PrefixFilter(v1["value0"][2].value0), new PscIde_Command.NamespaceFilter([ ns ]) ])(port)(v.moduleInfo.mainModule)(Data_Maybe.Nothing.value)([ v1["value0"][1].value0 ])(v.moduleInfo.getQualifiedModule)(opts));
                  };
                  return Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(cc)([ PscIde_Command.NSValue.value, PscIde_Command.NSType.value ]))(function (completions) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Array.concatMap(function (v2) {
                          return Data_Functor.map(Data_Functor.functorArray)(result(Data_Maybe.Nothing.value)(v1["value0"][2].value0)(new Data_Maybe.Just(v2.value0)))(v2.value1);
                      })(completions));
                  });
              };
              return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
          };
          if (parsed instanceof Data_Maybe.Just) {
              if (moduleCompletion) {
                  var prefix = getModuleName(Data_Maybe.fromMaybe("")(parsed.value0.mod))(parsed.value0.token);
                  return Control_Bind.bind(Effect_Aff.bindAff)(getModuleSuggestions(port)(prefix))(function (completions) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Functor.map(Data_Functor.functorArray)(modResult(prefix))(completions));
                  });
              };
              var cc = function (ns) {
                  return Data_Functor.map(Effect_Aff.functorAff)(Data_Tuple.Tuple.create(ns))(IdePurescript_PscIde["getCompletion'"](Data_Maybe.Nothing.value)([ new PscIde_Command.PrefixFilter(parsed.value0.token), new PscIde_Command.NamespaceFilter([ ns ]) ])(port)(v.moduleInfo.mainModule)(parsed.value0.mod)(Data_Array.cons("Prim")(v.moduleInfo.modules))(v.moduleInfo.getQualifiedModule)(opts));
              };
              return Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(cc)([ PscIde_Command.NSValue.value, PscIde_Command.NSType.value ]))(function (completions) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(matchingQualifiers(parsed.value0.token))(Data_Array.concatMap(function (v1) {
                      return Data_Functor.map(Data_Functor.functorArray)(result(parsed.value0.mod)(parsed.value0.token)(new Data_Maybe.Just(v1.value0)))(v1.value1);
                  })(completions)));
              });
          };
          if (parsed instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
          };
          throw new Error("Failed pattern match at IdePurescript.Completion (line 86, column 5 - line 98, column 25): " + [ parsed.constructor.name ]);
      };
  };
  exports["Module"] = Module;
  exports["Type"] = Type;
  exports["DCtor"] = DCtor;
  exports["Function"] = $$Function;
  exports["Value"] = Value;
  exports["Kind"] = Kind;
  exports["ModuleSuggestion"] = ModuleSuggestion;
  exports["IdentSuggestion"] = IdentSuggestion;
  exports["QualifierSuggestion"] = QualifierSuggestion;
  exports["getSuggestions"] = getSuggestions;
  exports["declarationTypeToNamespace"] = declarationTypeToNamespace;
})(PS);
(function(exports) {
  exports.tmpDir = function() {
      return require('os').tmpdir();
    };
})(PS["LanguageServer.IdePurescript.Util.TemporaryFile"] = PS["LanguageServer.IdePurescript.Util.TemporaryFile"] || {});
(function(exports) {
  "use strict";

  exports.handleCallbackImpl = function (left, right, f) {
    return function (err, value) {
      if (err) {
        f(left(err))();
      } else {
        f(right(value))();
      }
    };
  };
})(PS["Node.FS.Async"] = PS["Node.FS.Async"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.FS.Async"] = $PS["Node.FS.Async"] || {};
  var exports = $PS["Node.FS.Async"];
  var $foreign = $PS["Node.FS.Async"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Internal = $PS["Node.FS.Internal"];          
  var handleCallback = function (cb) {
      return $foreign.handleCallbackImpl(Data_Either.Left.create, Data_Either.Right.create, cb);
  };
  var fs = Node_FS_Internal.unsafeRequireFS;                                                                                  
  var readFile = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readFile(file, {}, handleCallback(cb));
          });
      };
  };
  var readTextFile = function (encoding) {
      return function (file) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.readFile(file, {
                      encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                  }, handleCallback(cb));
              });
          };
      };
  };
  var unlink = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.unlink(file, handleCallback(cb));
          });
      };
  };
  var writeFile = function (file) {
      return function (buff) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.writeFile(file, buff, {}, handleCallback(cb));
              });
          };
      };
  };
  var writeTextFile = function (encoding) {
      return function (file) {
          return function (buff) {
              return function (cb) {
                  return Node_FS_Internal.mkEffect(function (v) {
                      return fs.writeFile(file, buff, {
                          encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                      }, handleCallback(cb));
                  });
              };
          };
      };
  };
  var exists = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.exists(file, function (b) {
                  return Effect_Unsafe.unsafePerformEffect(cb(b));
              });
          });
      };
  };
  exports["unlink"] = unlink;
  exports["readTextFile"] = readTextFile;
  exports["writeTextFile"] = writeTextFile;
  exports["exists"] = exists;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.FS.Aff"] = $PS["Node.FS.Aff"] || {};
  var exports = $PS["Node.FS.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Node_FS_Async = $PS["Node.FS.Async"];                
  var toAff = function (p) {
      return Effect_Aff.makeAff(function (k) {
          return Data_Functor.voidLeft(Effect.functorEffect)(p(k))(Effect_Aff.nonCanceler);
      });
  };
  var toAff1 = function (f) {
      return function (a) {
          return toAff(f(a));
      };
  };
  var unlink = toAff1(Node_FS_Async.unlink);
  var toAff2 = function (f) {
      return function (a) {
          return function (b) {
              return toAff(f(a)(b));
          };
      };
  };                                              
  var toAff3 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return toAff(f(a)(b)(c));
              };
          };
      };
  };                                        
  var writeTextFile = toAff3(Node_FS_Async.writeTextFile);
  var readTextFile = toAff2(Node_FS_Async.readTextFile);
  var exists = function (file) {
      return Effect_Aff.makeAff(function (k) {
          return Data_Functor.voidLeft(Effect.functorEffect)(Node_FS_Async.exists(file)((function () {
              var $0 = Control_Applicative.pure(Data_Either.applicativeEither);
              return function ($1) {
                  return k($0($1));
              };
          })()))(Effect_Aff.nonCanceler);
      });
  };
  exports["unlink"] = unlink;
  exports["readTextFile"] = readTextFile;
  exports["writeTextFile"] = writeTextFile;
  exports["exists"] = exists;
})(PS);
(function($PS) {
  "use strict";
  $PS["LanguageServer.IdePurescript.Util.TemporaryFile"] = $PS["LanguageServer.IdePurescript.Util.TemporaryFile"] || {};
  var exports = $PS["LanguageServer.IdePurescript.Util.TemporaryFile"];
  var $foreign = $PS["LanguageServer.IdePurescript.Util.TemporaryFile"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_UUID = $PS["Data.UUID"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign_Internal_Stringify = $PS["Foreign.Internal.Stringify"];
  var IdePurescript_Regex = $PS["IdePurescript.Regex"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Node_Path = $PS["Node.Path"];                
  var makeTemporaryFile = function (fileName) {
      return function (text) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)($foreign.tmpDir))(function (dir) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_UUID.genUUID))(function (uuid) {
                  var name = IdePurescript_Regex["replace'"](Data_String_Regex.regex("[\\/\\\\:]")(Data_String_Regex_Flags.global))("-")(fileName);
                  var tmpFile = dir + (Node_Path.sep + ("ide-purescript-" + (Data_UUID.toString(uuid) + ("-" + name))));
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(tmpFile)(text))(function () {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(tmpFile);
                  });
              });
          });
      };
  };
  var withTemporaryFile = function (fileName) {
      return function (text) {
          return function (action) {
              var run = function (tmpFile) {
                  return action(tmpFile);
              };
              var cleanup = function ($6) {
                  return Effect_Aff.apathize(Node_FS_Aff.unlink($6));
              };
              var acquire = makeTemporaryFile(fileName)(text);
              return Effect_Aff.bracket(acquire)(cleanup)(run);
          };
      };
  };
  var withTemporaryFFIFile = function (fileName) {
      return function (text) {
          return function (action) {
              var toFFIName = function (x) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
                      return v + ".js";
                  })(Data_String_CodeUnits.stripSuffix(".purs")(x));
              };
              var maybeJsFileName = toFFIName(fileName);
              return Control_Bind.bind(Effect_Aff.bindAff)(Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("File path does not end in .purs")))(Control_Applicative.pure(Effect_Aff.applicativeAff))(maybeJsFileName))(function (jsFileName) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(jsFileName)))(function (maybeFFIText) {
                      return withTemporaryFile(fileName)(text)(function (pursFilePath) {
                          if (maybeFFIText instanceof Data_Either.Right) {
                              var cleanup = function ($7) {
                                  return Effect_Aff.apathize(Node_FS_Aff.unlink($7));
                              };
                              var acquire = function (jsFilePath) {
                                  return Data_Functor.voidLeft(Effect_Aff.functorAff)(Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(jsFilePath)(text))(jsFilePath);
                              };
                              return Control_Bind.bind(Effect_Aff.bindAff)(Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("makeTemporaryFile produces incorrect filenames: " + Foreign_Internal_Stringify.unsafeStringify(pursFilePath))))(Control_Applicative.pure(Effect_Aff.applicativeAff))(toFFIName(pursFilePath)))(function (jsFilePath) {
                                  return Effect_Aff.bracket(acquire(jsFilePath))(cleanup)(function (v) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(jsFilePath)(maybeFFIText.value0))(function () {
                                          return action({
                                              pursFilePath: pursFilePath,
                                              jsFilePath: new Data_Maybe.Just(jsFilePath)
                                          });
                                      });
                                  });
                              });
                          };
                          if (maybeFFIText instanceof Data_Either.Left) {
                              return action({
                                  pursFilePath: pursFilePath,
                                  jsFilePath: Data_Maybe.Nothing.value
                              });
                          };
                          throw new Error("Failed pattern match at LanguageServer.IdePurescript.Util.TemporaryFile (line 56, column 5 - line 66, column 55): " + [ maybeFFIText.constructor.name ]);
                      });
                  });
              });
          };
      };
  };
  exports["makeTemporaryFile"] = makeTemporaryFile;
  exports["withTemporaryFile"] = withTemporaryFile;
  exports["withTemporaryFFIFile"] = withTemporaryFFIFile;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["IdePurescript.Modules"] = $PS["IdePurescript.Modules"] || {};
  var exports = $PS["IdePurescript.Modules"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Utils = $PS["Data.String.Utils"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Foreign_Object = $PS["Foreign.Object"];
  var IdePurescript_PscIdeServer = $PS["IdePurescript.PscIdeServer"];
  var IdePurescript_Regex = $PS["IdePurescript.Regex"];
  var LanguageServer_IdePurescript_Util_TemporaryFile = $PS["LanguageServer.IdePurescript.Util.TemporaryFile"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var PscIde = $PS["PscIde"];
  var PscIde_Command = $PS["PscIde.Command"];
  var UpdatedImports = (function () {
      function UpdatedImports(value0) {
          this.value0 = value0;
      };
      UpdatedImports.create = function (value0) {
          return new UpdatedImports(value0);
      };
      return UpdatedImports;
  })();
  var AmbiguousImport = (function () {
      function AmbiguousImport(value0) {
          this.value0 = value0;
      };
      AmbiguousImport.create = function (value0) {
          return new AmbiguousImport(value0);
      };
      return AmbiguousImport;
  })();
  var UnnecessaryImport = (function () {
      function UnnecessaryImport() {

      };
      UnnecessaryImport.value = new UnnecessaryImport();
      return UnnecessaryImport;
  })();
  var FailedImport = (function () {
      function FailedImport(value0) {
          this.value0 = value0;
      };
      FailedImport.create = function (value0) {
          return new FailedImport(value0);
      };
      return FailedImport;
  })();
  var withTempFile = function (fileName) {
      return function (text) {
          return function (action) {
              return LanguageServer_IdePurescript_Util_TemporaryFile.withTemporaryFile(fileName)(text)(function (tmpFile) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(action(tmpFile))(function (res) {
                      if (res instanceof Data_Either.Right && res.value0 instanceof PscIde_Command.SuccessFile) {
                          return Data_Functor.map(Effect_Aff.functorAff)(UpdatedImports.create)(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(tmpFile));
                      };
                      if (res instanceof Data_Either.Right && res.value0 instanceof PscIde_Command.MultipleResults) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(new AmbiguousImport(res.value0.value0));
                      };
                      if (res instanceof Data_Either.Right && res.value0 instanceof PscIde_Command.SuccessText) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(new FailedImport(Data_Array.intercalate(Data_Monoid.monoidString)("\x0a")(res.value0.value0)));
                      };
                      if (res instanceof Data_Either.Left) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(new FailedImport(res.value0));
                      };
                      throw new Error("Failed pattern match at IdePurescript.Modules (line 165, column 3 - line 169, column 42): " + [ res.constructor.name ]);
                  });
              });
          };
      };
  };
  var organiseModuleImports = function (log) {
      return function (state) {
          return function (port) {
              return function (fileName) {
                  return function (text) {
                      var addBogusImport = function (tmpFile) {
                          return PscIde.qualifiedImport(port)(tmpFile)(new Data_Maybe.Just(tmpFile))("Prim")("__IDE_IMPORT_HACK");
                      };
                      return Control_Bind.bind(Effect_Aff.bindAff)(withTempFile(fileName)(text)(addBogusImport))(function (res) {
                          if (res instanceof UpdatedImports) {
                              var result$prime = Data_Array.intercalate(Data_Monoid.monoidString)("\x0a")(Data_Array.filter((function () {
                                  var $97 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                                  var $98 = Data_String_CodeUnits.contains("__IDE_IMPORT_HACK");
                                  return function ($99) {
                                      return $97($98($99));
                                  };
                              })())(Data_String_Utils.lines(res.value0)));
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(log(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Info.value)(Data_Show.show(Data_Show.showArray(Data_Show.showString))(Data_String_Utils.lines(result$prime)))))(function () {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Maybe.Just({
                                      state: state,
                                      result: result$prime
                                  }));
                              });
                          };
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                      });
                  };
              };
          };
      };
  }; 
  var mkImplicit = function (m) {
      return {
          qualifier: Data_Maybe.Nothing.value,
          importType: PscIde_Command.Implicit.value,
          moduleName: m
      };
  };
  var initialModulesState = {
      main: Data_Maybe.Nothing.value,
      modules: [  ],
      identifiers: [  ],
      identToModule: Foreign_Object.empty
  };
  var getModuleName = function (v) {
      return v.moduleName;
  };
  var getModules = function (include) {
      return function (v) {
          return (function (v1) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "Prim" ])(v1);
          })(Data_Functor.map(Data_Functor.functorArray)(getModuleName)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Maybe.maybe([  ])(function ($100) {
              return Data_Array.singleton(mkImplicit($100));
          })(v.main))(Data_Array.filter(include)(v.modules))));
      };
  };
  var getUnqualActiveModules = function (state) {
      return function (maybeIdentifier) {
          var include = function (v) {
              if (v.qualifier instanceof Data_Maybe.Just) {
                  return false;
              };
              if (v.importType instanceof PscIde_Command.Implicit) {
                  return true;
              };
              if (v.importType instanceof PscIde_Command.Hiding) {
                  return Data_Foldable.all(Data_Foldable.foldableMaybe)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v1) {
                      return Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqString)(v1)(v.importType.value0);
                  })(maybeIdentifier);
              };
              if (v.importType instanceof PscIde_Command.Explicit) {
                  return Data_Foldable.any(Data_Foldable.foldableMaybe)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (identifier) {
                      return Data_HeytingAlgebra.disj(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)(identifier))(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)("(" + (identifier + ")")))(v.importType.value0);
                  })(maybeIdentifier);
              };
              throw new Error("Failed pattern match at IdePurescript.Modules (line 114, column 24 - line 123, column 42): " + [ v.constructor.name ]);
          };
          return getModules(include)(state);
      };
  };
  var getQualModule = function (qualifier) {
      return function (v) {
          var qual = function (v1) {
              return function (v2) {
                  if (v2.qualifier instanceof Data_Maybe.Just) {
                      return v1 === v2.qualifier.value0;
                  };
                  return false;
              };
          };
          return Data_Functor.map(Data_Functor.functorArray)(getModuleName)(Data_Array.filter(qual(qualifier))(v.modules));
      };
  };
  var getModuleFromUnknownQualifier = function (qual) {
      return function (v) {
          return Control_Alt.alt(Data_Maybe.altMaybe)(Foreign_Object.lookup(qual)(v.identToModule))(Foreign_Object.lookup("class " + qual)(v.identToModule));
      };
  };
  var getMainModule = function (text) {
      var regex = Data_String_Regex.regex("module\\s+([\\w.]+)")(Data_String_Regex_Flags.multiline);
      var v = IdePurescript_Regex["match'"](regex)(text);
      if (v instanceof Data_Maybe.Just && (v.value0.length === 2 && v["value0"][1] instanceof Data_Maybe.Just)) {
          return new Data_Maybe.Just(v["value0"][1].value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var getModulesForFile = function (port) {
      return function (file) {
          return function (fullText) {
              var mod = function (v) {
                  return v;
              };
              var idents = function (v) {
                  if (v.importType instanceof PscIde_Command.Explicit) {
                      return Data_Functor.map(Data_Functor.functorArray)(Data_Function.flip(Data_Tuple.Tuple.create)(v))(v.importType.value0);
                  };
                  return [  ];
              };
              var $$default = {
                  moduleName: Data_Maybe.Nothing.value,
                  imports: [  ]
              };
              return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Either.either(Data_Function["const"]($$default))(Control_Category.identity(Control_Category.categoryFn)))(PscIde.listImports(port)(file)))(function (v) {
                  var modules = Data_Functor.map(Data_Functor.functorArray)(mod)(v.imports);
                  var main = Data_Maybe.maybe(getMainModule(fullText))(Data_Maybe.Just.create)(v.moduleName);
                  var identToModule = Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(Data_Array.concatMap(idents)(modules));
                  var identifiers = Foreign_Object.keys(identToModule);
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                      main: main,
                      modules: modules,
                      identifiers: identifiers,
                      identToModule: identToModule
                  });
              });
          };
      };
  };
  var getModulesForFileTemp = function (port) {
      return function (file) {
          return function (fullText) {
              return Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_IdePurescript_Util_TemporaryFile.makeTemporaryFile(file)(fullText))(function (tmpFile) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(getModulesForFile(port)(tmpFile)(fullText))(function (res) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(Node_FS_Aff.unlink(tmpFile)))(function () {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(res);
                      });
                  });
              });
          };
      };
  };
  var getAllActiveModules = getModules(Data_Function["const"](true));
  var eqImportType = function (v) {
      return function (v1) {
          if (v instanceof PscIde_Command.Implicit && v1 instanceof PscIde_Command.Implicit) {
              return true;
          };
          if (v instanceof PscIde_Command.Explicit && v1 instanceof PscIde_Command.Explicit) {
              return Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(v.value0)(v1.value0);
          };
          if (v instanceof PscIde_Command.Hiding && v1 instanceof PscIde_Command.Hiding) {
              return Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(v.value0)(v1.value0);
          };
          return false;
      };
  };
  var moduleEq = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.moduleName === v1.moduleName && (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(v.qualifier)(v1.qualifier) && eqImportType(v.importType)(v1.importType));
      };
  });
  var addQualifiedImport = function (state) {
      return function (port) {
          return function (fileName) {
              return function (text) {
                  return function (moduleName) {
                      return function (qualifier) {
                          var isThisModule = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(new Data_Maybe.Just(moduleName))(state.main);
                          var addImport = function (tmpFile) {
                              return PscIde.qualifiedImport(port)(tmpFile)(new Data_Maybe.Just(tmpFile))(moduleName)(qualifier);
                          };
                          var $77 = !isThisModule;
                          if ($77) {
                              return Data_Functor.map(Effect_Aff.functorAff)(function (v) {
                                  return {
                                      state: state,
                                      result: v
                                  };
                              })(withTempFile(fileName)(text)(addImport));
                          };
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                              state: state,
                              result: UnnecessaryImport.value
                          });
                      };
                  };
              };
          };
      };
  };
  var addModuleImport = function (state) {
      return function (port) {
          return function (fileName) {
              return function (text) {
                  return function (moduleName) {
                      var shouldAdd = Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqString))(state.main)(new Data_Maybe.Just(moduleName)) && Data_Foldable.notElem(Data_Foldable.foldableArray)(moduleEq)(mkImplicit(moduleName))(state.modules);
                      var addImport = function (tmpFile) {
                          return PscIde.implicitImport(port)(tmpFile)(new Data_Maybe.Just(tmpFile))([  ])(moduleName);
                      };
                      if (!shouldAdd) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                              state: state,
                              result: UnnecessaryImport.value
                          });
                      };
                      if (shouldAdd) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(withTempFile(fileName)(text)(addImport))(function (result) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                                  state: state,
                                  result: result
                              });
                          });
                      };
                      throw new Error("Failed pattern match at IdePurescript.Modules (line 175, column 3 - line 179, column 29): " + [ shouldAdd.constructor.name ]);
                  };
              };
          };
      };
  };
  var addExplicitImport = function (state) {
      return function (port) {
          return function (fileName) {
              return function (text) {
                  return function (moduleName) {
                      return function (qualifier) {
                          return function (identifier) {
                              return function (ns) {
                                  var shouldAddMatch = function (v) {
                                      return function (v1) {
                                          if (v1.qualifier instanceof Data_Maybe.Nothing && (v1.importType instanceof PscIde_Command.Implicit && v1.moduleName === v)) {
                                              return false;
                                          };
                                          if (v1.qualifier instanceof Data_Maybe.Nothing && (v1.importType instanceof PscIde_Command.Hiding && v1.moduleName === v)) {
                                              return Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)(identifier)(v1.importType.value0);
                                          };
                                          return true;
                                      };
                                  };
                                  var namespaceFilters = Data_Maybe.maybe([  ])(function (n) {
                                      return [ new PscIde_Command.NamespaceFilter([ n ]) ];
                                  })(ns);
                                  var isThisModule = (function () {
                                      if (moduleName instanceof Data_Maybe.Just) {
                                          return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(moduleName)(state.main);
                                      };
                                      return false;
                                  })();
                                  var isExplicitPrim = function (v) {
                                      if (v.moduleName === "Prim") {
                                          if (v.importType instanceof PscIde_Command.Implicit) {
                                              return false;
                                          };
                                          return true;
                                      };
                                      return false;
                                  };
                                  var isOpenPrim = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(moduleName)(new Data_Maybe.Just("Prim")) && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(isExplicitPrim)(state.modules);
                                  var shouldAdd = !isThisModule && (!isOpenPrim && Data_Maybe.maybe(true)(function (mn) {
                                      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(shouldAddMatch(mn))(state.modules);
                                  })(moduleName));
                                  var filters = Data_Maybe.maybe([  ])(function (m) {
                                      return [ new PscIde_Command.ModuleFilter([ m ]) ];
                                  })(moduleName);
                                  var addImport = function (tmpFile) {
                                      return PscIde.explicitImport(port)(tmpFile)(new Data_Maybe.Just(tmpFile))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(filters)(namespaceFilters))(identifier)(qualifier);
                                  };
                                  if (!shouldAdd) {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                                          state: state,
                                          result: UnnecessaryImport.value
                                      });
                                  };
                                  if (shouldAdd) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(withTempFile(fileName)(text)(addImport))(function (result) {
                                          var state$prime = (function () {
                                              if (result instanceof UpdatedImports) {
                                                  return {
                                                      identifiers: Data_Array.cons(identifier)(state.identifiers),
                                                      identToModule: state.identToModule,
                                                      main: state.main,
                                                      modules: state.modules
                                                  };
                                              };
                                              return state;
                                          })();
                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                                              result: result,
                                              state: state$prime
                                          });
                                      });
                                  };
                                  throw new Error("Failed pattern match at IdePurescript.Modules (line 188, column 3 - line 195, column 37): " + [ shouldAdd.constructor.name ]);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["initialModulesState"] = initialModulesState;
  exports["getModuleName"] = getModuleName;
  exports["getModulesForFileTemp"] = getModulesForFileTemp;
  exports["getUnqualActiveModules"] = getUnqualActiveModules;
  exports["getAllActiveModules"] = getAllActiveModules;
  exports["getQualModule"] = getQualModule;
  exports["getModuleFromUnknownQualifier"] = getModuleFromUnknownQualifier;
  exports["addModuleImport"] = addModuleImport;
  exports["addExplicitImport"] = addExplicitImport;
  exports["addQualifiedImport"] = addQualifiedImport;
  exports["UpdatedImports"] = UpdatedImports;
  exports["AmbiguousImport"] = AmbiguousImport;
  exports["UnnecessaryImport"] = UnnecessaryImport;
  exports["FailedImport"] = FailedImport;
  exports["organiseModuleImports"] = organiseModuleImports;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["IdePurescript.QuickFix"] = $PS["IdePurescript.QuickFix"] || {};
  var exports = $PS["IdePurescript.QuickFix"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var IdePurescript_Regex = $PS["IdePurescript.Regex"];                
  var isUnknownToken = Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString))([ "UnknownValue", "UnknownType", "UnknownDataConstructor", "UnknownTypeConstructor", "UnknownName" ]);
  var isImport = Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString))([ "UnusedImport", "DuplicateImport", "HidingImport", "ImplicitImport", "ImplicitQualifiedImport", "UnusedDctorExplicitImport", "UnusedDctorImport", "UnusedExplicitImport" ]);
  var getTitle = function (code) {
      if (code === "UnusedImport") {
          return "Remove import";
      };
      if (code === "RedundantEmptyHidingImport") {
          return "Remove import";
      };
      if (code === "DuplicateImport") {
          return "Remove import";
      };
      if (code === "RedundantUnqualifiedImport") {
          return "Remove import";
      };
      if (code === "DeprecatedQualifiedSyntax") {
          return "Remove qualified keyword";
      };
      if (code === "ImplicitImport") {
          return "Make import explicit";
      };
      if (code === "UnusedExplicitImport") {
          return "Remove unused references";
      };
      return "Apply suggestion";
  };
  var getReplacement = function (replacement$prime) {
      return function (extraText) {
          var trailingNewline = IdePurescript_Regex["test'"](Data_String_Regex.regex("\x0a\\s+$")(Data_String_Regex_Flags.noFlags))(replacement$prime);
          var addNewline = trailingNewline && !Data_String_Common["null"](extraText);
          return Data_String_Common.trim(IdePurescript_Regex["replace'"](Data_String_Regex.regex("\\s+\x0a")(Data_String_Regex_Flags.global))("\x0a")(replacement$prime)) + (function () {
              if (addNewline) {
                  return "\x0a";
              };
              return "";
          })();
      };
  };
  exports["getReplacement"] = getReplacement;
  exports["getTitle"] = getTitle;
  exports["isUnknownToken"] = isUnknownToken;
  exports["isImport"] = isImport;
})(PS);
(function(exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.error = exports.warn = exports.info = exports.log = void 0;
  const log = (conn) => (s) => () => conn.console.log(s);
  exports.log = log;
  const info = (conn) => (s) => () => conn.console.info(s);
  exports.info = info;
  const warn = (conn) => (s) => () => conn.console.warn(s);
  exports.warn = warn;
  const error = (conn) => (s) => () => conn.console.error(s);
  exports.error = error;
})(PS["LanguageServer.Protocol.Console"] = PS["LanguageServer.Protocol.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.Protocol.Console"] = $PS["LanguageServer.Protocol.Console"] || {};
  var exports = $PS["LanguageServer.Protocol.Console"];
  var $foreign = $PS["LanguageServer.Protocol.Console"];
  exports["log"] = $foreign.log;
  exports["info"] = $foreign.info;
  exports["warn"] = $foreign.warn;
  exports["error"] = $foreign.error;
})(PS);
(function(exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });                                                                                                                              
  const showError = (conn) => (s) => () => conn.window.showErrorMessage(s);
  exports.showError = showError;
  const showErrorWithActionsImpl = (conn) => (s) => (actions) => () => conn.window.showErrorMessage(s, ...actions);
  const showWarning = (conn) => (s) => () => conn.window.showWarningMessage(s);
  exports.showWarning = showWarning;
  const showWarningWithActionsImpl = (conn) => (s) => (actions) => () => conn.window.showWarningMessage(s, ...actions);
  exports.showWarningWithActionsImpl = showWarningWithActionsImpl;
  const showInformation = (conn) => (s) => () => conn.window.showInformationMessage(s);
  exports.showInformation = showInformation;
  const showInformationWithActionsImpl = (conn) => (s) => (actions) => () => conn.window.showInformationMessage(s, ...actions);
})(PS["LanguageServer.Protocol.Window"] = PS["LanguageServer.Protocol.Window"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.Protocol.Window"] = $PS["LanguageServer.Protocol.Window"] || {};
  var exports = $PS["LanguageServer.Protocol.Window"];
  var $foreign = $PS["LanguageServer.Protocol.Window"];
  var Control_Promise = $PS["Control.Promise"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var convertMessageAction = function (act) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.title;
      })(Data_Nullable.toMaybe(act));
  };
  var showWarningWithActions = function (conn) {
      return function (msg) {
          return function (acts) {
              return Data_Functor.map(Effect_Aff.functorAff)(convertMessageAction)(Control_Promise.toAffE($foreign.showWarningWithActionsImpl(conn)(msg)(Data_Functor.map(Data_Functor.functorArray)(function (title) {
                  return {
                      title: title
                  };
              })(acts))));
          };
      };
  };
  exports["showWarningWithActions"] = showWarningWithActions;
  exports["showError"] = $foreign.showError;
  exports["showWarning"] = $foreign.showWarning;
  exports["showInformation"] = $foreign.showInformation;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["IdePurescript.Spago"] = $PS["IdePurescript.Spago"] || {};
  var exports = $PS["IdePurescript.Spago"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Posix_Signal = $PS["Data.Posix.Signal"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Utils = $PS["Data.String.Utils"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Foreign = $PS["Foreign"];
  var Foreign_Internal_Stringify = $PS["Foreign.Internal.Stringify"];
  var LanguageServer_Protocol_Console = $PS["LanguageServer.Protocol.Console"];
  var LanguageServer_Protocol_Window = $PS["LanguageServer.Protocol.Window"];
  var Node_ChildProcess = $PS["Node.ChildProcess"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_Stream = $PS["Node.Stream"];                
  var spawnAff = function (options) {
      return function (command) {
          return function ($$arguments) {
              return Effect_Aff.makeAff(function (cb) {
                  return function __do() {
                      var stdoutRef = Effect_Ref["new"]("")();
                      var stderrRef = Effect_Ref["new"]("")();
                      var process = Node_ChildProcess.spawn(command)($$arguments)(options)();
                      Node_Stream.onDataString(Node_ChildProcess.stdout(process))(Node_Encoding.UTF8.value)(function (string) {
                          return Effect_Ref.modify_(function (v) {
                              return v + string;
                          })(stdoutRef);
                      })();
                      Node_Stream.onDataString(Node_ChildProcess.stderr(process))(Node_Encoding.UTF8.value)(function (string) {
                          return Effect_Ref.modify_(function (v) {
                              return v + string;
                          })(stderrRef);
                      })();
                      Node_ChildProcess.onError(process)(function ($32) {
                          return cb(Data_Either.Left.create(Node_ChildProcess.toStandardError($32)));
                      })();
                      Node_ChildProcess.onExit(process)(function (exit) {
                          return function __do() {
                              var stdout = Effect_Ref.read(stdoutRef)();
                              var stderr = Effect_Ref.read(stderrRef)();
                              return cb(Control_Applicative.pure(Data_Either.applicativeEither)({
                                  stdout: stdout,
                                  stderr: stderr,
                                  exit: exit
                              }))();
                          };
                      })();
                      return Effect_Aff.effectCanceler(Data_Functor["void"](Effect.functorEffect)(Node_ChildProcess.kill(Data_Posix_Signal.SIGTERM.value)(process)));
                  };
              });
          };
      };
  };
  var spawnAffDefault = spawnAff(Node_ChildProcess.defaultSpawnOptions);
  var getPackages = function (v) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(spawnAffDefault("npx")([ "spago", "ls", "packages" ]))(function (v4) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Foreign.unsafeToForeign(Data_Functor.mapFlipped(Data_Functor.functorArray)(Data_String_Utils.lines(v4.stdout))(Data_String_CodePoints.takeWhile(function (v5) {
                          return Data_Eq.notEq(Data_String_CodePoints.eqCodePoint)(v5)(Data_String_CodePoints.codePointFromChar(" "));
                      }))));
                  });
              };
          };
      };
  };
  var addDependency = function (v) {
      return function (v1) {
          return function (v2) {
              return function (args) {
                  var v3 = function (v4) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v2.connection)(function (c) {
                          return LanguageServer_Protocol_Console.log(c)("Invalid args to addDependency " + Foreign_Internal_Stringify.unsafeStringify(args));
                      })))(function () {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Foreign.unsafeToForeign(false));
                      });
                  };
                  if (args.length === 1) {
                      var $21 = Control_Monad_Except_Trans.runExceptT(Foreign.readString(Data_Either.monadEither)(args[0]));
                      if ($21 instanceof Data_Either.Right && $21.value0 instanceof Data_Either.Right) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(spawnAffDefault("npx")([ "spago", "install", $21.value0.value0 ]))(function (v4) {
                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)((function () {
                                  if (v4.exit instanceof Node_ChildProcess.Normally && v4.exit.value0 === 0) {
                                      return Control_Applicative.pure(Effect.applicativeEffect)(Foreign.unsafeToForeign(true));
                                  };
                                  if (v4.exit instanceof Node_ChildProcess.Normally && v4.exit.value0 === 1) {
                                      return function __do() {
                                          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v2.connection)(Data_Function.flip(LanguageServer_Protocol_Window.showError)("Failed to install: " + v4.stderr))();
                                          return Foreign.unsafeToForeign(false);
                                      };
                                  };
                                  return function __do() {
                                      Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v2.connection)(Data_Function.flip(LanguageServer_Protocol_Window.showError)("Failed to install even worse: " + v4.stderr))();
                                      return Foreign.unsafeToForeign(false);
                                  };
                              })());
                          });
                      };
                      return v3(true);
                  };
                  return v3(true);
              };
          };
      };
  };
  exports["addDependency"] = addDependency;
  exports["getPackages"] = getPackages;
})(PS);
(function($PS) {
  "use strict";
  $PS["LanguageServer.IdePurescript.Commands"] = $PS["LanguageServer.IdePurescript.Commands"] || {};
  var exports = $PS["LanguageServer.IdePurescript.Commands"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Foreign = $PS["Foreign"];                
  var CommandInfo = (function () {
      function CommandInfo(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CommandInfo.create = function (value0) {
          return function (value1) {
              return new CommandInfo(value0, value1);
          };
      };
      return CommandInfo;
  })();
  var typedHoleExplicitCmd = new CommandInfo("Insert typed hole suggestion", "typedHole-explicit");
  var typedHoleCmd = new CommandInfo("Insert typed hole suggestion", "typedHole");
  var toggleExportManagementCmd = new CommandInfo("Toggle export management code lenses", "toggleExportManagement");
  var stopPscIdeCmd = new CommandInfo("Stop Psc-Ide-Server", "stopPscIde");
  var startPscIdeCmd = new CommandInfo("Start Psc-Ide-Server", "startPscIde");
  var searchCmd = new CommandInfo("Search identifiers", "search");
  var restartPscIdeCmd = new CommandInfo("Restart Psc-Ide-Server", "restartPscIde");
  var replaceSuggestionCmd = new CommandInfo("Apply Suggestion", "replaceSuggestion");
  var replaceAllSuggestionsCmd = new CommandInfo("Replace all suggestions", "replaceAllSuggestions");
  var organiseImportsCmd = new CommandInfo("Organise imports", "organiseImports");
  var listPackageSetPackagesCmd = new CommandInfo("List all packages in the package set", "listPackageSetPackages");
  var getAvailableModulesCmd = new CommandInfo("Get available modules", "getAvailableModules");
  var fixTypoCmd = new CommandInfo("Fix typo/add import", "fixTypo");
  var cmdName = function (v) {
      return "purescript." + v.value1;
  };
  var caseSplitCmd = new CommandInfo("Case split (explicit position)", "caseSplit-explicit");
  var c = function (v) {
      return function (args) {
          return {
              title: v.value0,
              command: cmdName(v),
              "arguments": Data_Nullable.toNullable(args)
          };
      };
  };
  var fixTypo$prime = function (x) {
      return function (uri) {
          return function (row) {
              return function ($$char) {
                  return function (tinfo) {
                      return c(new CommandInfo(x, "fixTypo"))(Data_Maybe.Just.create([ Foreign.unsafeToForeign(uri), Foreign.unsafeToForeign(row), Foreign.unsafeToForeign($$char), tinfo ]));
                  };
              };
          };
      };
  };
  var organiseImports = function (uri) {
      return c(organiseImportsCmd)(Data_Maybe.Just.create([ Foreign.unsafeToForeign(uri) ]));
  };
  var replaceAllSuggestions = function (text) {
      return function (uri) {
          return function (replacements) {
              return c(new CommandInfo(text, "replaceAllSuggestions"))(Data_Maybe.Just.create([ Foreign.unsafeToForeign(uri), Foreign.unsafeToForeign(replacements) ]));
          };
      };
  };
  var replaceSuggestion = function (title) {
      return function (uri) {
          return function (replacement) {
              return function (fixRange) {
                  return c(new CommandInfo(title, "replaceSuggestion"))(Data_Maybe.Just.create([ Foreign.unsafeToForeign(uri), Foreign.unsafeToForeign(replacement), Foreign.unsafeToForeign(fixRange) ]));
              };
          };
      };
  };
  var typedHole = function (name) {
      return function (url) {
          return function (range) {
              return function (options) {
                  return c(typedHoleCmd)(Data_Maybe.Just.create(Data_Array.cons(Foreign.unsafeToForeign(name))(Data_Array.cons(Foreign.unsafeToForeign(url))(Data_Array.cons(Foreign.unsafeToForeign(range))(Data_Functor.map(Data_Functor.functorArray)(Foreign.unsafeToForeign)(options))))));
              };
          };
      };
  };
  var buildCmd = new CommandInfo("Build", "build");
  var build = c(buildCmd)(Data_Maybe.Nothing.value);
  var addSpagoDependencyCmd = new CommandInfo("Add a spago dependency", "addSpagoDependency");
  var addModuleImportCmd = new CommandInfo("Add module import", "addModuleImport");
  var addCompletionImportCmd = new CommandInfo("Add completion import", "addCompletionImport");
  var addCompletionImport = function (ident) {
      return function (mod) {
          return function (qual) {
              return function (uri) {
                  return function (ns) {
                      return c(addCompletionImportCmd)(new Data_Maybe.Just([ Foreign.unsafeToForeign(ident), Foreign.unsafeToForeign(Data_Nullable.toNullable(mod)), Foreign.unsafeToForeign(Data_Nullable.toNullable(qual)), Foreign.unsafeToForeign(uri), Foreign.unsafeToForeign(ns) ]));
                  };
              };
          };
      };
  };
  var addClauseCmd = new CommandInfo("Add clause (explicit position/cmd)", "addClause-explicit");
  var commands = Data_Functor.map(Data_Functor.functorArray)(cmdName)([ addCompletionImportCmd, caseSplitCmd, addClauseCmd, replaceSuggestionCmd, buildCmd, startPscIdeCmd, stopPscIdeCmd, restartPscIdeCmd, typedHoleExplicitCmd, replaceAllSuggestionsCmd, fixTypoCmd, addSpagoDependencyCmd, listPackageSetPackagesCmd, toggleExportManagementCmd ]);
  exports["addClauseCmd"] = addClauseCmd;
  exports["addCompletionImport"] = addCompletionImport;
  exports["addCompletionImportCmd"] = addCompletionImportCmd;
  exports["addModuleImportCmd"] = addModuleImportCmd;
  exports["addSpagoDependencyCmd"] = addSpagoDependencyCmd;
  exports["build"] = build;
  exports["buildCmd"] = buildCmd;
  exports["caseSplitCmd"] = caseSplitCmd;
  exports["cmdName"] = cmdName;
  exports["commands"] = commands;
  exports["fixTypo'"] = fixTypo$prime;
  exports["fixTypoCmd"] = fixTypoCmd;
  exports["getAvailableModulesCmd"] = getAvailableModulesCmd;
  exports["listPackageSetPackagesCmd"] = listPackageSetPackagesCmd;
  exports["organiseImports"] = organiseImports;
  exports["organiseImportsCmd"] = organiseImportsCmd;
  exports["replaceAllSuggestions"] = replaceAllSuggestions;
  exports["replaceAllSuggestionsCmd"] = replaceAllSuggestionsCmd;
  exports["replaceSuggestion"] = replaceSuggestion;
  exports["replaceSuggestionCmd"] = replaceSuggestionCmd;
  exports["restartPscIdeCmd"] = restartPscIdeCmd;
  exports["searchCmd"] = searchCmd;
  exports["startPscIdeCmd"] = startPscIdeCmd;
  exports["stopPscIdeCmd"] = stopPscIdeCmd;
  exports["typedHole"] = typedHole;
  exports["typedHoleExplicitCmd"] = typedHoleExplicitCmd;
  exports["toggleExportManagementCmd"] = toggleExportManagementCmd;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.Config"] = $PS["LanguageServer.IdePurescript.Config"] || {};
  var exports = $PS["LanguageServer.IdePurescript.Config"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var PscIde_Command = $PS["PscIde.Command"];
  var PscIde_Server = $PS["PscIde.Server"];                
  var ignoreEmpty = function (v) {
      if (v instanceof Data_Maybe.Just && v.value0 === "") {
          return Data_Maybe.Nothing.value;
      };
      return v;
  };
  var getConfigMaybe = function (readValue) {
      return function (key) {
          return function (settings) {
              var val = Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(settings)("purescript"))(function (ps) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(ps)(key))(function (res) {
                      return readValue(res);
                  });
              });
              return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Control_Monad_Except.runExcept(val));
          };
      };
  };
  var outputDirectory = getConfigMaybe(Foreign.readString(Data_Identity.monadIdentity))("outputDirectory");
  var pscIdePort = getConfigMaybe(Foreign.readInt(Data_Identity.monadIdentity))("pscIdePort");
  var getConfig = function (readValue) {
      return function (key) {
          return function ($$default) {
              return function (settings) {
                  return Data_Maybe.fromMaybe($$default)(getConfigMaybe(readValue)(key)(settings));
              };
          };
      };
  };
  var getInt = getConfig(Foreign.readInt(Data_Identity.monadIdentity));
  var rebuildFrequency = (function () {
      var $5 = getInt("liveRebuildFrequency")(250);
      return function ($6) {
          return Data_Time_Duration.Milliseconds(Data_Int.toNumber($5($6)));
      };
  })();
  var getString = getConfig(Foreign.readString(Data_Identity.monadIdentity));
  var logLevel = (function () {
      var $7 = getString("pscIdelogLevel")("");
      return function ($8) {
          return (function (v) {
              if (v === "all") {
                  return new Data_Maybe.Just(PscIde_Server.All.value);
              };
              if (v === "none") {
                  return new Data_Maybe.Just(PscIde_Server.None.value);
              };
              if (v === "debug") {
                  return new Data_Maybe.Just(PscIde_Server.Debug.value);
              };
              if (v === "perf") {
                  return new Data_Maybe.Just(PscIde_Server.Perf.value);
              };
              return Data_Maybe.Nothing.value;
          })($7($8));
      };
  })();
  var packagePath = getString("packagePath")("");
  var preludeModule = getString("preludeModule")("Prelude");
  var pursExe = getString("pursExe")("purs");
  var srcPath = getString("sourcePath")("src");
  var importsPreferredModules = getConfig(Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray(Data_Identity.monadIdentity))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign.readString(Data_Identity.monadIdentity))))("importsPreferredModules")([  ]);
  var sourceGlobs = getConfig(Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray(Data_Identity.monadIdentity))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign.readString(Data_Identity.monadIdentity))))("sourceGlobs")([  ]);
  var getBoolean = getConfig(Foreign.readBoolean(Data_Identity.monadIdentity));
  var liveRebuild = getBoolean("liveRebuild")(false);
  var polling = getBoolean("polling")(false);
  var fastRebuild = getBoolean("fastRebuild")(true);
  var effectiveOutputDirectory = (function () {
      var $9 = Data_Maybe.fromMaybe("output");
      return function ($10) {
          return $9(ignoreEmpty(outputDirectory($10)));
      };
  })();
  var editorMode = getBoolean("editorMode")(false);                                                                                                                                                                                                                                                                                                                                                                         
  var codegenTargets = (function () {
      var $11 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(Data_Functor.functorArray)(PscIde_Command.Other.create));
      var $12 = getConfigMaybe(Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray(Data_Identity.monadIdentity))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign.readString(Data_Identity.monadIdentity))))("codegenTargets");
      return function ($13) {
          return $11($12($13));
      };
  })();
  var censorCodes = getConfig(Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray(Data_Identity.monadIdentity))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign.readString(Data_Identity.monadIdentity))))("censorWarnings")([  ]);
  var buildCommand = getString("buildCommand")("spago build --purs-args --json-errors");
  var autocompleteLimit = getConfigMaybe(Foreign.readInt(Data_Identity.monadIdentity))("autocompleteLimit");
  var autocompleteGrouped = getBoolean("autocompleteGrouped")(false);
  var autocompleteAddImport = getBoolean("autocompleteAddImport")(true);
  var autoStartPscIde = getBoolean("autoStartPscIde")(true);
  var autoCompleteAllModules = getBoolean("autocompleteAllModules")(true);
  var addSpagoSources = getBoolean("addSpagoSources")(false);
  var addPscPackageSources = getBoolean("addPscPackageSources")(false);
  var addNpmPath = getBoolean("addNpmPath")(false);
  exports["pursExe"] = pursExe;
  exports["pscIdePort"] = pscIdePort;
  exports["autoCompleteAllModules"] = autoCompleteAllModules;
  exports["buildCommand"] = buildCommand;
  exports["addNpmPath"] = addNpmPath;
  exports["packagePath"] = packagePath;
  exports["srcPath"] = srcPath;
  exports["sourceGlobs"] = sourceGlobs;
  exports["censorCodes"] = censorCodes;
  exports["autoStartPscIde"] = autoStartPscIde;
  exports["autocompleteAddImport"] = autocompleteAddImport;
  exports["autocompleteGrouped"] = autocompleteGrouped;
  exports["autocompleteLimit"] = autocompleteLimit;
  exports["importsPreferredModules"] = importsPreferredModules;
  exports["preludeModule"] = preludeModule;
  exports["fastRebuild"] = fastRebuild;
  exports["liveRebuild"] = liveRebuild;
  exports["rebuildFrequency"] = rebuildFrequency;
  exports["editorMode"] = editorMode;
  exports["effectiveOutputDirectory"] = effectiveOutputDirectory;
  exports["polling"] = polling;
  exports["addPscPackageSources"] = addPscPackageSources;
  exports["addSpagoSources"] = addSpagoSources;
  exports["logLevel"] = logLevel;
  exports["codegenTargets"] = codegenTargets;
})(PS);
(function(exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.onDidChangeContent = exports.onDidCloseDocument = exports.onDidOpenDocument = exports.onDidSaveDocument = exports.getDocumentImpl = exports.getDocuments = void 0;
  const getDocuments = (documents) => () => documents.all();
  exports.getDocuments = getDocuments;
  const getDocumentImpl = (just, nothing, documents, uri) => {
      const doc = documents.get(uri);
      return doc ? just(doc) : nothing;
  };
  exports.getDocumentImpl = getDocumentImpl;
  const onDidSaveDocument = (documents) => (f) => () => documents.onDidSave(p => f(p)());
  exports.onDidSaveDocument = onDidSaveDocument;
  const onDidOpenDocument = (documents) => (f) => () => documents.onDidOpen(p => f(p)());
  exports.onDidOpenDocument = onDidOpenDocument;
  const onDidCloseDocument = (documents) => (f) => () => documents.onDidClose(p => f(p)());
  exports.onDidCloseDocument = onDidCloseDocument;
  const onDidChangeContent = (documents) => (f) => () => documents.onDidChangeContent(p => f(p)());
  exports.onDidChangeContent = onDidChangeContent;
})(PS["LanguageServer.Protocol.DocumentStore"] = PS["LanguageServer.Protocol.DocumentStore"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.Protocol.DocumentStore"] = $PS["LanguageServer.Protocol.DocumentStore"] || {};
  var exports = $PS["LanguageServer.Protocol.DocumentStore"];
  var $foreign = $PS["LanguageServer.Protocol.DocumentStore"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];                
  var getDocument = Effect_Uncurried.runEffectFn4($foreign.getDocumentImpl)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["getDocument"] = getDocument;
  exports["onDidSaveDocument"] = $foreign.onDidSaveDocument;
  exports["onDidOpenDocument"] = $foreign.onDidOpenDocument;
  exports["onDidChangeContent"] = $foreign.onDidChangeContent;
})(PS);
(function(exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.onShutdown = exports.onExit = exports.onDidChangeWatchedFiles = exports.onExecuteCommand = exports.sendDiagnosticsEnd = exports.sendDiagnosticsBegin = exports.applyEditImpl = exports.publishDiagnostics = exports.onDidChangeConfiguration = exports.onDocumentFormatting = exports.onFoldingRanges = exports.onCodeLens = exports.onCodeAction = exports.onReferences = exports.onWorkspaceSymbol = exports.onDocumentSymbol = exports.onSignatureHelp = exports.onHover = exports.onCompletion = exports.onDefinition = void 0;
  const vscode_jsonrpc_1 = require("vscode-jsonrpc");
  let registerHandler = (registerF) => (f) => () => registerF(x => f(x)());
  let registerHandler0 = (registerF) => (f) => () => registerF(f);
  let registerNotificationHandler = (registerF) => (f) => () => registerF(x => f(x)());
  let registerNotificationHandler0 = (registerF) => (f) => () => registerF(f);
  const onDefinition = (conn) => registerHandler(conn.onDefinition);
  exports.onDefinition = onDefinition;
  const onCompletion = (conn) => registerHandler(conn.onCompletion);
  exports.onCompletion = onCompletion;
  const onHover = (conn) => registerHandler(conn.onHover);
  exports.onHover = onHover;
  const onSignatureHelp = (conn) => registerHandler(conn.onSignatureHelp);
  const onDocumentSymbol = (conn) => registerHandler(conn.onDocumentSymbol);
  exports.onDocumentSymbol = onDocumentSymbol;
  const onWorkspaceSymbol = (conn) => registerHandler(conn.onWorkspaceSymbol);
  exports.onWorkspaceSymbol = onWorkspaceSymbol;
  const onReferences = (conn) => registerHandler(conn.onReferences);
  exports.onReferences = onReferences;
  const onCodeAction = (conn) => registerHandler(conn.onCodeAction);
  exports.onCodeAction = onCodeAction;
  const onCodeLens = (conn) => registerHandler(conn.onCodeLens);
  exports.onCodeLens = onCodeLens;
  const onFoldingRanges = (conn) => registerHandler(conn.onFoldingRanges);
  exports.onFoldingRanges = onFoldingRanges;
  const onDocumentFormatting = (conn) => registerHandler(conn.onDocumentFormatting);
  exports.onDocumentFormatting = onDocumentFormatting;
  const onDidChangeConfiguration = (conn) => registerNotificationHandler(conn.onDidChangeConfiguration);
  exports.onDidChangeConfiguration = onDidChangeConfiguration;
  const publishDiagnostics = (conn) => (params) => () => conn.sendDiagnostics(params);
  exports.publishDiagnostics = publishDiagnostics;
  const applyEditImpl = (conn) => (edit) => () => conn.workspace.applyEdit(edit).then(x => x.applied);
  exports.applyEditImpl = applyEditImpl;
  const sendDiagnosticsBegin = (conn) => () => conn.sendNotification(new vscode_jsonrpc_1.NotificationType0('textDocument/diagnosticsBegin'));
  exports.sendDiagnosticsBegin = sendDiagnosticsBegin;
  const sendDiagnosticsEnd = (conn) => () => conn.sendNotification(new vscode_jsonrpc_1.NotificationType0('textDocument/diagnosticsEnd'));
  exports.sendDiagnosticsEnd = sendDiagnosticsEnd;
  const onExecuteCommand = (conn) => registerHandler(conn.onExecuteCommand);
  exports.onExecuteCommand = onExecuteCommand;
  const onDidChangeWatchedFiles = (conn) => registerNotificationHandler(conn.onDidChangeWatchedFiles);
  exports.onDidChangeWatchedFiles = onDidChangeWatchedFiles;
  const onExit = (conn) => registerNotificationHandler0(conn.onExit);
  const onShutdown = (conn) => registerHandler0(conn.onShutdown);
  exports.onShutdown = onShutdown;
})(PS["LanguageServer.Protocol.Handlers"] = PS["LanguageServer.Protocol.Handlers"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.Protocol.Handlers"] = $PS["LanguageServer.Protocol.Handlers"] || {};
  var exports = $PS["LanguageServer.Protocol.Handlers"];
  var $foreign = $PS["LanguageServer.Protocol.Handlers"];
  var Control_Promise = $PS["Control.Promise"];
  var applyEdit = function (conn) {
      return function (edit) {
          return Control_Promise.toAffE($foreign.applyEditImpl(conn)(edit));
      };
  };
  exports["applyEdit"] = applyEdit;
  exports["onDefinition"] = $foreign.onDefinition;
  exports["onCompletion"] = $foreign.onCompletion;
  exports["onHover"] = $foreign.onHover;
  exports["onDocumentSymbol"] = $foreign.onDocumentSymbol;
  exports["onWorkspaceSymbol"] = $foreign.onWorkspaceSymbol;
  exports["onReferences"] = $foreign.onReferences;
  exports["onCodeAction"] = $foreign.onCodeAction;
  exports["onCodeLens"] = $foreign.onCodeLens;
  exports["onFoldingRanges"] = $foreign.onFoldingRanges;
  exports["onDocumentFormatting"] = $foreign.onDocumentFormatting;
  exports["onDidChangeConfiguration"] = $foreign.onDidChangeConfiguration;
  exports["onDidChangeWatchedFiles"] = $foreign.onDidChangeWatchedFiles;
  exports["onExecuteCommand"] = $foreign.onExecuteCommand;
  exports["publishDiagnostics"] = $foreign.publishDiagnostics;
  exports["sendDiagnosticsBegin"] = $foreign.sendDiagnosticsBegin;
  exports["sendDiagnosticsEnd"] = $foreign.sendDiagnosticsEnd;
  exports["onShutdown"] = $foreign.onShutdown;
})(PS);
(function($PS) {
  "use strict";
  $PS["LanguageServer.Protocol.Types"] = $PS["LanguageServer.Protocol.Types"] || {};
  var exports = $PS["LanguageServer.Protocol.Types"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Lens_Iso_Newtype = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Record = $PS["Data.Lens.Record"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var FileSymbolKind = (function () {
      function FileSymbolKind() {

      };
      FileSymbolKind.value = new FileSymbolKind();
      return FileSymbolKind;
  })();
  var ModuleSymbolKind = (function () {
      function ModuleSymbolKind() {

      };
      ModuleSymbolKind.value = new ModuleSymbolKind();
      return ModuleSymbolKind;
  })();
  var NamespaceSymbolKind = (function () {
      function NamespaceSymbolKind() {

      };
      NamespaceSymbolKind.value = new NamespaceSymbolKind();
      return NamespaceSymbolKind;
  })();
  var PackageSymbolKind = (function () {
      function PackageSymbolKind() {

      };
      PackageSymbolKind.value = new PackageSymbolKind();
      return PackageSymbolKind;
  })();
  var ClassSymbolKind = (function () {
      function ClassSymbolKind() {

      };
      ClassSymbolKind.value = new ClassSymbolKind();
      return ClassSymbolKind;
  })();
  var MethodSymbolKind = (function () {
      function MethodSymbolKind() {

      };
      MethodSymbolKind.value = new MethodSymbolKind();
      return MethodSymbolKind;
  })();
  var PropertySymbolKind = (function () {
      function PropertySymbolKind() {

      };
      PropertySymbolKind.value = new PropertySymbolKind();
      return PropertySymbolKind;
  })();
  var FieldSymbolKind = (function () {
      function FieldSymbolKind() {

      };
      FieldSymbolKind.value = new FieldSymbolKind();
      return FieldSymbolKind;
  })();
  var ConstructorSymbolKind = (function () {
      function ConstructorSymbolKind() {

      };
      ConstructorSymbolKind.value = new ConstructorSymbolKind();
      return ConstructorSymbolKind;
  })();
  var EnumSymbolKind = (function () {
      function EnumSymbolKind() {

      };
      EnumSymbolKind.value = new EnumSymbolKind();
      return EnumSymbolKind;
  })();
  var InterfaceSymbolKind = (function () {
      function InterfaceSymbolKind() {

      };
      InterfaceSymbolKind.value = new InterfaceSymbolKind();
      return InterfaceSymbolKind;
  })();
  var FunctionSymbolKind = (function () {
      function FunctionSymbolKind() {

      };
      FunctionSymbolKind.value = new FunctionSymbolKind();
      return FunctionSymbolKind;
  })();
  var VariableSymbolKind = (function () {
      function VariableSymbolKind() {

      };
      VariableSymbolKind.value = new VariableSymbolKind();
      return VariableSymbolKind;
  })();
  var ConstantSymbolKind = (function () {
      function ConstantSymbolKind() {

      };
      ConstantSymbolKind.value = new ConstantSymbolKind();
      return ConstantSymbolKind;
  })();
  var StringSymbolKind = (function () {
      function StringSymbolKind() {

      };
      StringSymbolKind.value = new StringSymbolKind();
      return StringSymbolKind;
  })();
  var NumberSymbolKind = (function () {
      function NumberSymbolKind() {

      };
      NumberSymbolKind.value = new NumberSymbolKind();
      return NumberSymbolKind;
  })();
  var BooleanSymbolKind = (function () {
      function BooleanSymbolKind() {

      };
      BooleanSymbolKind.value = new BooleanSymbolKind();
      return BooleanSymbolKind;
  })();
  var ArraySymbolKind = (function () {
      function ArraySymbolKind() {

      };
      ArraySymbolKind.value = new ArraySymbolKind();
      return ArraySymbolKind;
  })();
  var Position = function (x) {
      return x;
  };
  var CreatedChangeType = (function () {
      function CreatedChangeType() {

      };
      CreatedChangeType.value = new CreatedChangeType();
      return CreatedChangeType;
  })();
  var ChangedChangeType = (function () {
      function ChangedChangeType() {

      };
      ChangedChangeType.value = new ChangedChangeType();
      return ChangedChangeType;
  })();
  var DeletedChangeType = (function () {
      function DeletedChangeType() {

      };
      DeletedChangeType.value = new DeletedChangeType();
      return DeletedChangeType;
  })();
  var DocumentUri = function (x) {
      return x;
  };
  var TextDocumentIdentifier = function (x) {
      return x;
  };
  var Text = (function () {
      function Text() {

      };
      Text.value = new Text();
      return Text;
  })();
  var Method = (function () {
      function Method() {

      };
      Method.value = new Method();
      return Method;
  })();
  var $$Function = (function () {
      function $$Function() {

      };
      $$Function.value = new $$Function();
      return $$Function;
  })();
  var Constructor = (function () {
      function Constructor() {

      };
      Constructor.value = new Constructor();
      return Constructor;
  })();
  var Field = (function () {
      function Field() {

      };
      Field.value = new Field();
      return Field;
  })();
  var Variable = (function () {
      function Variable() {

      };
      Variable.value = new Variable();
      return Variable;
  })();
  var Class = (function () {
      function Class() {

      };
      Class.value = new Class();
      return Class;
  })();
  var Interface = (function () {
      function Interface() {

      };
      Interface.value = new Interface();
      return Interface;
  })();
  var Module = (function () {
      function Module() {

      };
      Module.value = new Module();
      return Module;
  })();
  var Property = (function () {
      function Property() {

      };
      Property.value = new Property();
      return Property;
  })();
  var Unit = (function () {
      function Unit() {

      };
      Unit.value = new Unit();
      return Unit;
  })();
  var Value = (function () {
      function Value() {

      };
      Value.value = new Value();
      return Value;
  })();
  var Enum = (function () {
      function Enum() {

      };
      Enum.value = new Enum();
      return Enum;
  })();
  var Keyword = (function () {
      function Keyword() {

      };
      Keyword.value = new Keyword();
      return Keyword;
  })();
  var Snippet = (function () {
      function Snippet() {

      };
      Snippet.value = new Snippet();
      return Snippet;
  })();
  var Color = (function () {
      function Color() {

      };
      Color.value = new Color();
      return Color;
  })();
  var File = (function () {
      function File() {

      };
      File.value = new File();
      return File;
  })();
  var Reference = (function () {
      function Reference() {

      };
      Reference.value = new Reference();
      return Reference;
  })();
  var CompletionItem = function (x) {
      return x;
  };
  var CodeActionKind = function (x) {
      return x;
  };
  var uri = function (v) {
      return v.uri;
  };
  var symbolKindToInt = function (v) {
      if (v instanceof FileSymbolKind) {
          return 1;
      };
      if (v instanceof ModuleSymbolKind) {
          return 2;
      };
      if (v instanceof NamespaceSymbolKind) {
          return 3;
      };
      if (v instanceof PackageSymbolKind) {
          return 4;
      };
      if (v instanceof ClassSymbolKind) {
          return 5;
      };
      if (v instanceof MethodSymbolKind) {
          return 6;
      };
      if (v instanceof PropertySymbolKind) {
          return 7;
      };
      if (v instanceof FieldSymbolKind) {
          return 8;
      };
      if (v instanceof ConstructorSymbolKind) {
          return 9;
      };
      if (v instanceof EnumSymbolKind) {
          return 10;
      };
      if (v instanceof InterfaceSymbolKind) {
          return 11;
      };
      if (v instanceof FunctionSymbolKind) {
          return 12;
      };
      if (v instanceof VariableSymbolKind) {
          return 13;
      };
      if (v instanceof ConstantSymbolKind) {
          return 14;
      };
      if (v instanceof StringSymbolKind) {
          return 15;
      };
      if (v instanceof NumberSymbolKind) {
          return 16;
      };
      if (v instanceof BooleanSymbolKind) {
          return 17;
      };
      if (v instanceof ArraySymbolKind) {
          return 18;
      };
      throw new Error("Failed pattern match at LanguageServer.Protocol.Types (line 224, column 19 - line 242, column 24): " + [ v.constructor.name ]);
  };
  var supportsDocumentChanges = function (v) {
      if (v instanceof Data_Maybe.Nothing) {
          return false;
      };
      if (v instanceof Data_Maybe.Just) {
          return Data_Maybe.fromMaybe(false)(Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Nullable.toMaybe(v.value0.workspace))(function ($125) {
              return Data_Nullable.toMaybe((function (v1) {
                  return v1.workspaceEdit;
              })($125));
          }))(function ($126) {
              return Data_Nullable.toMaybe((function (v1) {
                  return v1.documentChanges;
              })($126));
          }));
      };
      throw new Error("Failed pattern match at LanguageServer.Protocol.Types (line 337, column 1 - line 337, column 62): " + [ v.constructor.name ]);
  };

  // | Create workspace edit, supporting both documentChanges and older changes property for v2 clients
  var workspaceEdit = function (capabilities) {
      return function (edits) {
          var useDocumentChanges = supportsDocumentChanges(capabilities);
          var getUri = function (v) {
              return v.textDocument.uri;
          };
          var getEdit = function (v) {
              return v.edits;
          };
          return {
              documentChanges: Data_Nullable.toNullable((function () {
                  if (useDocumentChanges) {
                      return new Data_Maybe.Just(edits);
                  };
                  return Data_Maybe.Nothing.value;
              })()),
              changes: Data_Nullable.toNullable((function () {
                  if (useDocumentChanges) {
                      return Data_Maybe.Nothing.value;
                  };
                  return Data_Maybe.Just.create(Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(function (v) {
                      return new Data_Tuple.Tuple(getUri(v.value0), Data_Array.concat(Data_Array.cons(getEdit(v.value0))(Data_Functor.map(Data_Functor.functorArray)(getEdit)(v.value1))));
                  })(Data_Functor.map(Data_Functor.functorArray)(Data_Array_NonEmpty.toNonEmpty)(Data_Array.groupBy(function (a) {
                      return function (b) {
                          return getUri(a) === getUri(b);
                      };
                  })(Data_Array.sortWith(Data_Ord.ordString)(getUri)(edits))))));
              })())
          };
      };
  };
  var showPosition = new Data_Show.Show(function (v) {
      return "Position(" + (Data_Show.show(Data_Show.showInt)(v.line) + ("," + (Data_Show.show(Data_Show.showInt)(v.character) + ")")));
  });
  var showRange = new Data_Show.Show(function (v) {
      return "Range(" + (Data_Show.show(showPosition)(v.start) + ("," + (Data_Show.show(showPosition)(v.end) + ")")));
  });
  var showDocumentUri = new Data_Show.Show(function (v) {
      return "DocumentUri " + Data_Show.show(Data_Show.showString)(v);
  });
  var showDiagnostic = Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "code";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "message";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "range";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "severity";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "source";
  }))(Data_Show.showRecordFieldsNil)(Data_Nullable.showNullable(Data_Show.showString)))(Data_Nullable.showNullable(Data_Show.showInt)))(showRange))(Data_Show.showString))(Data_Nullable.showNullable(Data_Show.showString)));
  var readRange = function (r) {
      var readPosition = function (p) {
          return Control_Apply.apply(Control_Monad_Except_Trans.applyExceptT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(function (v) {
              return function (v1) {
                  return {
                      line: v,
                      character: v1
                  };
              };
          })(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(p)("line"))(Foreign.readInt(Data_Identity.monadIdentity))))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(p)("character"))(Foreign.readInt(Data_Identity.monadIdentity)));
      };
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(r)("start"))(readPosition))(function (start) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(r)("end"))(readPosition))(function (end) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                  start: start,
                  end: end
              });
          });
      });
  }; 
  var markupContent = function (s) {
      return {
          kind: "markdown",
          value: s
      };
  };
  var line = function (dictStrong) {
      var $130 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $131 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "line";
      }))()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($132) {
          return $130($131($132));
      };
  };
  var fromFileChangeTypeCode = function (v) {
      if (v === 1) {
          return new Data_Maybe.Just(CreatedChangeType.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(ChangedChangeType.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(DeletedChangeType.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var eqPosition = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x.character === y.character && x.line === y.line;
      };
  });
  var eqRange = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return Data_Eq.eq(eqPosition)(v.start)(v1.start) && Data_Eq.eq(eqPosition)(v.end)(v1.end);
      };
  });
  var positionOrd = new Data_Ord.Ord(function () {
      return eqPosition;
  }, function (v) {
      return function (v1) {
          if (v.line < v1.line) {
              return Data_Ordering.LT.value;
          };
          if (v.line === v1.line && v.character < v1.character) {
              return Data_Ordering.LT.value;
          };
          if (v.line === v1.line && v.character === v1.character) {
              return Data_Ordering.EQ.value;
          };
          if (Data_Boolean.otherwise) {
              return Data_Ordering.GT.value;
          };
          throw new Error("Failed pattern match at LanguageServer.Protocol.Types (line 58, column 1 - line 63, column 21): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var ordRange = new Data_Ord.Ord(function () {
      return eqRange;
  }, function (v) {
      return function (v1) {
          return Data_Semigroup.append(Data_Ordering.semigroupOrdering)(Data_Ord.compare(positionOrd)(v.start)(v1.start))(Data_Ord.compare(positionOrd)(v.end)(v1.end));
      };
  });
  var eqDocumentUri = Data_Eq.eqString;
  var eqTextDocumentIdentifier = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(eqDocumentUri)(x.uri)(y.uri) && x.version === y.version;
      };
  });
  var semigroupWorkspaceEdit = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          var goStrMap = function (a) {
              return Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Maybe.fromMaybe(Foreign_Object.empty)(Data_Nullable.toMaybe(a)));
          };
          var fromNullableArray = function (a) {
              return Data_Maybe.fromMaybe([  ])(Data_Nullable.toMaybe(a));
          };
          var docId = function (v2) {
              return v2.textDocument;
          };
          var combine = function (v2) {
              return function (v3) {
                  return {
                      textDocument: v2.textDocument,
                      edits: Data_Semigroup.append(Data_Semigroup.semigroupArray)(v2.edits)(v3.edits)
                  };
              };
          };
          return {
              documentChanges: Data_Nullable.toNullable((function () {
                  var v2 = Data_Nullable.toMaybe(v1.documentChanges);
                  var v3 = Data_Nullable.toMaybe(v.documentChanges);
                  if (v3 instanceof Data_Maybe.Nothing && v2 instanceof Data_Maybe.Nothing) {
                      return Data_Maybe.Nothing.value;
                  };
                  return Data_Maybe.Just.create(Data_Functor.map(Data_Functor.functorArray)(Data_Semigroup_Foldable.foldl1(Data_NonEmpty.foldable1NonEmpty(Data_Foldable.foldableArray))(combine))(Data_Functor.map(Data_Functor.functorArray)(Data_Array_NonEmpty.toNonEmpty)(Data_Array.groupBy(function (d1) {
                      return function (d2) {
                          return Data_Eq.eq(eqTextDocumentIdentifier)(docId(d1))(docId(d2));
                      };
                  })(Data_Semigroup.append(Data_Semigroup.semigroupArray)(fromNullableArray(v.documentChanges))(fromNullableArray(v1.documentChanges))))));
              })()),
              changes: Data_Nullable.toNullable((function () {
                  var v2 = Data_Nullable.toMaybe(v1.changes);
                  var v3 = Data_Nullable.toMaybe(v.changes);
                  if (v3 instanceof Data_Maybe.Nothing && v2 instanceof Data_Maybe.Nothing) {
                      return Data_Maybe.Nothing.value;
                  };
                  return Data_Maybe.Just.create(Foreign_Object.fromFoldableWith(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupArray))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(goStrMap(v.changes))(goStrMap(v1.changes))));
              })())
          };
      };
  });
  var monoidWorkspaceEdit = new Data_Monoid.Monoid(function () {
      return semigroupWorkspaceEdit;
  }, {
      documentChanges: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
      changes: Data_Nullable.toNullable(Data_Maybe.Nothing.value)
  });
  var defaultCompletionItem = function (label) {
      return {
          label: label,
          kind: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
          detail: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
          documentation: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
          sortText: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
          filterText: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
          insertText: Data_Nullable.toNullable(new Data_Maybe.Just(label)),
          textEdit: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
          additionalTextEdits: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
          command: Data_Nullable.toNullable(Data_Maybe.Nothing.value)
      };
  };
  var completionItemKindToInt = function (v) {
      if (v instanceof Text) {
          return 1;
      };
      if (v instanceof Method) {
          return 2;
      };
      if (v instanceof $$Function) {
          return 3;
      };
      if (v instanceof Constructor) {
          return 4;
      };
      if (v instanceof Field) {
          return 5;
      };
      if (v instanceof Variable) {
          return 6;
      };
      if (v instanceof Class) {
          return 7;
      };
      if (v instanceof Interface) {
          return 8;
      };
      if (v instanceof Module) {
          return 9;
      };
      if (v instanceof Property) {
          return 10;
      };
      if (v instanceof Unit) {
          return 11;
      };
      if (v instanceof Value) {
          return 12;
      };
      if (v instanceof Enum) {
          return 13;
      };
      if (v instanceof Keyword) {
          return 14;
      };
      if (v instanceof Snippet) {
          return 15;
      };
      if (v instanceof Color) {
          return 16;
      };
      if (v instanceof File) {
          return 17;
      };
      if (v instanceof Reference) {
          return 18;
      };
      throw new Error("Failed pattern match at LanguageServer.Protocol.Types (line 169, column 27 - line 187, column 18): " + [ v.constructor.name ]);
  };
  var completionItem = function (label) {
      return function (k) {
          return Data_Newtype.over()()(CompletionItem)(function (v) {
              return {
                  kind: Data_Nullable.toNullable(Data_Maybe.Just.create(completionItemKindToInt(k))),
                  additionalTextEdits: v.additionalTextEdits,
                  command: v.command,
                  detail: v.detail,
                  documentation: v.documentation,
                  filterText: v.filterText,
                  insertText: v.insertText,
                  label: v.label,
                  sortText: v.sortText,
                  textEdit: v.textEdit
              };
          })(defaultCompletionItem(label));
      };
  };                              
  var codeActionResult = Data_Either.either(Unsafe_Coerce.unsafeCoerce)(Unsafe_Coerce.unsafeCoerce);
  var codeActionEmpty = "";
  var character = function (dictStrong) {
      var $136 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $137 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "character";
      }))()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($138) {
          return $136($137($138));
      };
  };
  exports["markupContent"] = markupContent;
  exports["DocumentUri"] = DocumentUri;
  exports["Position"] = Position;
  exports["readRange"] = readRange;
  exports["CompletionItem"] = CompletionItem;
  exports["Function"] = $$Function;
  exports["Class"] = Class;
  exports["Interface"] = Interface;
  exports["Module"] = Module;
  exports["Value"] = Value;
  exports["Enum"] = Enum;
  exports["completionItem"] = completionItem;
  exports["ClassSymbolKind"] = ClassSymbolKind;
  exports["PropertySymbolKind"] = PropertySymbolKind;
  exports["FunctionSymbolKind"] = FunctionSymbolKind;
  exports["symbolKindToInt"] = symbolKindToInt;
  exports["codeActionResult"] = codeActionResult;
  exports["workspaceEdit"] = workspaceEdit;
  exports["TextDocumentIdentifier"] = TextDocumentIdentifier;
  exports["CreatedChangeType"] = CreatedChangeType;
  exports["DeletedChangeType"] = DeletedChangeType;
  exports["fromFileChangeTypeCode"] = fromFileChangeTypeCode;
  exports["CodeActionKind"] = CodeActionKind;
  exports["codeActionEmpty"] = codeActionEmpty;
  exports["showDocumentUri"] = showDocumentUri;
  exports["eqDocumentUri"] = eqDocumentUri;
  exports["positionOrd"] = positionOrd;
  exports["eqRange"] = eqRange;
  exports["ordRange"] = ordRange;
  exports["showDiagnostic"] = showDiagnostic;
  exports["semigroupWorkspaceEdit"] = semigroupWorkspaceEdit;
  exports["monoidWorkspaceEdit"] = monoidWorkspaceEdit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.Protocol.Text"] = $PS["LanguageServer.Protocol.Text"] || {};
  var exports = $PS["LanguageServer.Protocol.Text"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_Tuple = $PS["Data.Tuple"];
  var LanguageServer_Protocol_Types = $PS["LanguageServer.Protocol.Types"];                
  var makeWorkspaceEdit = function (capabilities) {
      return function (uri) {
          return function (version) {
              return function (range) {
                  return function (newText) {
                      var textEdit = {
                          range: range,
                          newText: newText
                      };
                      var docid = {
                          uri: uri,
                          version: version
                      };
                      var edit = {
                          textDocument: docid,
                          edits: [ textEdit ]
                      };
                      return LanguageServer_Protocol_Types.workspaceEdit(capabilities)([ edit ]);
                  };
              };
          };
      };
  };
  var makeMinimalWorkspaceEdit = function (clientCapabilities) {
      return function (uri) {
          return function (version) {
              return function (oldText) {
                  return function (newText) {
                      var splitLines = function (t) {
                          return Data_Either.either(Data_Function["const"]([ t ]))(function (r) {
                              return Data_String_Regex.split(r)(t);
                          })(Data_String_Regex.regex("\x0d?\x0a")(Data_String_Regex_Flags.noFlags));
                      };
                      var range = function (text) {
                          return function (l1) {
                              return function (l2) {
                                  return {
                                      start: {
                                          line: l1,
                                          character: 0
                                      },
                                      end: {
                                          line: Data_Array.length(text) - l2 | 0,
                                          character: 0
                                      }
                                  };
                              };
                          };
                      };
                      var newLines = splitLines(newText);
                      var oldLines = (function () {
                          var v = splitLines(oldText);
                          if (Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqString))(Data_Array.last(v))(new Data_Maybe.Just("")) && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(Data_Array.last(newLines))(new Data_Maybe.Just(""))) {
                              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([ "" ]);
                          };
                          return v;
                      })();
                      var oldLen = Data_Array.length(oldLines);
                      var newLen = Data_Array.length(newLines);
                      var lines = function (text) {
                          return function (l1) {
                              return function (l2) {
                                  return Data_Array.slice(l1)(Data_Array.length(text) - l2 | 0)(text);
                              };
                          };
                      };
                      var lastDiff = Data_Array.findIndex(Data_Tuple.uncurry(Data_Eq.notEq(Data_Eq.eqString)))(Data_Array.zip(Data_Array.reverse(oldLines))(Data_Array.reverse(newLines)));
                      var firstDiff = Data_Array.findIndex(Data_Tuple.uncurry(Data_Eq.notEq(Data_Eq.eqString)))(Data_Array.zip(oldLines)(newLines));
                      var e = function (a) {
                          return function (b) {
                              return Data_Maybe.Just.create(makeWorkspaceEdit(clientCapabilities)(uri)(version)(a)(b));
                          };
                      };
                      if (firstDiff instanceof Data_Maybe.Just && (lastDiff instanceof Data_Maybe.Just && (newLen - lastDiff.value0 | 0) >= firstDiff.value0)) {
                          var m$prime = Data_Ord.min(Data_Ord.ordInt)(lastDiff.value0)(oldLen - firstDiff.value0 | 0);
                          return e(range(oldLines)(firstDiff.value0)(m$prime))(Data_String_Common.joinWith("\x0a")(lines(newLines)(firstDiff.value0)(m$prime)) + (function () {
                              var $4 = Data_Array["null"](newLines);
                              if ($4) {
                                  return "";
                              };
                              return "\x0a";
                          })());
                      };
                      if (firstDiff instanceof Data_Maybe.Nothing && (lastDiff instanceof Data_Maybe.Nothing && oldLen === newLen)) {
                          return Data_Maybe.Nothing.value;
                      };
                      return e(range(oldLines)(0)(0))(newText);
                  };
              };
          };
      };
  };
  exports["makeWorkspaceEdit"] = makeWorkspaceEdit;
  exports["makeMinimalWorkspaceEdit"] = makeMinimalWorkspaceEdit;
})(PS);
(function(exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });                                                                                                                                                            
  const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
  const getText = (document) => () => document.getText();
  exports.getText = getText;
  const getTextAtRange = (document) => (range) => () => document.getText(range);
  exports.getTextAtRange = getTextAtRange;
  const getUri = (document) => document.uri;
  exports.getUri = getUri;
  const getLanguageId = (document) => document.languageId;
  const getVersion = (document) => () => document.version;
  exports.getVersion = getVersion;
  const getLineCount = (document) => () => document.lineCount;
  const offsetAtPosition = (document) => (pos) => () => document.offsetAt(pos);
  const positionAtOffset = (document) => (offset) => () => document.positionAt(offset);
  const createTextDocument = (uri) => (languageId) => (version) => (content) => () => vscode_languageserver_textdocument_1.TextDocument.create(uri, languageId, version, content);
})(PS["LanguageServer.Protocol.TextDocument"] = PS["LanguageServer.Protocol.TextDocument"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.Protocol.TextDocument"] = $PS["LanguageServer.Protocol.TextDocument"] || {};
  var exports = $PS["LanguageServer.Protocol.TextDocument"];
  var $foreign = $PS["LanguageServer.Protocol.TextDocument"];
  exports["getText"] = $foreign.getText;
  exports["getUri"] = $foreign.getUri;
  exports["getVersion"] = $foreign.getVersion;
  exports["getTextAtRange"] = $foreign.getTextAtRange;
})(PS);
(function(exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.filenameToUri = exports.uriToFilename = void 0;
  const vscode_uri_1 = require("vscode-uri");
  const uriToFilename = (uri) => () => vscode_uri_1.URI.parse(uri).fsPath;
  exports.uriToFilename = uriToFilename;
  const filenameToUri = (filename) => () => vscode_uri_1.URI.file(filename).toString();
  exports.filenameToUri = filenameToUri;
})(PS["LanguageServer.Protocol.Uri"] = PS["LanguageServer.Protocol.Uri"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.Protocol.Uri"] = $PS["LanguageServer.Protocol.Uri"] || {};
  var exports = $PS["LanguageServer.Protocol.Uri"];
  var $foreign = $PS["LanguageServer.Protocol.Uri"];
  exports["uriToFilename"] = $foreign.uriToFilename;
  exports["filenameToUri"] = $foreign.filenameToUri;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.Imports"] = $PS["LanguageServer.IdePurescript.Imports"] || {};
  var exports = $PS["LanguageServer.IdePurescript.Imports"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Error_Util = $PS["Control.Error.Util"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Foreign = $PS["Foreign"];
  var IdePurescript_Modules = $PS["IdePurescript.Modules"];
  var IdePurescript_PscIde = $PS["IdePurescript.PscIde"];
  var IdePurescript_PscIdeServer = $PS["IdePurescript.PscIdeServer"];
  var LanguageServer_IdePurescript_Config = $PS["LanguageServer.IdePurescript.Config"];
  var LanguageServer_Protocol_DocumentStore = $PS["LanguageServer.Protocol.DocumentStore"];
  var LanguageServer_Protocol_Handlers = $PS["LanguageServer.Protocol.Handlers"];
  var LanguageServer_Protocol_Text = $PS["LanguageServer.Protocol.Text"];
  var LanguageServer_Protocol_TextDocument = $PS["LanguageServer.Protocol.TextDocument"];
  var LanguageServer_Protocol_Types = $PS["LanguageServer.Protocol.Types"];
  var LanguageServer_Protocol_Uri = $PS["LanguageServer.Protocol.Uri"];
  var LanguageServer_Protocol_Window = $PS["LanguageServer.Protocol.Window"];
  var PscIde_Command = $PS["PscIde.Command"];                
  var showNS = function (v) {
      if (v instanceof PscIde_Command.NSValue) {
          return "NSValue";
      };
      if (v instanceof PscIde_Command.NSKind) {
          return "NSKind";
      };
      if (v instanceof PscIde_Command.NSType) {
          return "NSType";
      };
      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Imports (line 72, column 1 - line 72, column 32): " + [ v.constructor.name ]);
  };
  var parseNS = function (v) {
      if (v === "NSValue") {
          return new Data_Maybe.Just(PscIde_Command.NSValue.value);
      };
      if (v === "NSKind") {
          return new Data_Maybe.Just(PscIde_Command.NSKind.value);
      };
      if (v === "NSType") {
          return new Data_Maybe.Just(PscIde_Command.NSType.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var organiseImports = function (log) {
      return function (docs) {
          return function (v) {
              return function (state) {
                  return function (args) {
                      var successResult = Foreign.unsafeToForeign(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
                      var v1 = Data_Functor.map(Data_Functor.functorArray)((function () {
                          var $139 = Foreign.readString(Data_Identity.monadIdentity);
                          return function ($140) {
                              return Control_Monad_Except.runExcept($139($140));
                          };
                      })())(args);
                      if (state.pscIdePort instanceof Data_Maybe.Just && (v1.length === 1 && v1[0] instanceof Data_Either.Right)) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)(v1[0].value0)))(function (maybeDoc) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)((function () {
                                  if (maybeDoc instanceof Data_Maybe.Nothing) {
                                      return Data_Monoid.mempty(Effect_Aff.monoidAff(Data_Monoid.monoidUnit));
                                  };
                                  if (maybeDoc instanceof Data_Maybe.Just) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getVersion(maybeDoc.value0)))(function (version) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getText(maybeDoc.value0)))(function (text) {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Uri.uriToFilename(v1[0].value0)))(function (fileName) {
                                                  return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Modules.organiseModuleImports(function (dictMonadEffect) {
                                                      return log(dictMonadEffect);
                                                  })(state.modules)(state.pscIdePort.value0)(fileName)(text))(function (res) {
                                                      if (res instanceof Data_Maybe.Just) {
                                                          var edit = LanguageServer_Protocol_Text.makeMinimalWorkspaceEdit(state.clientCapabilities)(v1[0].value0)(version)(text)(res.value0.result);
                                                          if (state.connection instanceof Data_Maybe.Just && edit instanceof Data_Maybe.Just) {
                                                              return Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(state.connection.value0)(edit.value0));
                                                          };
                                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                                      };
                                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                                  });
                                              });
                                          });
                                      });
                                  };
                                  throw new Error("Failed pattern match at LanguageServer.IdePurescript.Imports (line 170, column 7 - line 183, column 27): " + [ maybeDoc.constructor.name ]);
                              })())(function () {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(successResult);
                              });
                          });
                      };
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(log(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Info.value)("Invalid args in organise imports " + Data_Show.show(Data_Show.showArray(Data_Either.showEither(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(Data_Show.showString)))(v1))))(function () {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(successResult);
                      });
                  };
              };
          };
      };
  };
  var getAllModules = function (log) {
      return function (v) {
          return function (v1) {
              return function (state) {
                  return function (v2) {
                      if (state.pscIdePort instanceof Data_Maybe.Just) {
                          return Data_Functor.map(Effect_Aff.functorAff)(Foreign.unsafeToForeign)(IdePurescript_PscIde.getAvailableModules(state.pscIdePort.value0));
                      };
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(log(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer["Error"].value)("Fail case")))(function () {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Foreign.unsafeToForeign([  ]));
                      });
                  };
              };
          };
      };
  };
  var addModuleImport$prime = function (log) {
      return function (docs) {
          return function (v) {
              return function (state) {
                  return function (args) {
                      var successResult = Foreign.unsafeToForeign(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
                      var v1 = Data_Functor.map(Data_Functor.functorArray)((function () {
                          var $141 = Foreign.readString(Data_Identity.monadIdentity);
                          return function ($142) {
                              return Control_Monad_Except.runExcept($141($142));
                          };
                      })())(args);
                      if (state.pscIdePort instanceof Data_Maybe.Just && (v1.length === 3 && (v1[0] instanceof Data_Either.Right && v1[2] instanceof Data_Either.Right))) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)(v1[2].value0)))(function (maybeDoc) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)((function () {
                                  if (maybeDoc instanceof Data_Maybe.Nothing) {
                                      return Data_Monoid.mempty(Effect_Aff.monoidAff(Data_Monoid.monoidUnit));
                                  };
                                  if (maybeDoc instanceof Data_Maybe.Just) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getVersion(maybeDoc.value0)))(function (version) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getText(maybeDoc.value0)))(function (text) {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Uri.uriToFilename(v1[2].value0)))(function (fileName) {
                                                  return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Modules.addModuleImport(state.modules)(state.pscIdePort.value0)(fileName)(text)(v1[0].value0))(function (v3) {
                                                      if (v3.result instanceof IdePurescript_Modules.UpdatedImports) {
                                                          var edit = LanguageServer_Protocol_Text.makeMinimalWorkspaceEdit(state.clientCapabilities)(v1[2].value0)(version)(text)(v3.result.value0);
                                                          if (state.connection instanceof Data_Maybe.Just && edit instanceof Data_Maybe.Just) {
                                                              return Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(state.connection.value0)(edit.value0));
                                                          };
                                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                                      };
                                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                                  });
                                              });
                                          });
                                      });
                                  };
                                  throw new Error("Failed pattern match at LanguageServer.IdePurescript.Imports (line 131, column 7 - line 145, column 24): " + [ maybeDoc.constructor.name ]);
                              })())(function () {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(successResult);
                              });
                          });
                      };
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(log(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Info.value)(Data_Show.show(Data_Show.showArray(Data_Either.showEither(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(Data_Show.showString)))(v1))))(function () {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(successResult);
                      });
                  };
              };
          };
      };
  };
  var addCompletionImportEdit = function (log) {
      return function (v) {
          return function (config) {
              return function (v1) {
                  return function (v2) {
                      return function (v3) {
                          return function (version) {
                              return function (text) {
                                  return function (ns) {
                                      var noModule = function (f) {
                                          return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)((function () {
                                              var $143 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(f);
                                              var $144 = Data_Newtype.unwrap();
                                              return function ($145) {
                                                  return $143($144($145));
                                              };
                                          })())(v1.modules.modules);
                                      };
                                      var isSameUnqualified = function (mod$prime) {
                                          return function (v4) {
                                              if (v4.qualifier instanceof Data_Maybe.Nothing) {
                                                  return mod$prime === v4.moduleName;
                                              };
                                              return false;
                                          };
                                      };
                                      var isSameQualified = function (mod$prime) {
                                          return function (qual$prime) {
                                              return function (v4) {
                                                  if (v4.qualifier instanceof Data_Maybe.Just) {
                                                      return mod$prime === v4.moduleName && qual$prime === v4.qualifier.value0;
                                                  };
                                                  return false;
                                              };
                                          };
                                      };
                                      var prelude = LanguageServer_IdePurescript_Config.preludeModule(config);
                                      if (v1.pscIdePort instanceof Data_Maybe.Just) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)((function () {
                                              if (v2.mod instanceof Data_Maybe.Just && (v2.qual instanceof Data_Maybe.Just && noModule(isSameQualified(v2.mod.value0)(v2.qual.value0)))) {
                                                  return IdePurescript_Modules.addQualifiedImport(v1.modules)(v1.pscIdePort.value0)(Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)(v2.uri))(text)(v2.mod.value0)(v2.qual.value0);
                                              };
                                              if (v2.mod instanceof Data_Maybe.Just && (v2.qual instanceof Data_Maybe.Nothing && (v2.mod.value0 === prelude && noModule(isSameUnqualified(prelude))))) {
                                                  return IdePurescript_Modules.addModuleImport(v1.modules)(v1.pscIdePort.value0)(Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)(v2.uri))(text)(v2.mod.value0);
                                              };
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(log(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Info.value)("Adding import of " + (v2.identifier + (" from " + (Data_Show.show(Data_Maybe.showMaybe(Data_Show.showString))(v2.mod) + (" with type filter " + Data_Show.show(Data_Maybe.showMaybe(Data_Show.showString))(Data_Functor.map(Data_Maybe.functorMaybe)(showNS)(ns)))))))))(function () {
                                                  return IdePurescript_Modules.addExplicitImport(v1.modules)(v1.pscIdePort.value0)(Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)(v2.uri))(text)(v2.mod)(v2.qual)(v2.identifier)(ns);
                                              });
                                          })())(function (v4) {
                                              if (v4.result instanceof IdePurescript_Modules.UpdatedImports) {
                                                  var edit = LanguageServer_Protocol_Text.makeMinimalWorkspaceEdit(v1.clientCapabilities)(v2.uri)(version)(text)(v4.result.value0);
                                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Either.Right.create(Data_Maybe.maybe([  ])(Data_Array.singleton)(edit)));
                                              };
                                              if (v4.result instanceof IdePurescript_Modules.AmbiguousImport) {
                                                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                                      Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v1.connection)(function (v5) {
                                                          return LanguageServer_Protocol_Window.showError(v5)("Could not import " + (text + " because there is more than one option"));
                                                      }))();
                                                      log(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Warning.value)("Found ambiguous imports")();
                                                      return Data_Either.Left.create(Foreign.unsafeToForeign(Data_Functor.map(Data_Functor.functorArray)(function (v5) {
                                                          return v5["module'"];
                                                      })(v4.result.value0)));
                                                  });
                                              };
                                              if (v4.result instanceof IdePurescript_Modules.UnnecessaryImport) {
                                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Right([  ]));
                                              };
                                              if (v4.result instanceof IdePurescript_Modules.FailedImport) {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v1.connection)(function (v5) {
                                                      return LanguageServer_Protocol_Window.showError(v5)("Failed to import: `" + (v2.identifier + ("`. Error: " + v4.result.value0)));
                                                  })))(function () {
                                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Right([  ]));
                                                  });
                                              };
                                              throw new Error("Failed pattern match at LanguageServer.IdePurescript.Imports (line 94, column 7 - line 111, column 26): " + [ v4.result.constructor.name ]);
                                          });
                                      };
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Right([  ]));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var addCompletionImport$prime = function (existingEdit) {
      return function (log) {
          return function (docs) {
              return function (config) {
                  return function (v) {
                      return function (args) {
                          var shouldAddImport = LanguageServer_IdePurescript_Config.autocompleteAddImport(config);
                          var v2 = Data_Functor.map(Data_Functor.functorArray)((function () {
                              var $146 = Foreign.readString(Data_Identity.monadIdentity);
                              return function ($147) {
                                  return Control_Monad_Except.runExcept($146($147));
                              };
                          })())(args);
                          if (v.connection instanceof Data_Maybe.Just && (v2.length === 5 && (v2[0] instanceof Data_Either.Right && (v2[3] instanceof Data_Either.Right && (v2[4] instanceof Data_Either.Right && shouldAddImport))))) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)(v2[3].value0)))(function (maybeDoc) {
                                  if (maybeDoc instanceof Data_Maybe.Nothing) {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Foreign.unsafeToForeign(Data_Nullable.toNullable(Data_Maybe.Nothing.value)));
                                  };
                                  if (maybeDoc instanceof Data_Maybe.Just) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getVersion(maybeDoc.value0)))(function (version) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getText(maybeDoc.value0)))(function (text) {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(addCompletionImportEdit(function (dictMonadEffect) {
                                                  return log(dictMonadEffect);
                                              })(docs)(config)(v)({
                                                  identifier: v2[0].value0,
                                                  mod: Control_Error_Util.hush(v2[1]),
                                                  qual: Control_Error_Util.hush(v2[2]),
                                                  uri: v2[3].value0
                                              })(maybeDoc.value0)(version)(text)(parseNS(v2[4].value0)))(function (edit) {
                                                  if (edit instanceof Data_Either.Right) {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(v.connection.value0)(Data_Array.fold(LanguageServer_Protocol_Types.monoidWorkspaceEdit)(Data_Array.cons(existingEdit)(edit.value0)))))(function () {
                                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Foreign.unsafeToForeign(Data_Nullable.toNullable(Data_Maybe.Nothing.value)));
                                                      });
                                                  };
                                                  if (edit instanceof Data_Either.Left) {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(v.connection.value0)(existingEdit)))(function () {
                                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(edit.value0);
                                                      });
                                                  };
                                                  throw new Error("Failed pattern match at LanguageServer.IdePurescript.Imports (line 46, column 11 - line 52, column 23): " + [ edit.constructor.name ]);
                                              });
                                          });
                                      });
                                  };
                                  throw new Error("Failed pattern match at LanguageServer.IdePurescript.Imports (line 40, column 7 - line 52, column 23): " + [ maybeDoc.constructor.name ]);
                              });
                          };
                          if (v.connection instanceof Data_Maybe.Just) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(v.connection.value0)(existingEdit)))(function () {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Foreign.unsafeToForeign(Data_Nullable.toNullable(Data_Maybe.Nothing.value)));
                              });
                          };
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Foreign.unsafeToForeign(Data_Nullable.toNullable(Data_Maybe.Nothing.value)));
                      };
                  };
              };
          };
      };
  };
  var addCompletionImport = addCompletionImport$prime(Data_Monoid.mempty(LanguageServer_Protocol_Types.monoidWorkspaceEdit));
  exports["addCompletionImport"] = addCompletionImport;
  exports["addCompletionImport'"] = addCompletionImport$prime;
  exports["showNS"] = showNS;
  exports["addCompletionImportEdit"] = addCompletionImportEdit;
  exports["addModuleImport'"] = addModuleImport$prime;
  exports["getAllModules"] = getAllModules;
  exports["organiseImports"] = organiseImports;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.Assist"] = $PS["LanguageServer.IdePurescript.Assist"] || {};
  var exports = $PS["LanguageServer.IdePurescript.Assist"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Foreign_NullOrUndefined = $PS["Foreign.NullOrUndefined"];
  var IdePurescript_Completion = $PS["IdePurescript.Completion"];
  var IdePurescript_PscIde = $PS["IdePurescript.PscIde"];
  var IdePurescript_Tokens = $PS["IdePurescript.Tokens"];
  var LanguageServer_IdePurescript_Commands = $PS["LanguageServer.IdePurescript.Commands"];
  var LanguageServer_IdePurescript_Imports = $PS["LanguageServer.IdePurescript.Imports"];
  var LanguageServer_Protocol_Console = $PS["LanguageServer.Protocol.Console"];
  var LanguageServer_Protocol_DocumentStore = $PS["LanguageServer.Protocol.DocumentStore"];
  var LanguageServer_Protocol_Handlers = $PS["LanguageServer.Protocol.Handlers"];
  var LanguageServer_Protocol_Text = $PS["LanguageServer.Protocol.Text"];
  var LanguageServer_Protocol_TextDocument = $PS["LanguageServer.Protocol.TextDocument"];
  var LanguageServer_Protocol_Types = $PS["LanguageServer.Protocol.Types"];
  var PscIde = $PS["PscIde"];
  var PscIde_Command = $PS["PscIde.Command"];
  var simplifyImportChoice = function (before) {
      var isType = function (v) {
          if (v.declarationType instanceof Data_Maybe.Just && v.declarationType.value0 instanceof PscIde_Command.DeclType) {
              return true;
          };
          return false;
      };
      var isDataConstructor = function (v) {
          if (v.declarationType instanceof Data_Maybe.Just && v.declarationType.value0 instanceof PscIde_Command.DeclDataConstructor) {
              return true;
          };
          if (v.declarationType instanceof Data_Maybe.Just && (v.declarationType.value0 instanceof PscIde_Command.DeclValue && IdePurescript_Tokens.startsWithCapitalLetter(v.identifier))) {
              return true;
          };
          return false;
      };
      var isTheSameButDataConstructor = function (v) {
          return function (v1) {
              return v.identifier === v1.identifier && (v["module'"] === v1["module'"] && isDataConstructor(v1));
          };
      };
      var go = function (acc) {
          return function (info) {
              var $44 = isType(info) && Data_Array.any(isTheSameButDataConstructor(info))(before);
              if ($44) {
                  return acc;
              };
              return Data_Array.snoc(acc)(info);
          };
      };
      return Data_Array.foldl(go)([  ])(before);
  };
  var lineRange = function (pos) {
      return {
          start: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function (v) {
              return {
                  character: 0,
                  line: v.line
              };
          })(pos),
          end: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function (v) {
              return {
                  character: Data_Bounded.top(Data_Bounded.boundedInt),
                  line: v.line
              };
          })(pos)
      };
  };
  var lineRange$prime = function (line) {
      return function (character) {
          return lineRange({
              line: line,
              character: character
          });
      };
  };
  var fillTypedHole = function (logFn) {
      return function (docs) {
          return function (settings) {
              return function (state) {
                  return function (args) {
                      var readTypeInfo = function (obj) {
                          return Foreign.unsafeFromForeign(obj);
                      };
                      var v = function (v1) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(Data_Function.flip(LanguageServer_Protocol_Console.log)("fail match"))(state.connection)))(function () {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                          });
                      };
                      if (state.connection instanceof Data_Maybe.Just && args.length === 4) {
                          var $48 = Control_Monad_Except.runExcept(LanguageServer_Protocol_Types.readRange(args[2]));
                          if ($48 instanceof Data_Either.Right) {
                              var $49 = Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[1]));
                              if ($49 instanceof Data_Either.Right) {
                                  var $50 = readTypeInfo(args[3]);
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)($49.value0)))(function (maybeDoc) {
                                      if (maybeDoc instanceof Data_Maybe.Nothing) {
                                          return Data_Monoid.mempty(Effect_Aff.monoidAff(Data_Monoid.monoidUnit));
                                      };
                                      if (maybeDoc instanceof Data_Maybe.Just) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getVersion(maybeDoc.value0)))(function (version) {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getText(maybeDoc.value0)))(function (text) {
                                                  var edit = LanguageServer_Protocol_Text.makeWorkspaceEdit(state.clientCapabilities)($49.value0)(version)($48.value0)($50.identifier);
                                                  return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Either.either(Data_Function["const"]([  ]))(Control_Category.identity(Control_Category.categoryFn)))(LanguageServer_IdePurescript_Imports.addCompletionImportEdit(function (dictMonadEffect) {
                                                      return logFn(dictMonadEffect);
                                                  })(docs)(settings)(state)({
                                                      identifier: $50.identifier,
                                                      mod: new Data_Maybe.Just($50["module'"]),
                                                      qual: Data_Maybe.Nothing.value,
                                                      uri: $49.value0
                                                  })(maybeDoc.value0)(version)(text)(Data_Maybe.Nothing.value)))(function (edit$prime) {
                                                      var edit2 = Data_Semigroup.append(LanguageServer_Protocol_Types.semigroupWorkspaceEdit)(edit)(Data_Array.fold(LanguageServer_Protocol_Types.monoidWorkspaceEdit)(edit$prime));
                                                      return Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_Protocol_Handlers.applyEdit(state.connection.value0)(edit2))(function (applyRes) {
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(state.connection.value0)("Applied: " + Data_Show.show(Data_Show.showBoolean)(applyRes))))(function () {
                                                              return Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_IdePurescript_Imports.addCompletionImport(function (dictMonadEffect) {
                                                                  return logFn(dictMonadEffect);
                                                              })(docs)(settings)(state)([ Foreign.unsafeToForeign($50.identifier), Foreign.unsafeToForeign($50["module'"]), Foreign.unsafeToForeign(Data_Maybe.Nothing.value), Foreign.unsafeToForeign($49.value0) ]))(function () {
                                                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      };
                                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Assist (line 231, column 7 - line 246, column 20): " + [ maybeDoc.constructor.name ]);
                                  });
                              };
                              return v(true);
                          };
                          return v(true);
                      };
                      return v(true);
                  };
              };
          };
      };
  };
  var encodeTypoResult = Foreign.unsafeToForeign;
  var fixTypoActions = function (docs) {
      return function (v) {
          return function (v1) {
              return function (docUri) {
                  return function (line) {
                      return function ($$char) {
                          var renderDeclarationType = function (type$prime) {
                              return function (identifier) {
                                  return function (v2) {
                                      if (v2 instanceof Data_Maybe.Nothing) {
                                          return " : ";
                                      };
                                      if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof PscIde_Command.DeclTypeOperator) {
                                          return " type-level operator: ";
                                      };
                                      if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof PscIde_Command.DeclType) {
                                          return " type: ";
                                      };
                                      if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof PscIde_Command.DeclTypeSynonym) {
                                          return " type synonym: ";
                                      };
                                      if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof PscIde_Command.DeclDataConstructor) {
                                          return " data constructor: ";
                                      };
                                      if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof PscIde_Command.DeclTypeClass) {
                                          return " type class: ";
                                      };
                                      if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof PscIde_Command.DeclValueOperator) {
                                          return " operator: ";
                                      };
                                      if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof PscIde_Command.DeclModule) {
                                          return " module: ";
                                      };
                                      if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof PscIde_Command.DeclValue) {
                                          var $78 = IdePurescript_Tokens.startsWithCapitalLetter(identifier);
                                          if ($78) {
                                              return " data constructor: ";
                                          };
                                          var $79 = IdePurescript_Tokens.containsArrow(type$prime);
                                          if ($79) {
                                              return " function: ";
                                          };
                                          return " value: ";
                                      };
                                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Assist (line 146, column 48 - line 160, column 21): " + [ v2.constructor.name ]);
                                  };
                              };
                          };
                          if (v1.pscIdePort instanceof Data_Maybe.Just) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)(docUri)))(function (maybeDoc) {
                                  if (maybeDoc instanceof Data_Maybe.Nothing) {
                                      return Data_Monoid.mempty(Effect_Aff.monoidAff(Data_Monoid.monoidArray));
                                  };
                                  if (maybeDoc instanceof Data_Maybe.Just) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtRange(maybeDoc.value0)(lineRange$prime(line)($$char))))(function (lineText) {
                                          var v2 = IdePurescript_Tokens.identifierAtPoint(lineText)($$char);
                                          if (v2 instanceof Data_Maybe.Nothing) {
                                              return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
                                          };
                                          if (v2 instanceof Data_Maybe.Just) {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(PscIde.suggestTypos(v1.pscIdePort.value0)(v2.value0.word)(2)(v1.modules.main)(PscIde.defaultCompletionOptions))(function (res) {
                                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)((function () {
                                                      if (res instanceof Data_Either.Left) {
                                                          return [  ];
                                                      };
                                                      if (res instanceof Data_Either.Right) {
                                                          return Data_Array.take(10)(Data_Functor.mapFlipped(Data_Functor.functorArray)(simplifyImportChoice(res.value0))(function (v3) {
                                                              return LanguageServer_IdePurescript_Commands["fixTypo'"]((function () {
                                                                  var decTypeString = renderDeclarationType(v3["type'"])(v3.identifier)(v3.declarationType);
                                                                  var $87 = v3.identifier === v2.value0.word;
                                                                  if ($87) {
                                                                      return "Import" + (decTypeString + (v3.identifier + (" (" + (v3["module'"] + ")"))));
                                                                  };
                                                                  return "Replace with " + (v3.identifier + (" (" + (v3["module'"] + ")")));
                                                              })())(docUri)(line)($$char)(encodeTypoResult({
                                                                  identifier: v3.identifier,
                                                                  mod: v3["module'"],
                                                                  declarationType: Data_Maybe.maybe("")(PscIde_Command.declarationTypeToString)(v3.declarationType)
                                                              }));
                                                          }));
                                                      };
                                                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Assist (line 128, column 22 - line 143, column 28): " + [ res.constructor.name ]);
                                                  })());
                                              });
                                          };
                                          throw new Error("Failed pattern match at LanguageServer.IdePurescript.Assist (line 124, column 11 - line 143, column 28): " + [ v2.constructor.name ]);
                                      });
                                  };
                                  throw new Error("Failed pattern match at LanguageServer.IdePurescript.Assist (line 120, column 7 - line 143, column 28): " + [ maybeDoc.constructor.name ]);
                              });
                          };
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
                      };
                  };
              };
          };
      };
  };
  var decodeTypoResult = function (obj) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(obj)("identifier"))(Foreign.readString(Data_Identity.monadIdentity)))(function (identifier) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(obj)("mod"))(Foreign.readString(Data_Identity.monadIdentity)))(function (mod) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Maybe.fromMaybe(""))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(obj)("declarationType"))(Foreign_NullOrUndefined.readNullOrUndefined(Foreign.readString(Data_Identity.monadIdentity)))))(function (declarationType) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                      identifier: identifier,
                      mod: mod,
                      declarationType: declarationType
                  });
              });
          });
      });
  };
  var fixTypo = function (log) {
      return function (docs) {
          return function (settings) {
              return function (v) {
                  return function (args) {
                      var replace = function (uri) {
                          return function (version) {
                              return function (line) {
                                  return function (v1) {
                                      return function (word) {
                                          return function (mod) {
                                              return function (declarationType) {
                                                  var range = {
                                                      start: {
                                                          line: line,
                                                          character: v1.left
                                                      },
                                                      end: {
                                                          line: line,
                                                          character: v1.right
                                                      }
                                                  };
                                                  var namespace = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(IdePurescript_Completion.declarationTypeToNamespace)(PscIde_Command.declarationTypeFromString(declarationType));
                                                  var edit = LanguageServer_Protocol_Text.makeWorkspaceEdit(v.clientCapabilities)(uri)(version)(range)(word);
                                                  return LanguageServer_IdePurescript_Imports["addCompletionImport'"](edit)(function (dictMonadEffect) {
                                                      return log(dictMonadEffect);
                                                  })(docs)(settings)(v)([ Foreign.unsafeToForeign(word), Foreign.unsafeToForeign(mod), Foreign.unsafeToForeign(Data_Maybe.Nothing.value), Foreign.unsafeToForeign(uri), Foreign.unsafeToForeign(Data_Maybe.maybe("")(LanguageServer_IdePurescript_Imports.showNS)(namespace)) ]);
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                      return Data_Functor.map(Effect_Aff.functorAff)(Foreign.unsafeToForeign)((function () {
                          var v1 = Data_Array.index(args)(2);
                          var v2 = Data_Array.index(args)(1);
                          var v3 = Data_Array.index(args)(0);
                          var v4 = function (v5) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                          };
                          if (v3 instanceof Data_Maybe.Just && (v2 instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just)) {
                              var $116 = Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(v3.value0));
                              if ($116 instanceof Data_Either.Right) {
                                  var $117 = Control_Monad_Except.runExcept(Foreign.readInt(Data_Identity.monadIdentity)(v2.value0));
                                  if ($117 instanceof Data_Either.Right) {
                                      var $118 = Control_Monad_Except.runExcept(Foreign.readInt(Data_Identity.monadIdentity)(v1.value0));
                                      if ($118 instanceof Data_Either.Right) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)($116.value0)))(function (maybeDoc) {
                                              if (maybeDoc instanceof Data_Maybe.Nothing) {
                                                  return Data_Monoid.mempty(Effect_Aff.monoidAff(Data_Monoid.monoidUnit));
                                              };
                                              if (maybeDoc instanceof Data_Maybe.Just) {
                                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtRange(maybeDoc.value0)(lineRange$prime($117.value0)($118.value0))))(function (lineText) {
                                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getVersion(maybeDoc.value0)))(function (version) {
                                                          var v5 = Data_Functor.map(Data_Maybe.functorMaybe)(function ($195) {
                                                              return Control_Monad_Except.runExcept(decodeTypoResult($195));
                                                          })(Data_Array.index(args)(3));
                                                          var v6 = IdePurescript_Tokens.identifierAtPoint(lineText)($118.value0);
                                                          if (v6 instanceof Data_Maybe.Just && (v5 instanceof Data_Maybe.Just && v5.value0 instanceof Data_Either.Right)) {
                                                              return Data_Functor["void"](Effect_Aff.functorAff)(replace($116.value0)(version)($117.value0)(v6.value0.range)(v5.value0.value0.identifier)(v5.value0.value0.mod)(v5.value0.value0.declarationType));
                                                          };
                                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                                      });
                                                  });
                                              };
                                              throw new Error("Failed pattern match at LanguageServer.IdePurescript.Assist (line 200, column 9 - line 208, column 34): " + [ maybeDoc.constructor.name ]);
                                          });
                                      };
                                      return v4(true);
                                  };
                                  return v4(true);
                              };
                              return v4(true);
                          };
                          return v4(true);
                      })());
                  };
              };
          };
      };
  };
  var caseSplit = function (docs) {
      return function (v) {
          return function (state) {
              return function (args) {
                  var v1 = function (v2) {
                      if (state.connection instanceof Data_Maybe.Just && args.length === 4) {
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(state.connection.value0)(Data_Show.show(Data_Show.showArray(Data_Show.showString))([ Data_Show.show(Data_Either.showEither(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(Data_Show.showString))(Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[0]))), Data_Show.show(Data_Either.showEither(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(Data_Show.showInt))(Control_Monad_Except.runExcept(Foreign.readInt(Data_Identity.monadIdentity)(args[1]))), Data_Show.show(Data_Either.showEither(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(Data_Show.showInt))(Control_Monad_Except.runExcept(Foreign.readInt(Data_Identity.monadIdentity)(args[2]))), Data_Show.show(Data_Either.showEither(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(Data_Show.showString))(Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[3]))) ])));
                      };
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(Data_Function.flip(LanguageServer_Protocol_Console.log)("fail match"))(state.connection)))(function () {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                      });
                  };
                  if (state.pscIdePort instanceof Data_Maybe.Just && (state.connection instanceof Data_Maybe.Just && args.length === 4)) {
                      var $149 = Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[0]));
                      if ($149 instanceof Data_Either.Right) {
                          var $150 = Control_Monad_Except.runExcept(Foreign.readInt(Data_Identity.monadIdentity)(args[1]));
                          if ($150 instanceof Data_Either.Right) {
                              var $151 = Control_Monad_Except.runExcept(Foreign.readInt(Data_Identity.monadIdentity)(args[2]));
                              if ($151 instanceof Data_Either.Right) {
                                  var $152 = Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[3]));
                                  if ($152 instanceof Data_Either.Right) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)($149.value0)))(function (maybeDoc) {
                                          if (maybeDoc instanceof Data_Maybe.Nothing) {
                                              return Data_Monoid.mempty(Effect_Aff.monoidAff(Data_Monoid.monoidUnit));
                                          };
                                          if (maybeDoc instanceof Data_Maybe.Just) {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtRange(maybeDoc.value0)(lineRange$prime($150.value0)($151.value0))))(function (lineText) {
                                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getVersion(maybeDoc.value0)))(function (version) {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)((function () {
                                                          var v2 = IdePurescript_Tokens.identifierAtPoint(lineText)($151.value0);
                                                          if (v2 instanceof Data_Maybe.Just) {
                                                              return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.eitherToErr(PscIde.caseSplit(state.pscIdePort.value0)(lineText)(v2.value0.range.left)(v2.value0.range.right)(false)($152.value0)))(function (lines) {
                                                                  var edit = LanguageServer_Protocol_Text.makeWorkspaceEdit(state.clientCapabilities)($149.value0)(version)(lineRange$prime($150.value0)($151.value0))(Data_Array.intercalate(Data_Monoid.monoidString)("\x0a")(Data_Functor.map(Data_Functor.functorArray)(Data_String_Common.trim)(lines)));
                                                                  return Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(state.connection.value0)(edit));
                                                              });
                                                          };
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(state.connection.value0)("fail identifier")))(function () {
                                                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                                          });
                                                      })())(function () {
                                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                                      });
                                                  });
                                              });
                                          };
                                          throw new Error("Failed pattern match at LanguageServer.IdePurescript.Assist (line 53, column 13 - line 65, column 26): " + [ maybeDoc.constructor.name ]);
                                      });
                                  };
                                  return v1(true);
                              };
                              return v1(true);
                          };
                          return v1(true);
                      };
                      return v1(true);
                  };
                  return v1(true);
              };
          };
      };
  };
  var addClause = function (docs) {
      return function (v) {
          return function (state) {
              return function (args) {
                  var v1 = function (v2) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                  };
                  if (state.pscIdePort instanceof Data_Maybe.Just && (state.connection instanceof Data_Maybe.Just && args.length === 3)) {
                      var $177 = Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[0]));
                      if ($177 instanceof Data_Either.Right) {
                          var $178 = Control_Monad_Except.runExcept(Foreign.readInt(Data_Identity.monadIdentity)(args[1]));
                          if ($178 instanceof Data_Either.Right) {
                              var $179 = Control_Monad_Except.runExcept(Foreign.readInt(Data_Identity.monadIdentity)(args[2]));
                              if ($179 instanceof Data_Either.Right) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)($177.value0)))(function (maybeDoc) {
                                      if (maybeDoc instanceof Data_Maybe.Nothing) {
                                          return Data_Monoid.mempty(Effect_Aff.monoidAff(Data_Monoid.monoidUnit));
                                      };
                                      if (maybeDoc instanceof Data_Maybe.Just) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtRange(maybeDoc.value0)(lineRange$prime($178.value0)($179.value0))))(function (lineText) {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getVersion(maybeDoc.value0)))(function (version) {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)((function () {
                                                      var v2 = IdePurescript_Tokens.identifierAtPoint(lineText)($179.value0);
                                                      if (v2 instanceof Data_Maybe.Just) {
                                                          return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.eitherToErr(PscIde.addClause(state.pscIdePort.value0)(lineText)(false)))(function (lines) {
                                                              var edit = LanguageServer_Protocol_Text.makeWorkspaceEdit(state.clientCapabilities)($177.value0)(version)(lineRange$prime($178.value0)($179.value0))(Data_Array.intercalate(Data_Monoid.monoidString)("\x0a")(Data_Functor.map(Data_Functor.functorArray)(Data_String_Common.trim)(lines)));
                                                              return Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(state.connection.value0)(edit));
                                                          });
                                                      };
                                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                                  })())(function () {
                                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                                  });
                                              });
                                          });
                                      };
                                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Assist (line 82, column 13 - line 94, column 26): " + [ maybeDoc.constructor.name ]);
                                  });
                              };
                              return v1(true);
                          };
                          return v1(true);
                      };
                      return v1(true);
                  };
                  return v1(true);
              };
          };
      };
  };
  exports["lineRange'"] = lineRange$prime;
  exports["caseSplit"] = caseSplit;
  exports["addClause"] = addClause;
  exports["fixTypoActions"] = fixTypoActions;
  exports["fixTypo"] = fixTypo;
  exports["fillTypedHole"] = fillTypedHole;
})(PS);
(function(exports) {
  exports.parseShellQuote = function (str) {
      return require('shell-quote').parse(str);
  };
})(PS["LanguageServer.IdePurescript.Build"] = PS["LanguageServer.IdePurescript.Build"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.Server"] = $PS["LanguageServer.IdePurescript.Server"] || {};
  var exports = $PS["LanguageServer.IdePurescript.Server"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Regex_Unsafe = $PS["Data.String.Regex.Unsafe"];
  var Data_String_Utils = $PS["Data.String.Utils"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var IdePurescript_Exec = $PS["IdePurescript.Exec"];
  var IdePurescript_PscIdeServer = $PS["IdePurescript.PscIdeServer"];
  var LanguageServer_IdePurescript_Config = $PS["LanguageServer.IdePurescript.Config"];
  var Node_Buffer = $PS["Node.Buffer"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_ChildProcess = $PS["Node.ChildProcess"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_Process = $PS["Node.Process"];
  var PscIde = $PS["PscIde"];                
  var retry = function (v) {
      return function (v1) {
          return function (a) {
              if (v1 > 0) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(a))(function (res) {
                      if (res instanceof Data_Either.Right) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(res.value0);
                      };
                      if (res instanceof Data_Either.Left) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(v(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Info.value)("Retrying starting server after 500ms: " + Data_Show.show(Effect_Exception.showError)(res.value0))))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(500.0))(function () {
                                  return retry(function (dictMonadEffect) {
                                      return v(dictMonadEffect);
                                  })(v1 - 1 | 0)(a);
                              });
                          });
                      };
                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Server (line 36, column 5 - line 41, column 37): " + [ res.constructor.name ]);
                  });
              };
              return a;
          };
      };
  };
  var loadAll = function (port) {
      return Data_Functor.map(Effect_Aff.functorAff)(Data_Either.either(Data_Either.Left.create)(Data_Function["const"](new Data_Either.Right(Data_Unit.unit))))(PscIde.load(port)([  ])([  ]));
  };
  var getPackagerPaths = function (enabled) {
      return function (binName) {
          return function (settings) {
              return function (root) {
                  var $16 = !enabled(settings);
                  if ($16) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
                  };
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(IdePurescript_Exec.getPathVar(LanguageServer_IdePurescript_Config.addNpmPath(settings))(root)))(function (pathVar) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Exec.findBins(pathVar)(binName))(function (serverBins) {
                          var v = Data_Array.head(serverBins);
                          if (v instanceof Data_Maybe.Just) {
                              return Effect_Aff.makeAff(function (cb) {
                                  return function __do() {
                                      Data_Functor["void"](Effect.functorEffect)(Node_ChildProcess.execFile(v.value0.value0)([ "sources" ])({
                                          cwd: new Data_Maybe.Just(root),
                                          env: Node_ChildProcess.defaultExecOptions.env,
                                          timeout: Node_ChildProcess.defaultExecOptions.timeout,
                                          maxBuffer: Node_ChildProcess.defaultExecOptions.maxBuffer,
                                          killSignal: Node_ChildProcess.defaultExecOptions.killSignal,
                                          uid: Node_ChildProcess.defaultExecOptions.uid,
                                          gid: Node_ChildProcess.defaultExecOptions.gid
                                      })(function (v1) {
                                          return function __do() {
                                              var text = Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(Node_Encoding.UTF8.value)(v1.stdout)();
                                              return cb(Control_Applicative.pure(Data_Either.applicativeEither)(Data_String_Utils.lines(text)))();
                                          };
                                      }))();
                                      return Data_Monoid.mempty(Effect_Aff.monoidCanceler);
                                  };
                              });
                          };
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
                      });
                  });
              };
          };
      };
  };
  var getEnvPursIdeSources = function (dictMonadEffect) {
      return Effect_Class.liftEffect(dictMonadEffect)(Node_Process.lookupEnv("PURS_IDE_SOURCES"));
  };
  var startServer$prime = function (settings) {
      return function (root) {
          return function (cb) {
              return function (logCb) {
                  var getGlob = function (fn) {
                      return (function (v) {
                          if (!Data_String_Common["null"](v)) {
                              return [ v + "/**/*.purs" ];
                          };
                          return [  ];
                      })(fn(settings));
                  };
                  var globs = Data_Semigroup.append(Data_Semigroup.semigroupArray)(getGlob(LanguageServer_IdePurescript_Config.srcPath))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(getGlob(LanguageServer_IdePurescript_Config.packagePath))(LanguageServer_IdePurescript_Config.sourceGlobs(settings)));
                  var exe = LanguageServer_IdePurescript_Config.pursExe(settings);
                  return Control_Bind.bind(Effect_Aff.bindAff)(getEnvPursIdeSources(Effect_Aff.monadEffectAff))(function (envIdeSources) {
                      return Control_Bind.bind(Effect_Aff.bindAff)((function () {
                          if (envIdeSources instanceof Data_Maybe.Just) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logCb(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Info.value)("Using sources from PURS_IDE_SOURCES")))(function () {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_String_Regex.split(Data_String_Regex_Unsafe.unsafeRegex("[\\r\\n\\s]+")(Data_String_Regex_Flags.noFlags))(envIdeSources.value0));
                              });
                          };
                          if (envIdeSources instanceof Data_Maybe.Nothing) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logCb(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Info.value)("Using sources from psc-package/spago packages (PURS_IDE_SOURCES not set)")))(function () {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(getPackagerPaths(LanguageServer_IdePurescript_Config.addPscPackageSources)("psc-package")(settings)(root))(function (pscpGlob) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(getPackagerPaths(LanguageServer_IdePurescript_Config.addSpagoSources)("spago")(settings)(root))(function (spagoGlob) {
                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(pscpGlob)(spagoGlob));
                                      });
                                  });
                              });
                          };
                          throw new Error("Failed pattern match at LanguageServer.IdePurescript.Server (line 50, column 19 - line 58, column 35): " + [ envIdeSources.constructor.name ]);
                      })())(function (packageGlobs) {
                          return IdePurescript_PscIdeServer["startServer'"]({
                              exe: exe,
                              combinedExe: true,
                              glob: Data_Array.filter((function () {
                                  var $26 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                                  return function ($27) {
                                      return $26(Data_String_Common["null"]($27));
                                  };
                              })())(Data_Semigroup.append(Data_Semigroup.semigroupArray)(globs)(packageGlobs)),
                              logLevel: LanguageServer_IdePurescript_Config.logLevel(settings),
                              editorMode: LanguageServer_IdePurescript_Config.editorMode(settings),
                              polling: LanguageServer_IdePurescript_Config.polling(settings),
                              outputDirectory: Data_Maybe.Just.create(LanguageServer_IdePurescript_Config.effectiveOutputDirectory(settings)),
                              port: LanguageServer_IdePurescript_Config.pscIdePort(settings)
                          })(root)(LanguageServer_IdePurescript_Config.addNpmPath(settings))(function (dictMonadEffect) {
                              return cb(dictMonadEffect);
                          })(function (dictMonadEffect) {
                              return logCb(dictMonadEffect);
                          });
                      });
                  });
              };
          };
      };
  };
  exports["loadAll"] = loadAll;
  exports["retry"] = retry;
  exports["getEnvPursIdeSources"] = getEnvPursIdeSources;
  exports["startServer'"] = startServer$prime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.Util.Position"] = $PS["LanguageServer.IdePurescript.Util.Position"] || {};
  var exports = $PS["LanguageServer.IdePurescript.Util.Position"];
  var Data_Lens_Iso_Newtype = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Record = $PS["Data.Lens.Record"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Type_Proxy = $PS["Type.Proxy"];
  var convertPosition = function (v) {
      return {
          line: v.line - 1 | 0,
          character: v.column - 1 | 0
      };
  };
  var convertRangePosition = function (v) {
      return {
          start: convertPosition({
              line: v.startLine,
              column: v.startColumn
          }),
          end: convertPosition({
              line: v.endLine,
              column: v.endColumn
          })
      };
  };
  var convertTypePosition = function (v) {
      return {
          start: convertPosition(v.start),
          end: convertPosition(v.end)
      };
  };   
  var _character = function (dictStrong) {
      var $49 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $50 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "character";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($51) {
          return $49($50($51));
      };
  };
  var shiftPositionRight = function (by) {
      return Data_Lens_Setter.over(_character(Data_Profunctor_Strong.strongFn))(function (v) {
          return v + by | 0;
      });
  };
  exports["shiftPositionRight"] = shiftPositionRight;
  exports["convertPosition"] = convertPosition;
  exports["convertTypePosition"] = convertTypePosition;
  exports["convertRangePosition"] = convertRangePosition;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.Build"] = $PS["LanguageServer.IdePurescript.Build"] || {};
  var exports = $PS["LanguageServer.IdePurescript.Build"];
  var $foreign = $PS["LanguageServer.IdePurescript.Build"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign_Object = $PS["Foreign.Object"];
  var IdePurescript_Build = $PS["IdePurescript.Build"];
  var IdePurescript_PscIdeServer = $PS["IdePurescript.PscIdeServer"];
  var LanguageServer_IdePurescript_Config = $PS["LanguageServer.IdePurescript.Config"];
  var LanguageServer_IdePurescript_Server = $PS["LanguageServer.IdePurescript.Server"];
  var LanguageServer_IdePurescript_Util_Position = $PS["LanguageServer.IdePurescript.Util.Position"];
  var LanguageServer_Protocol_Uri = $PS["LanguageServer.Protocol.Uri"];
  var Node_Path = $PS["Node.Path"];                
  var emptyDiagnostics = {
      pscErrors: [  ],
      hasErrors: false,
      diagnostics: Foreign_Object.empty
  };
  var collectByFirst = function (x) {
      var f = function (v) {
          if (v.value0 instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, [ v.value1 ]));
          };
          return Data_Maybe.Nothing.value;
      };
      return Foreign_Object.fromFoldableWith(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupArray))(Data_Array.mapMaybe(f)(x));
  };
  var censorWarnings = function (settings) {
      var getCode = function (v) {
          return v.errorCode;
      };
      var codes = LanguageServer_IdePurescript_Config.censorCodes(settings);
      return Data_Array.filter((function () {
          var $64 = Data_Function.flip(Data_Array.notElem(Data_Eq.eqString))(codes);
          return function ($65) {
              return $64(getCode($65));
          };
      })());
  };
  var convertDiagnostics = function (projectRoot) {
      return function (settings) {
          return function (v) {
              var warnings$prime = censorWarnings(settings)(v.warnings);
              var dummyRange = {
                  start: {
                      line: 1,
                      character: 1
                  },
                  end: {
                      line: 1,
                      character: 1
                  }
              };
              var convertDiagnostic = function (isError) {
                  return function (v1) {
                      return function __do() {
                          var resolvedFile = Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Effect.applicativeEffect)(Node_Path.resolve([ projectRoot ]))(v1.filename)();
                          return new Data_Tuple.Tuple(resolvedFile, {
                              range: Data_Maybe.maybe(dummyRange)(LanguageServer_IdePurescript_Util_Position.convertRangePosition)(v1.position),
                              severity: Data_Nullable.toNullable(Data_Maybe.Just.create((function () {
                                  if (isError) {
                                      return 1;
                                  };
                                  return 2;
                              })())),
                              code: Data_Nullable.toNullable(Data_Maybe.Just.create(v1.errorCode)),
                              source: Data_Nullable.toNullable(new Data_Maybe.Just("PureScript")),
                              message: v1.message
                          });
                      };
                  };
              };
              var allDiagnostics = Data_Semigroup.append(Effect.semigroupEffect(Data_Semigroup.semigroupArray))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(convertDiagnostic(true))(v.errors))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(convertDiagnostic(false))(warnings$prime));
              var diagnostics = function __do() {
                  var diags = allDiagnostics();
                  return collectByFirst(diags);
              };
              return Data_Functor.mapFlipped(Effect.functorEffect)(diagnostics)(function (v1) {
                  return {
                      diagnostics: v1,
                      pscErrors: Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.errors)(warnings$prime),
                      hasErrors: !Data_Array["null"](v.errors)
                  };
              });
          };
      };
  };
  var fullBuild = function (notify) {
      return function (v) {
          return function (settings) {
              return function (state) {
                  return function (v1) {
                      var command = $foreign.parseShellQuote(LanguageServer_IdePurescript_Config.buildCommand(settings));
                      var v2 = Data_Array.uncons(command);
                      if (state.root instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Build.build(function (dictMonadEffect) {
                              return notify(dictMonadEffect);
                          })({
                              command: new IdePurescript_Build.Command(v2.value0.head, v2.value0.tail),
                              directory: state.root.value0,
                              useNpmDir: LanguageServer_IdePurescript_Config.addNpmPath(settings)
                          }))(Data_Either.either((function () {
                              var $66 = Control_Applicative.pure(Effect_Aff.applicativeAff);
                              return function ($67) {
                                  return $66(Data_Either.Left.create($67));
                              };
                          })())(function (v4) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(notify(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Info.value)("Build complete")))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)((function () {
                                      if (state.pscIdePort instanceof Data_Maybe.Nothing) {
                                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(notify(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer["Error"].value)("Couldn't reload modules, no ide server port"));
                                      };
                                      if (state.pscIdePort instanceof Data_Maybe.Just) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(LanguageServer_IdePurescript_Server.loadAll(state.pscIdePort.value0)))(function (v5) {
                                              if (v5 instanceof Data_Either.Left) {
                                                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(notify(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer["Error"].value)("Error reloading modules: " + Data_Show.show(Effect_Exception.showError)(v5.value0)));
                                              };
                                              if (v5 instanceof Data_Either.Right && v5.value0 instanceof Data_Either.Left) {
                                                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(notify(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer["Error"].value)("Error message from IDE server reloading modules: " + v5.value0.value0));
                                              };
                                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(notify(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Info.value)("Reloaded modules"));
                                          });
                                      };
                                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Build (line 114, column 11 - line 120, column 65): " + [ state.pscIdePort.constructor.name ]);
                                  })())(function () {
                                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(convertDiagnostics(state.root.value0)(settings)(v4.errors)));
                                  });
                              });
                          }));
                      };
                      if (v2 instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Left("Error parsing build command"));
                      };
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Either.Left.create("Error running build: port=" + (Data_Show.show(Data_Maybe.showMaybe(Data_Show.showInt))(state.pscIdePort) + (", root=" + Data_Show.show(Data_Maybe.showMaybe(Data_Show.showString))(state.root)))));
                  };
              };
          };
      };
  };
  var getDiagnostics = function (uri) {
      return function (settings) {
          return function (state) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Uri.uriToFilename(uri)))(function (filename) {
                  var targets = LanguageServer_IdePurescript_Config.codegenTargets(settings);
                  if (state.pscIdePort instanceof Data_Maybe.Just && state.root instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Build.rebuild(state.pscIdePort.value0)(filename)(targets))(function (v) {
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(convertDiagnostics(state.root.value0)(settings)(v.errors));
                      });
                  };
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(emptyDiagnostics);
              });
          };
      };
  };
  var getDiagnosticsForTmpFile = function (tmpFilename) {
      return function (uri) {
          return function (settings) {
              return function (state) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Uri.uriToFilename(uri)))(function (filename) {
                      var targets = LanguageServer_IdePurescript_Config.codegenTargets(settings);
                      if (state.pscIdePort instanceof Data_Maybe.Just && state.root instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Build.rebuildWithTmpFile(state.pscIdePort.value0)(tmpFilename)(filename)(targets))(function (v) {
                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(convertDiagnostics(state.root.value0)(settings)(v.errors));
                          });
                      };
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(emptyDiagnostics);
                  });
              };
          };
      };
  };
  exports["collectByFirst"] = collectByFirst;
  exports["getDiagnostics"] = getDiagnostics;
  exports["getDiagnosticsForTmpFile"] = getDiagnosticsForTmpFile;
  exports["fullBuild"] = fullBuild;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.Types"] = $PS["LanguageServer.IdePurescript.Types"] || {};
  var exports = $PS["LanguageServer.IdePurescript.Types"];
  var ServerState = function (x) {
      return x;
  };
  exports["ServerState"] = ServerState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["PureScript.CST.Errors"] = $PS["PureScript.CST.Errors"] || {};
  var exports = $PS["PureScript.CST.Errors"];                            
  var UnexpectedEof = (function () {
      function UnexpectedEof() {

      };
      UnexpectedEof.value = new UnexpectedEof();
      return UnexpectedEof;
  })();
  var ExpectedEof = (function () {
      function ExpectedEof(value0) {
          this.value0 = value0;
      };
      ExpectedEof.create = function (value0) {
          return new ExpectedEof(value0);
      };
      return ExpectedEof;
  })();
  var UnexpectedToken = (function () {
      function UnexpectedToken(value0) {
          this.value0 = value0;
      };
      UnexpectedToken.create = function (value0) {
          return new UnexpectedToken(value0);
      };
      return UnexpectedToken;
  })();
  var LexExpected = (function () {
      function LexExpected(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LexExpected.create = function (value0) {
          return function (value1) {
              return new LexExpected(value0, value1);
          };
      };
      return LexExpected;
  })();
  var LexInvalidCharEscape = (function () {
      function LexInvalidCharEscape(value0) {
          this.value0 = value0;
      };
      LexInvalidCharEscape.create = function (value0) {
          return new LexInvalidCharEscape(value0);
      };
      return LexInvalidCharEscape;
  })();
  var LexCharEscapeOutOfRange = (function () {
      function LexCharEscapeOutOfRange(value0) {
          this.value0 = value0;
      };
      LexCharEscapeOutOfRange.create = function (value0) {
          return new LexCharEscapeOutOfRange(value0);
      };
      return LexCharEscapeOutOfRange;
  })();
  var LexHexOutOfRange = (function () {
      function LexHexOutOfRange(value0) {
          this.value0 = value0;
      };
      LexHexOutOfRange.create = function (value0) {
          return new LexHexOutOfRange(value0);
      };
      return LexHexOutOfRange;
  })();
  var LexIntOutOfRange = (function () {
      function LexIntOutOfRange(value0) {
          this.value0 = value0;
      };
      LexIntOutOfRange.create = function (value0) {
          return new LexIntOutOfRange(value0);
      };
      return LexIntOutOfRange;
  })();
  var LexNumberOutOfRange = (function () {
      function LexNumberOutOfRange(value0) {
          this.value0 = value0;
      };
      LexNumberOutOfRange.create = function (value0) {
          return new LexNumberOutOfRange(value0);
      };
      return LexNumberOutOfRange;
  })();
  exports["UnexpectedEof"] = UnexpectedEof;
  exports["ExpectedEof"] = ExpectedEof;
  exports["UnexpectedToken"] = UnexpectedToken;
  exports["LexExpected"] = LexExpected;
  exports["LexInvalidCharEscape"] = LexInvalidCharEscape;
  exports["LexCharEscapeOutOfRange"] = LexCharEscapeOutOfRange;
  exports["LexHexOutOfRange"] = LexHexOutOfRange;
  exports["LexIntOutOfRange"] = LexIntOutOfRange;
  exports["LexNumberOutOfRange"] = LexNumberOutOfRange;
})(PS);
(function($PS) {
  "use strict";
  $PS["PureScript.CST.Types"] = $PS["PureScript.CST.Types"] || {};
  var exports = $PS["PureScript.CST.Types"];     
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var Unicode = (function () {
      function Unicode() {

      };
      Unicode.value = new Unicode();
      return Unicode;
  })();
  var Nominal = (function () {
      function Nominal() {

      };
      Nominal.value = new Nominal();
      return Nominal;
  })();
  var Representational = (function () {
      function Representational() {

      };
      Representational.value = new Representational();
      return Representational;
  })();
  var Phantom = (function () {
      function Phantom() {

      };
      Phantom.value = new Phantom();
      return Phantom;
  })();
  var ModuleName = function (x) {
      return x;
  };
  var TokLeftParen = (function () {
      function TokLeftParen() {

      };
      TokLeftParen.value = new TokLeftParen();
      return TokLeftParen;
  })();
  var TokRightParen = (function () {
      function TokRightParen() {

      };
      TokRightParen.value = new TokRightParen();
      return TokRightParen;
  })();
  var TokLeftBrace = (function () {
      function TokLeftBrace() {

      };
      TokLeftBrace.value = new TokLeftBrace();
      return TokLeftBrace;
  })();
  var TokRightBrace = (function () {
      function TokRightBrace() {

      };
      TokRightBrace.value = new TokRightBrace();
      return TokRightBrace;
  })();
  var TokLeftSquare = (function () {
      function TokLeftSquare() {

      };
      TokLeftSquare.value = new TokLeftSquare();
      return TokLeftSquare;
  })();
  var TokRightSquare = (function () {
      function TokRightSquare() {

      };
      TokRightSquare.value = new TokRightSquare();
      return TokRightSquare;
  })();
  var TokLeftArrow = (function () {
      function TokLeftArrow(value0) {
          this.value0 = value0;
      };
      TokLeftArrow.create = function (value0) {
          return new TokLeftArrow(value0);
      };
      return TokLeftArrow;
  })();
  var TokRightArrow = (function () {
      function TokRightArrow(value0) {
          this.value0 = value0;
      };
      TokRightArrow.create = function (value0) {
          return new TokRightArrow(value0);
      };
      return TokRightArrow;
  })();
  var TokRightFatArrow = (function () {
      function TokRightFatArrow(value0) {
          this.value0 = value0;
      };
      TokRightFatArrow.create = function (value0) {
          return new TokRightFatArrow(value0);
      };
      return TokRightFatArrow;
  })();
  var TokDoubleColon = (function () {
      function TokDoubleColon(value0) {
          this.value0 = value0;
      };
      TokDoubleColon.create = function (value0) {
          return new TokDoubleColon(value0);
      };
      return TokDoubleColon;
  })();
  var TokForall = (function () {
      function TokForall(value0) {
          this.value0 = value0;
      };
      TokForall.create = function (value0) {
          return new TokForall(value0);
      };
      return TokForall;
  })();
  var TokEquals = (function () {
      function TokEquals() {

      };
      TokEquals.value = new TokEquals();
      return TokEquals;
  })();
  var TokPipe = (function () {
      function TokPipe() {

      };
      TokPipe.value = new TokPipe();
      return TokPipe;
  })();
  var TokTick = (function () {
      function TokTick() {

      };
      TokTick.value = new TokTick();
      return TokTick;
  })();
  var TokDot = (function () {
      function TokDot() {

      };
      TokDot.value = new TokDot();
      return TokDot;
  })();
  var TokComma = (function () {
      function TokComma() {

      };
      TokComma.value = new TokComma();
      return TokComma;
  })();
  var TokUnderscore = (function () {
      function TokUnderscore() {

      };
      TokUnderscore.value = new TokUnderscore();
      return TokUnderscore;
  })();
  var TokBackslash = (function () {
      function TokBackslash() {

      };
      TokBackslash.value = new TokBackslash();
      return TokBackslash;
  })();
  var TokAt = (function () {
      function TokAt() {

      };
      TokAt.value = new TokAt();
      return TokAt;
  })();
  var TokLowerName = (function () {
      function TokLowerName(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokLowerName.create = function (value0) {
          return function (value1) {
              return new TokLowerName(value0, value1);
          };
      };
      return TokLowerName;
  })();
  var TokUpperName = (function () {
      function TokUpperName(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokUpperName.create = function (value0) {
          return function (value1) {
              return new TokUpperName(value0, value1);
          };
      };
      return TokUpperName;
  })();
  var TokOperator = (function () {
      function TokOperator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokOperator.create = function (value0) {
          return function (value1) {
              return new TokOperator(value0, value1);
          };
      };
      return TokOperator;
  })();
  var TokSymbolName = (function () {
      function TokSymbolName(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokSymbolName.create = function (value0) {
          return function (value1) {
              return new TokSymbolName(value0, value1);
          };
      };
      return TokSymbolName;
  })();
  var TokSymbolArrow = (function () {
      function TokSymbolArrow(value0) {
          this.value0 = value0;
      };
      TokSymbolArrow.create = function (value0) {
          return new TokSymbolArrow(value0);
      };
      return TokSymbolArrow;
  })();
  var TokHole = (function () {
      function TokHole(value0) {
          this.value0 = value0;
      };
      TokHole.create = function (value0) {
          return new TokHole(value0);
      };
      return TokHole;
  })();
  var TokChar = (function () {
      function TokChar(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokChar.create = function (value0) {
          return function (value1) {
              return new TokChar(value0, value1);
          };
      };
      return TokChar;
  })();
  var TokString = (function () {
      function TokString(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokString.create = function (value0) {
          return function (value1) {
              return new TokString(value0, value1);
          };
      };
      return TokString;
  })();
  var TokRawString = (function () {
      function TokRawString(value0) {
          this.value0 = value0;
      };
      TokRawString.create = function (value0) {
          return new TokRawString(value0);
      };
      return TokRawString;
  })();
  var TokInt = (function () {
      function TokInt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokInt.create = function (value0) {
          return function (value1) {
              return new TokInt(value0, value1);
          };
      };
      return TokInt;
  })();
  var TokNumber = (function () {
      function TokNumber(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokNumber.create = function (value0) {
          return function (value1) {
              return new TokNumber(value0, value1);
          };
      };
      return TokNumber;
  })();
  var TokLayoutStart = (function () {
      function TokLayoutStart(value0) {
          this.value0 = value0;
      };
      TokLayoutStart.create = function (value0) {
          return new TokLayoutStart(value0);
      };
      return TokLayoutStart;
  })();
  var TokLayoutSep = (function () {
      function TokLayoutSep(value0) {
          this.value0 = value0;
      };
      TokLayoutSep.create = function (value0) {
          return new TokLayoutSep(value0);
      };
      return TokLayoutSep;
  })();
  var TokLayoutEnd = (function () {
      function TokLayoutEnd(value0) {
          this.value0 = value0;
      };
      TokLayoutEnd.create = function (value0) {
          return new TokLayoutEnd(value0);
      };
      return TokLayoutEnd;
  })();
  var LF = (function () {
      function LF() {

      };
      LF.value = new LF();
      return LF;
  })();
  var CRLF = (function () {
      function CRLF() {

      };
      CRLF.value = new CRLF();
      return CRLF;
  })();
  var Infix = (function () {
      function Infix() {

      };
      Infix.value = new Infix();
      return Infix;
  })();
  var Infixl = (function () {
      function Infixl() {

      };
      Infixl.value = new Infixl();
      return Infixl;
  })();
  var Infixr = (function () {
      function Infixr() {

      };
      Infixr.value = new Infixr();
      return Infixr;
  })();
  var Comment = (function () {
      function Comment(value0) {
          this.value0 = value0;
      };
      Comment.create = function (value0) {
          return new Comment(value0);
      };
      return Comment;
  })();
  var Space = (function () {
      function Space(value0) {
          this.value0 = value0;
      };
      Space.create = function (value0) {
          return new Space(value0);
      };
      return Space;
  })();
  var Line = (function () {
      function Line(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Line.create = function (value0) {
          return function (value1) {
              return new Line(value0, value1);
          };
      };
      return Line;
  })();
  var FixityValue = (function () {
      function FixityValue(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FixityValue.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FixityValue(value0, value1, value2);
              };
          };
      };
      return FixityValue;
  })();
  var FixityType = (function () {
      function FixityType(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      FixityType.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new FixityType(value0, value1, value2, value3);
                  };
              };
          };
      };
      return FixityType;
  })();
  var RecordPun = (function () {
      function RecordPun(value0) {
          this.value0 = value0;
      };
      RecordPun.create = function (value0) {
          return new RecordPun(value0);
      };
      return RecordPun;
  })();
  var RecordField = (function () {
      function RecordField(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RecordField.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RecordField(value0, value1, value2);
              };
          };
      };
      return RecordField;
  })();
  var DataAll = (function () {
      function DataAll(value0) {
          this.value0 = value0;
      };
      DataAll.create = function (value0) {
          return new DataAll(value0);
      };
      return DataAll;
  })();
  var DataEnumerated = (function () {
      function DataEnumerated(value0) {
          this.value0 = value0;
      };
      DataEnumerated.create = function (value0) {
          return new DataEnumerated(value0);
      };
      return DataEnumerated;
  })();
  var ExportValue = (function () {
      function ExportValue(value0) {
          this.value0 = value0;
      };
      ExportValue.create = function (value0) {
          return new ExportValue(value0);
      };
      return ExportValue;
  })();
  var ExportOp = (function () {
      function ExportOp(value0) {
          this.value0 = value0;
      };
      ExportOp.create = function (value0) {
          return new ExportOp(value0);
      };
      return ExportOp;
  })();
  var ExportType = (function () {
      function ExportType(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportType.create = function (value0) {
          return function (value1) {
              return new ExportType(value0, value1);
          };
      };
      return ExportType;
  })();
  var ExportTypeOp = (function () {
      function ExportTypeOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportTypeOp.create = function (value0) {
          return function (value1) {
              return new ExportTypeOp(value0, value1);
          };
      };
      return ExportTypeOp;
  })();
  var ExportClass = (function () {
      function ExportClass(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportClass.create = function (value0) {
          return function (value1) {
              return new ExportClass(value0, value1);
          };
      };
      return ExportClass;
  })();
  var ExportKind = (function () {
      function ExportKind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportKind.create = function (value0) {
          return function (value1) {
              return new ExportKind(value0, value1);
          };
      };
      return ExportKind;
  })();
  var ExportModule = (function () {
      function ExportModule(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportModule.create = function (value0) {
          return function (value1) {
              return new ExportModule(value0, value1);
          };
      };
      return ExportModule;
  })();
  var ExportError = (function () {
      function ExportError(value0) {
          this.value0 = value0;
      };
      ExportError.create = function (value0) {
          return new ExportError(value0);
      };
      return ExportError;
  })();
  var ImportValue = (function () {
      function ImportValue(value0) {
          this.value0 = value0;
      };
      ImportValue.create = function (value0) {
          return new ImportValue(value0);
      };
      return ImportValue;
  })();
  var ImportOp = (function () {
      function ImportOp(value0) {
          this.value0 = value0;
      };
      ImportOp.create = function (value0) {
          return new ImportOp(value0);
      };
      return ImportOp;
  })();
  var ImportType = (function () {
      function ImportType(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImportType.create = function (value0) {
          return function (value1) {
              return new ImportType(value0, value1);
          };
      };
      return ImportType;
  })();
  var ImportTypeOp = (function () {
      function ImportTypeOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImportTypeOp.create = function (value0) {
          return function (value1) {
              return new ImportTypeOp(value0, value1);
          };
      };
      return ImportTypeOp;
  })();
  var ImportClass = (function () {
      function ImportClass(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImportClass.create = function (value0) {
          return function (value1) {
              return new ImportClass(value0, value1);
          };
      };
      return ImportClass;
  })();
  var ImportKind = (function () {
      function ImportKind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImportKind.create = function (value0) {
          return function (value1) {
              return new ImportKind(value0, value1);
          };
      };
      return ImportKind;
  })();
  var One = (function () {
      function One(value0) {
          this.value0 = value0;
      };
      One.create = function (value0) {
          return new One(value0);
      };
      return One;
  })();
  var Many = (function () {
      function Many(value0) {
          this.value0 = value0;
      };
      Many.create = function (value0) {
          return new Many(value0);
      };
      return Many;
  })();
  var TypeVarKinded = (function () {
      function TypeVarKinded(value0) {
          this.value0 = value0;
      };
      TypeVarKinded.create = function (value0) {
          return new TypeVarKinded(value0);
      };
      return TypeVarKinded;
  })();
  var TypeVarName = (function () {
      function TypeVarName(value0) {
          this.value0 = value0;
      };
      TypeVarName.create = function (value0) {
          return new TypeVarName(value0);
      };
      return TypeVarName;
  })();
  var TypeVar = (function () {
      function TypeVar(value0) {
          this.value0 = value0;
      };
      TypeVar.create = function (value0) {
          return new TypeVar(value0);
      };
      return TypeVar;
  })();
  var TypeConstructor = (function () {
      function TypeConstructor(value0) {
          this.value0 = value0;
      };
      TypeConstructor.create = function (value0) {
          return new TypeConstructor(value0);
      };
      return TypeConstructor;
  })();
  var TypeWildcard = (function () {
      function TypeWildcard(value0) {
          this.value0 = value0;
      };
      TypeWildcard.create = function (value0) {
          return new TypeWildcard(value0);
      };
      return TypeWildcard;
  })();
  var TypeHole = (function () {
      function TypeHole(value0) {
          this.value0 = value0;
      };
      TypeHole.create = function (value0) {
          return new TypeHole(value0);
      };
      return TypeHole;
  })();
  var TypeString = (function () {
      function TypeString(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeString.create = function (value0) {
          return function (value1) {
              return new TypeString(value0, value1);
          };
      };
      return TypeString;
  })();
  var TypeRow = (function () {
      function TypeRow(value0) {
          this.value0 = value0;
      };
      TypeRow.create = function (value0) {
          return new TypeRow(value0);
      };
      return TypeRow;
  })();
  var TypeRecord = (function () {
      function TypeRecord(value0) {
          this.value0 = value0;
      };
      TypeRecord.create = function (value0) {
          return new TypeRecord(value0);
      };
      return TypeRecord;
  })();
  var TypeForall = (function () {
      function TypeForall(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      TypeForall.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new TypeForall(value0, value1, value2, value3);
                  };
              };
          };
      };
      return TypeForall;
  })();
  var TypeKinded = (function () {
      function TypeKinded(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TypeKinded.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TypeKinded(value0, value1, value2);
              };
          };
      };
      return TypeKinded;
  })();
  var TypeApp = (function () {
      function TypeApp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeApp.create = function (value0) {
          return function (value1) {
              return new TypeApp(value0, value1);
          };
      };
      return TypeApp;
  })();
  var TypeOp = (function () {
      function TypeOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeOp.create = function (value0) {
          return function (value1) {
              return new TypeOp(value0, value1);
          };
      };
      return TypeOp;
  })();
  var TypeOpName = (function () {
      function TypeOpName(value0) {
          this.value0 = value0;
      };
      TypeOpName.create = function (value0) {
          return new TypeOpName(value0);
      };
      return TypeOpName;
  })();
  var TypeArrow = (function () {
      function TypeArrow(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TypeArrow.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TypeArrow(value0, value1, value2);
              };
          };
      };
      return TypeArrow;
  })();
  var TypeArrowName = (function () {
      function TypeArrowName(value0) {
          this.value0 = value0;
      };
      TypeArrowName.create = function (value0) {
          return new TypeArrowName(value0);
      };
      return TypeArrowName;
  })();
  var TypeConstrained = (function () {
      function TypeConstrained(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TypeConstrained.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TypeConstrained(value0, value1, value2);
              };
          };
      };
      return TypeConstrained;
  })();
  var TypeParens = (function () {
      function TypeParens(value0) {
          this.value0 = value0;
      };
      TypeParens.create = function (value0) {
          return new TypeParens(value0);
      };
      return TypeParens;
  })();
  var TypeUnaryRow = (function () {
      function TypeUnaryRow(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeUnaryRow.create = function (value0) {
          return function (value1) {
              return new TypeUnaryRow(value0, value1);
          };
      };
      return TypeUnaryRow;
  })();
  var ForeignValue = (function () {
      function ForeignValue(value0) {
          this.value0 = value0;
      };
      ForeignValue.create = function (value0) {
          return new ForeignValue(value0);
      };
      return ForeignValue;
  })();
  var ForeignData = (function () {
      function ForeignData(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ForeignData.create = function (value0) {
          return function (value1) {
              return new ForeignData(value0, value1);
          };
      };
      return ForeignData;
  })();
  var ForeignKind = (function () {
      function ForeignKind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ForeignKind.create = function (value0) {
          return function (value1) {
              return new ForeignKind(value0, value1);
          };
      };
      return ForeignKind;
  })();
  var FundepDetermined = (function () {
      function FundepDetermined(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FundepDetermined.create = function (value0) {
          return function (value1) {
              return new FundepDetermined(value0, value1);
          };
      };
      return FundepDetermined;
  })();
  var FundepDetermines = (function () {
      function FundepDetermines(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FundepDetermines.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FundepDetermines(value0, value1, value2);
              };
          };
      };
      return FundepDetermines;
  })();
  var BinderWildcard = (function () {
      function BinderWildcard(value0) {
          this.value0 = value0;
      };
      BinderWildcard.create = function (value0) {
          return new BinderWildcard(value0);
      };
      return BinderWildcard;
  })();
  var BinderVar = (function () {
      function BinderVar(value0) {
          this.value0 = value0;
      };
      BinderVar.create = function (value0) {
          return new BinderVar(value0);
      };
      return BinderVar;
  })();
  var BinderNamed = (function () {
      function BinderNamed(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinderNamed.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinderNamed(value0, value1, value2);
              };
          };
      };
      return BinderNamed;
  })();
  var BinderConstructor = (function () {
      function BinderConstructor(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderConstructor.create = function (value0) {
          return function (value1) {
              return new BinderConstructor(value0, value1);
          };
      };
      return BinderConstructor;
  })();
  var BinderBoolean = (function () {
      function BinderBoolean(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderBoolean.create = function (value0) {
          return function (value1) {
              return new BinderBoolean(value0, value1);
          };
      };
      return BinderBoolean;
  })();
  var BinderChar = (function () {
      function BinderChar(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderChar.create = function (value0) {
          return function (value1) {
              return new BinderChar(value0, value1);
          };
      };
      return BinderChar;
  })();
  var BinderString = (function () {
      function BinderString(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderString.create = function (value0) {
          return function (value1) {
              return new BinderString(value0, value1);
          };
      };
      return BinderString;
  })();
  var BinderInt = (function () {
      function BinderInt(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinderInt.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinderInt(value0, value1, value2);
              };
          };
      };
      return BinderInt;
  })();
  var BinderNumber = (function () {
      function BinderNumber(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinderNumber.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinderNumber(value0, value1, value2);
              };
          };
      };
      return BinderNumber;
  })();
  var BinderArray = (function () {
      function BinderArray(value0) {
          this.value0 = value0;
      };
      BinderArray.create = function (value0) {
          return new BinderArray(value0);
      };
      return BinderArray;
  })();
  var BinderRecord = (function () {
      function BinderRecord(value0) {
          this.value0 = value0;
      };
      BinderRecord.create = function (value0) {
          return new BinderRecord(value0);
      };
      return BinderRecord;
  })();
  var BinderParens = (function () {
      function BinderParens(value0) {
          this.value0 = value0;
      };
      BinderParens.create = function (value0) {
          return new BinderParens(value0);
      };
      return BinderParens;
  })();
  var BinderTyped = (function () {
      function BinderTyped(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinderTyped.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinderTyped(value0, value1, value2);
              };
          };
      };
      return BinderTyped;
  })();
  var BinderOp = (function () {
      function BinderOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderOp.create = function (value0) {
          return function (value1) {
              return new BinderOp(value0, value1);
          };
      };
      return BinderOp;
  })();
  var DoLet = (function () {
      function DoLet(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DoLet.create = function (value0) {
          return function (value1) {
              return new DoLet(value0, value1);
          };
      };
      return DoLet;
  })();
  var DoDiscard = (function () {
      function DoDiscard(value0) {
          this.value0 = value0;
      };
      DoDiscard.create = function (value0) {
          return new DoDiscard(value0);
      };
      return DoDiscard;
  })();
  var DoBind = (function () {
      function DoBind(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      DoBind.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new DoBind(value0, value1, value2);
              };
          };
      };
      return DoBind;
  })();
  var DoError = (function () {
      function DoError(value0) {
          this.value0 = value0;
      };
      DoError.create = function (value0) {
          return new DoError(value0);
      };
      return DoError;
  })();
  var LetBindingSignature = (function () {
      function LetBindingSignature(value0) {
          this.value0 = value0;
      };
      LetBindingSignature.create = function (value0) {
          return new LetBindingSignature(value0);
      };
      return LetBindingSignature;
  })();
  var LetBindingName = (function () {
      function LetBindingName(value0) {
          this.value0 = value0;
      };
      LetBindingName.create = function (value0) {
          return new LetBindingName(value0);
      };
      return LetBindingName;
  })();
  var LetBindingPattern = (function () {
      function LetBindingPattern(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      LetBindingPattern.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new LetBindingPattern(value0, value1, value2);
              };
          };
      };
      return LetBindingPattern;
  })();
  var LetBindingError = (function () {
      function LetBindingError(value0) {
          this.value0 = value0;
      };
      LetBindingError.create = function (value0) {
          return new LetBindingError(value0);
      };
      return LetBindingError;
  })();
  var Unconditional = (function () {
      function Unconditional(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Unconditional.create = function (value0) {
          return function (value1) {
              return new Unconditional(value0, value1);
          };
      };
      return Unconditional;
  })();
  var Guarded = (function () {
      function Guarded(value0) {
          this.value0 = value0;
      };
      Guarded.create = function (value0) {
          return new Guarded(value0);
      };
      return Guarded;
  })();
  var ExprHole = (function () {
      function ExprHole(value0) {
          this.value0 = value0;
      };
      ExprHole.create = function (value0) {
          return new ExprHole(value0);
      };
      return ExprHole;
  })();
  var ExprSection = (function () {
      function ExprSection(value0) {
          this.value0 = value0;
      };
      ExprSection.create = function (value0) {
          return new ExprSection(value0);
      };
      return ExprSection;
  })();
  var ExprIdent = (function () {
      function ExprIdent(value0) {
          this.value0 = value0;
      };
      ExprIdent.create = function (value0) {
          return new ExprIdent(value0);
      };
      return ExprIdent;
  })();
  var ExprConstructor = (function () {
      function ExprConstructor(value0) {
          this.value0 = value0;
      };
      ExprConstructor.create = function (value0) {
          return new ExprConstructor(value0);
      };
      return ExprConstructor;
  })();
  var ExprBoolean = (function () {
      function ExprBoolean(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprBoolean.create = function (value0) {
          return function (value1) {
              return new ExprBoolean(value0, value1);
          };
      };
      return ExprBoolean;
  })();
  var ExprChar = (function () {
      function ExprChar(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprChar.create = function (value0) {
          return function (value1) {
              return new ExprChar(value0, value1);
          };
      };
      return ExprChar;
  })();
  var ExprString = (function () {
      function ExprString(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprString.create = function (value0) {
          return function (value1) {
              return new ExprString(value0, value1);
          };
      };
      return ExprString;
  })();
  var ExprInt = (function () {
      function ExprInt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprInt.create = function (value0) {
          return function (value1) {
              return new ExprInt(value0, value1);
          };
      };
      return ExprInt;
  })();
  var ExprNumber = (function () {
      function ExprNumber(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprNumber.create = function (value0) {
          return function (value1) {
              return new ExprNumber(value0, value1);
          };
      };
      return ExprNumber;
  })();
  var ExprArray = (function () {
      function ExprArray(value0) {
          this.value0 = value0;
      };
      ExprArray.create = function (value0) {
          return new ExprArray(value0);
      };
      return ExprArray;
  })();
  var ExprRecord = (function () {
      function ExprRecord(value0) {
          this.value0 = value0;
      };
      ExprRecord.create = function (value0) {
          return new ExprRecord(value0);
      };
      return ExprRecord;
  })();
  var ExprParens = (function () {
      function ExprParens(value0) {
          this.value0 = value0;
      };
      ExprParens.create = function (value0) {
          return new ExprParens(value0);
      };
      return ExprParens;
  })();
  var ExprTyped = (function () {
      function ExprTyped(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ExprTyped.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ExprTyped(value0, value1, value2);
              };
          };
      };
      return ExprTyped;
  })();
  var ExprInfix = (function () {
      function ExprInfix(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprInfix.create = function (value0) {
          return function (value1) {
              return new ExprInfix(value0, value1);
          };
      };
      return ExprInfix;
  })();
  var ExprOp = (function () {
      function ExprOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprOp.create = function (value0) {
          return function (value1) {
              return new ExprOp(value0, value1);
          };
      };
      return ExprOp;
  })();
  var ExprOpName = (function () {
      function ExprOpName(value0) {
          this.value0 = value0;
      };
      ExprOpName.create = function (value0) {
          return new ExprOpName(value0);
      };
      return ExprOpName;
  })();
  var ExprNegate = (function () {
      function ExprNegate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprNegate.create = function (value0) {
          return function (value1) {
              return new ExprNegate(value0, value1);
          };
      };
      return ExprNegate;
  })();
  var ExprRecordAccessor = (function () {
      function ExprRecordAccessor(value0) {
          this.value0 = value0;
      };
      ExprRecordAccessor.create = function (value0) {
          return new ExprRecordAccessor(value0);
      };
      return ExprRecordAccessor;
  })();
  var ExprRecordUpdate = (function () {
      function ExprRecordUpdate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprRecordUpdate.create = function (value0) {
          return function (value1) {
              return new ExprRecordUpdate(value0, value1);
          };
      };
      return ExprRecordUpdate;
  })();
  var ExprApp = (function () {
      function ExprApp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprApp.create = function (value0) {
          return function (value1) {
              return new ExprApp(value0, value1);
          };
      };
      return ExprApp;
  })();
  var ExprLambda = (function () {
      function ExprLambda(value0) {
          this.value0 = value0;
      };
      ExprLambda.create = function (value0) {
          return new ExprLambda(value0);
      };
      return ExprLambda;
  })();
  var ExprIf = (function () {
      function ExprIf(value0) {
          this.value0 = value0;
      };
      ExprIf.create = function (value0) {
          return new ExprIf(value0);
      };
      return ExprIf;
  })();
  var ExprCase = (function () {
      function ExprCase(value0) {
          this.value0 = value0;
      };
      ExprCase.create = function (value0) {
          return new ExprCase(value0);
      };
      return ExprCase;
  })();
  var ExprLet = (function () {
      function ExprLet(value0) {
          this.value0 = value0;
      };
      ExprLet.create = function (value0) {
          return new ExprLet(value0);
      };
      return ExprLet;
  })();
  var ExprDo = (function () {
      function ExprDo(value0) {
          this.value0 = value0;
      };
      ExprDo.create = function (value0) {
          return new ExprDo(value0);
      };
      return ExprDo;
  })();
  var ExprAdo = (function () {
      function ExprAdo(value0) {
          this.value0 = value0;
      };
      ExprAdo.create = function (value0) {
          return new ExprAdo(value0);
      };
      return ExprAdo;
  })();
  var RecordUpdateLeaf = (function () {
      function RecordUpdateLeaf(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RecordUpdateLeaf.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RecordUpdateLeaf(value0, value1, value2);
              };
          };
      };
      return RecordUpdateLeaf;
  })();
  var RecordUpdateBranch = (function () {
      function RecordUpdateBranch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RecordUpdateBranch.create = function (value0) {
          return function (value1) {
              return new RecordUpdateBranch(value0, value1);
          };
      };
      return RecordUpdateBranch;
  })();
  var InstanceBindingSignature = (function () {
      function InstanceBindingSignature(value0) {
          this.value0 = value0;
      };
      InstanceBindingSignature.create = function (value0) {
          return new InstanceBindingSignature(value0);
      };
      return InstanceBindingSignature;
  })();
  var InstanceBindingName = (function () {
      function InstanceBindingName(value0) {
          this.value0 = value0;
      };
      InstanceBindingName.create = function (value0) {
          return new InstanceBindingName(value0);
      };
      return InstanceBindingName;
  })();
  var DeclData = (function () {
      function DeclData(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DeclData.create = function (value0) {
          return function (value1) {
              return new DeclData(value0, value1);
          };
      };
      return DeclData;
  })();
  var DeclType = (function () {
      function DeclType(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      DeclType.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new DeclType(value0, value1, value2);
              };
          };
      };
      return DeclType;
  })();
  var DeclNewtype = (function () {
      function DeclNewtype(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      DeclNewtype.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new DeclNewtype(value0, value1, value2, value3);
                  };
              };
          };
      };
      return DeclNewtype;
  })();
  var DeclClass = (function () {
      function DeclClass(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DeclClass.create = function (value0) {
          return function (value1) {
              return new DeclClass(value0, value1);
          };
      };
      return DeclClass;
  })();
  var DeclInstanceChain = (function () {
      function DeclInstanceChain(value0) {
          this.value0 = value0;
      };
      DeclInstanceChain.create = function (value0) {
          return new DeclInstanceChain(value0);
      };
      return DeclInstanceChain;
  })();
  var DeclDerive = (function () {
      function DeclDerive(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      DeclDerive.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new DeclDerive(value0, value1, value2);
              };
          };
      };
      return DeclDerive;
  })();
  var DeclKindSignature = (function () {
      function DeclKindSignature(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DeclKindSignature.create = function (value0) {
          return function (value1) {
              return new DeclKindSignature(value0, value1);
          };
      };
      return DeclKindSignature;
  })();
  var DeclSignature = (function () {
      function DeclSignature(value0) {
          this.value0 = value0;
      };
      DeclSignature.create = function (value0) {
          return new DeclSignature(value0);
      };
      return DeclSignature;
  })();
  var DeclValue = (function () {
      function DeclValue(value0) {
          this.value0 = value0;
      };
      DeclValue.create = function (value0) {
          return new DeclValue(value0);
      };
      return DeclValue;
  })();
  var DeclFixity = (function () {
      function DeclFixity(value0) {
          this.value0 = value0;
      };
      DeclFixity.create = function (value0) {
          return new DeclFixity(value0);
      };
      return DeclFixity;
  })();
  var DeclForeign = (function () {
      function DeclForeign(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      DeclForeign.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new DeclForeign(value0, value1, value2);
              };
          };
      };
      return DeclForeign;
  })();
  var DeclRole = (function () {
      function DeclRole(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      DeclRole.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new DeclRole(value0, value1, value2, value3);
                  };
              };
          };
      };
      return DeclRole;
  })();
  var DeclError = (function () {
      function DeclError(value0) {
          this.value0 = value0;
      };
      DeclError.create = function (value0) {
          return new DeclError(value0);
      };
      return DeclError;
  })();
  exports["ModuleName"] = ModuleName;
  exports["Comment"] = Comment;
  exports["Space"] = Space;
  exports["Line"] = Line;
  exports["LF"] = LF;
  exports["CRLF"] = CRLF;
  exports["ASCII"] = ASCII;
  exports["Unicode"] = Unicode;
  exports["TokLeftParen"] = TokLeftParen;
  exports["TokRightParen"] = TokRightParen;
  exports["TokLeftBrace"] = TokLeftBrace;
  exports["TokRightBrace"] = TokRightBrace;
  exports["TokLeftSquare"] = TokLeftSquare;
  exports["TokRightSquare"] = TokRightSquare;
  exports["TokLeftArrow"] = TokLeftArrow;
  exports["TokRightArrow"] = TokRightArrow;
  exports["TokRightFatArrow"] = TokRightFatArrow;
  exports["TokDoubleColon"] = TokDoubleColon;
  exports["TokForall"] = TokForall;
  exports["TokEquals"] = TokEquals;
  exports["TokPipe"] = TokPipe;
  exports["TokTick"] = TokTick;
  exports["TokDot"] = TokDot;
  exports["TokComma"] = TokComma;
  exports["TokUnderscore"] = TokUnderscore;
  exports["TokBackslash"] = TokBackslash;
  exports["TokAt"] = TokAt;
  exports["TokLowerName"] = TokLowerName;
  exports["TokUpperName"] = TokUpperName;
  exports["TokOperator"] = TokOperator;
  exports["TokSymbolName"] = TokSymbolName;
  exports["TokSymbolArrow"] = TokSymbolArrow;
  exports["TokHole"] = TokHole;
  exports["TokChar"] = TokChar;
  exports["TokString"] = TokString;
  exports["TokRawString"] = TokRawString;
  exports["TokInt"] = TokInt;
  exports["TokNumber"] = TokNumber;
  exports["TokLayoutStart"] = TokLayoutStart;
  exports["TokLayoutSep"] = TokLayoutSep;
  exports["TokLayoutEnd"] = TokLayoutEnd;
  exports["One"] = One;
  exports["Many"] = Many;
  exports["TypeVar"] = TypeVar;
  exports["TypeConstructor"] = TypeConstructor;
  exports["TypeWildcard"] = TypeWildcard;
  exports["TypeHole"] = TypeHole;
  exports["TypeString"] = TypeString;
  exports["TypeRow"] = TypeRow;
  exports["TypeRecord"] = TypeRecord;
  exports["TypeForall"] = TypeForall;
  exports["TypeKinded"] = TypeKinded;
  exports["TypeApp"] = TypeApp;
  exports["TypeOp"] = TypeOp;
  exports["TypeOpName"] = TypeOpName;
  exports["TypeArrow"] = TypeArrow;
  exports["TypeArrowName"] = TypeArrowName;
  exports["TypeConstrained"] = TypeConstrained;
  exports["TypeParens"] = TypeParens;
  exports["TypeUnaryRow"] = TypeUnaryRow;
  exports["TypeVarKinded"] = TypeVarKinded;
  exports["TypeVarName"] = TypeVarName;
  exports["ExportValue"] = ExportValue;
  exports["ExportOp"] = ExportOp;
  exports["ExportType"] = ExportType;
  exports["ExportTypeOp"] = ExportTypeOp;
  exports["ExportClass"] = ExportClass;
  exports["ExportKind"] = ExportKind;
  exports["ExportModule"] = ExportModule;
  exports["ExportError"] = ExportError;
  exports["DataAll"] = DataAll;
  exports["DataEnumerated"] = DataEnumerated;
  exports["DeclData"] = DeclData;
  exports["DeclType"] = DeclType;
  exports["DeclNewtype"] = DeclNewtype;
  exports["DeclClass"] = DeclClass;
  exports["DeclInstanceChain"] = DeclInstanceChain;
  exports["DeclDerive"] = DeclDerive;
  exports["DeclKindSignature"] = DeclKindSignature;
  exports["DeclSignature"] = DeclSignature;
  exports["DeclValue"] = DeclValue;
  exports["DeclFixity"] = DeclFixity;
  exports["DeclForeign"] = DeclForeign;
  exports["DeclRole"] = DeclRole;
  exports["DeclError"] = DeclError;
  exports["InstanceBindingSignature"] = InstanceBindingSignature;
  exports["InstanceBindingName"] = InstanceBindingName;
  exports["ImportValue"] = ImportValue;
  exports["ImportOp"] = ImportOp;
  exports["ImportType"] = ImportType;
  exports["ImportTypeOp"] = ImportTypeOp;
  exports["ImportClass"] = ImportClass;
  exports["ImportKind"] = ImportKind;
  exports["FundepDetermined"] = FundepDetermined;
  exports["FundepDetermines"] = FundepDetermines;
  exports["Infix"] = Infix;
  exports["Infixl"] = Infixl;
  exports["Infixr"] = Infixr;
  exports["FixityValue"] = FixityValue;
  exports["FixityType"] = FixityType;
  exports["Unconditional"] = Unconditional;
  exports["Guarded"] = Guarded;
  exports["ForeignValue"] = ForeignValue;
  exports["ForeignData"] = ForeignData;
  exports["ForeignKind"] = ForeignKind;
  exports["Nominal"] = Nominal;
  exports["Representational"] = Representational;
  exports["Phantom"] = Phantom;
  exports["ExprHole"] = ExprHole;
  exports["ExprSection"] = ExprSection;
  exports["ExprIdent"] = ExprIdent;
  exports["ExprConstructor"] = ExprConstructor;
  exports["ExprBoolean"] = ExprBoolean;
  exports["ExprChar"] = ExprChar;
  exports["ExprString"] = ExprString;
  exports["ExprInt"] = ExprInt;
  exports["ExprNumber"] = ExprNumber;
  exports["ExprArray"] = ExprArray;
  exports["ExprRecord"] = ExprRecord;
  exports["ExprParens"] = ExprParens;
  exports["ExprTyped"] = ExprTyped;
  exports["ExprInfix"] = ExprInfix;
  exports["ExprOp"] = ExprOp;
  exports["ExprOpName"] = ExprOpName;
  exports["ExprNegate"] = ExprNegate;
  exports["ExprRecordAccessor"] = ExprRecordAccessor;
  exports["ExprRecordUpdate"] = ExprRecordUpdate;
  exports["ExprApp"] = ExprApp;
  exports["ExprLambda"] = ExprLambda;
  exports["ExprIf"] = ExprIf;
  exports["ExprCase"] = ExprCase;
  exports["ExprLet"] = ExprLet;
  exports["ExprDo"] = ExprDo;
  exports["ExprAdo"] = ExprAdo;
  exports["RecordPun"] = RecordPun;
  exports["RecordField"] = RecordField;
  exports["RecordUpdateLeaf"] = RecordUpdateLeaf;
  exports["RecordUpdateBranch"] = RecordUpdateBranch;
  exports["LetBindingSignature"] = LetBindingSignature;
  exports["LetBindingName"] = LetBindingName;
  exports["LetBindingPattern"] = LetBindingPattern;
  exports["LetBindingError"] = LetBindingError;
  exports["DoLet"] = DoLet;
  exports["DoDiscard"] = DoDiscard;
  exports["DoBind"] = DoBind;
  exports["DoError"] = DoError;
  exports["BinderWildcard"] = BinderWildcard;
  exports["BinderVar"] = BinderVar;
  exports["BinderNamed"] = BinderNamed;
  exports["BinderConstructor"] = BinderConstructor;
  exports["BinderBoolean"] = BinderBoolean;
  exports["BinderChar"] = BinderChar;
  exports["BinderString"] = BinderString;
  exports["BinderInt"] = BinderInt;
  exports["BinderNumber"] = BinderNumber;
  exports["BinderArray"] = BinderArray;
  exports["BinderRecord"] = BinderRecord;
  exports["BinderParens"] = BinderParens;
  exports["BinderTyped"] = BinderTyped;
  exports["BinderOp"] = BinderOp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["PureScript.CST.Layout"] = $PS["PureScript.CST.Layout"] || {};
  var exports = $PS["PureScript.CST.Layout"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var LytRoot = (function () {
      function LytRoot() {

      };
      LytRoot.value = new LytRoot();
      return LytRoot;
  })();
  var LytTopDecl = (function () {
      function LytTopDecl() {

      };
      LytTopDecl.value = new LytTopDecl();
      return LytTopDecl;
  })();
  var LytTopDeclHead = (function () {
      function LytTopDeclHead() {

      };
      LytTopDeclHead.value = new LytTopDeclHead();
      return LytTopDeclHead;
  })();
  var LytDeclGuard = (function () {
      function LytDeclGuard() {

      };
      LytDeclGuard.value = new LytDeclGuard();
      return LytDeclGuard;
  })();
  var LytCase = (function () {
      function LytCase() {

      };
      LytCase.value = new LytCase();
      return LytCase;
  })();
  var LytCaseBinders = (function () {
      function LytCaseBinders() {

      };
      LytCaseBinders.value = new LytCaseBinders();
      return LytCaseBinders;
  })();
  var LytCaseGuard = (function () {
      function LytCaseGuard() {

      };
      LytCaseGuard.value = new LytCaseGuard();
      return LytCaseGuard;
  })();
  var LytLambdaBinders = (function () {
      function LytLambdaBinders() {

      };
      LytLambdaBinders.value = new LytLambdaBinders();
      return LytLambdaBinders;
  })();
  var LytParen = (function () {
      function LytParen() {

      };
      LytParen.value = new LytParen();
      return LytParen;
  })();
  var LytBrace = (function () {
      function LytBrace() {

      };
      LytBrace.value = new LytBrace();
      return LytBrace;
  })();
  var LytSquare = (function () {
      function LytSquare() {

      };
      LytSquare.value = new LytSquare();
      return LytSquare;
  })();
  var LytIf = (function () {
      function LytIf() {

      };
      LytIf.value = new LytIf();
      return LytIf;
  })();
  var LytThen = (function () {
      function LytThen() {

      };
      LytThen.value = new LytThen();
      return LytThen;
  })();
  var LytProperty = (function () {
      function LytProperty() {

      };
      LytProperty.value = new LytProperty();
      return LytProperty;
  })();
  var LytForall = (function () {
      function LytForall() {

      };
      LytForall.value = new LytForall();
      return LytForall;
  })();
  var LytTick = (function () {
      function LytTick() {

      };
      LytTick.value = new LytTick();
      return LytTick;
  })();
  var LytLet = (function () {
      function LytLet() {

      };
      LytLet.value = new LytLet();
      return LytLet;
  })();
  var LytLetStmt = (function () {
      function LytLetStmt() {

      };
      LytLetStmt.value = new LytLetStmt();
      return LytLetStmt;
  })();
  var LytWhere = (function () {
      function LytWhere() {

      };
      LytWhere.value = new LytWhere();
      return LytWhere;
  })();
  var LytOf = (function () {
      function LytOf() {

      };
      LytOf.value = new LytOf();
      return LytOf;
  })();
  var LytDo = (function () {
      function LytDo() {

      };
      LytDo.value = new LytDo();
      return LytDo;
  })();
  var LytAdo = (function () {
      function LytAdo() {

      };
      LytAdo.value = new LytAdo();
      return LytAdo;
  })();
  var lytToken = function (pos) {
      return function (value) {
          return {
              range: {
                  start: pos,
                  end: pos
              },
              leadingComments: [  ],
              trailingComments: [  ],
              value: value
          };
      };
  };
  var isTopDecl = function (tokPos) {
      return function (v) {
          if (v instanceof Data_List_Types.Cons && (v.value0.value1 instanceof LytWhere && (v.value1 instanceof Data_List_Types.Cons && (v.value1.value0.value1 instanceof LytRoot && (v.value1.value1 instanceof Data_List_Types.Nil && tokPos.column === v.value0.value0.column))))) {
              return true;
          };
          return false;
      };
  };
  var isIndented = function (v) {
      if (v instanceof LytLet) {
          return true;
      };
      if (v instanceof LytLetStmt) {
          return true;
      };
      if (v instanceof LytWhere) {
          return true;
      };
      if (v instanceof LytOf) {
          return true;
      };
      if (v instanceof LytDo) {
          return true;
      };
      if (v instanceof LytAdo) {
          return true;
      };
      return false;
  };
  var eqLayoutDelim = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof LytRoot && y instanceof LytRoot) {
              return true;
          };
          if (x instanceof LytTopDecl && y instanceof LytTopDecl) {
              return true;
          };
          if (x instanceof LytTopDeclHead && y instanceof LytTopDeclHead) {
              return true;
          };
          if (x instanceof LytDeclGuard && y instanceof LytDeclGuard) {
              return true;
          };
          if (x instanceof LytCase && y instanceof LytCase) {
              return true;
          };
          if (x instanceof LytCaseBinders && y instanceof LytCaseBinders) {
              return true;
          };
          if (x instanceof LytCaseGuard && y instanceof LytCaseGuard) {
              return true;
          };
          if (x instanceof LytLambdaBinders && y instanceof LytLambdaBinders) {
              return true;
          };
          if (x instanceof LytParen && y instanceof LytParen) {
              return true;
          };
          if (x instanceof LytBrace && y instanceof LytBrace) {
              return true;
          };
          if (x instanceof LytSquare && y instanceof LytSquare) {
              return true;
          };
          if (x instanceof LytIf && y instanceof LytIf) {
              return true;
          };
          if (x instanceof LytThen && y instanceof LytThen) {
              return true;
          };
          if (x instanceof LytProperty && y instanceof LytProperty) {
              return true;
          };
          if (x instanceof LytForall && y instanceof LytForall) {
              return true;
          };
          if (x instanceof LytTick && y instanceof LytTick) {
              return true;
          };
          if (x instanceof LytLet && y instanceof LytLet) {
              return true;
          };
          if (x instanceof LytLetStmt && y instanceof LytLetStmt) {
              return true;
          };
          if (x instanceof LytWhere && y instanceof LytWhere) {
              return true;
          };
          if (x instanceof LytOf && y instanceof LytOf) {
              return true;
          };
          if (x instanceof LytDo && y instanceof LytDo) {
              return true;
          };
          if (x instanceof LytAdo && y instanceof LytAdo) {
              return true;
          };
          return false;
      };
  });
  var insertLayout = function (v) {
      return function (nextPos) {
          return function (stack) {
              var sepP = function (lytPos) {
                  return v.range.start.column === lytPos.column && v.range.start.line !== lytPos.line;
              };
              var pushStack = function (lytPos) {
                  return function (lyt) {
                      return function (v1) {
                          return new Data_Tuple.Tuple(new Data_List_Types.Cons(new Data_Tuple.Tuple(lytPos, lyt), v1.value0), v1.value1);
                      };
                  };
              };
              var popStack = function (v1) {
                  return function (v2) {
                      if (v2.value0 instanceof Data_List_Types.Cons && v1(v2.value0.value0.value1)) {
                          return new Data_Tuple.Tuple(v2.value0.value1, v2.value1);
                      };
                      return v2;
                  };
              };
              var offsideP = function (lytPos) {
                  return function (lyt) {
                      return isIndented(lyt) && v.range.start.column < lytPos.column;
                  };
              };
              var offsideEndP = function (lytPos) {
                  return function (lyt) {
                      return isIndented(lyt) && v.range.start.column <= lytPos.column;
                  };
              };
              var insertToken = function (token) {
                  return function (v1) {
                      return new Data_Tuple.Tuple(v1.value0, Data_Array.snoc(v1.value1)(new Data_Tuple.Tuple(token, v1.value0)));
                  };
              };
              var insertStart = function (lyt) {
                  return function (v1) {
                      var v2 = Data_Foldable.find(Data_List_Types.foldableList)(function ($298) {
                          return isIndented(Data_Tuple.snd($298));
                      })(v1.value0);
                      if (v2 instanceof Data_Maybe.Just && nextPos.column <= v2.value0.value0.column) {
                          return v1;
                      };
                      return insertToken(lytToken(nextPos)(new PureScript_CST_Types.TokLayoutStart(nextPos.column)))(pushStack(nextPos)(lyt)(v1));
                  };
              };
              var insertEnd = function (indent) {
                  return insertToken(lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutEnd(indent)));
              };
              var indentedP = Data_Function["const"](isIndented);
              var indentSepP = function (lytPos) {
                  return function (lyt) {
                      return isIndented(lyt) && sepP(lytPos);
                  };
              };
              var insertSep = function (v1) {
                  var sepTok = lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutSep(v.range.start.column));
                  if (v1.value0 instanceof Data_List_Types.Cons && (v1.value0.value0.value1 instanceof LytTopDecl && sepP(v1.value0.value0.value0))) {
                      return insertToken(sepTok)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
                  };
                  if (v1.value0 instanceof Data_List_Types.Cons && (v1.value0.value0.value1 instanceof LytTopDeclHead && sepP(v1.value0.value0.value0))) {
                      return insertToken(sepTok)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
                  };
                  if (v1.value0 instanceof Data_List_Types.Cons && indentSepP(v1.value0.value0.value0)(v1.value0.value0.value1)) {
                      if (v1.value0.value0.value1 instanceof LytOf) {
                          return pushStack(v.range.start)(LytCaseBinders.value)(insertToken(sepTok)(v1));
                      };
                      return insertToken(sepTok)(v1);
                  };
                  return v1;
              };
              var collapse = function (p) {
                  var go = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Data_List_Types.Cons && p(v1.value0.value0)(v1.value0.value1)) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = (function () {
                                      var $111 = isIndented(v1.value0.value1);
                                      if ($111) {
                                          return Data_Array.snoc(acc)(new Data_Tuple.Tuple(lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutEnd(v1.value0.value0.column)), v1.value1));
                                      };
                                      return acc;
                                  })();
                                  return;
                              };
                              $tco_done = true;
                              return new Data_Tuple.Tuple(v1, acc);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  return Data_Tuple.uncurry(go);
              };
              var insertDefault = function (state) {
                  return insertToken(v)(insertSep(collapse(offsideP)(state)));
              };
              var insertKwProperty = function (k) {
                  return function (state) {
                      var v1 = insertDefault(state);
                      if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytProperty) {
                          return new Data_Tuple.Tuple(v1.value0.value1, v1.value1);
                      };
                      return k(v1);
                  };
              };
              var insert = function (v1) {
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "data")) {
                      var v2 = insertDefault(v1);
                      if (isTopDecl(v.range.start)(v2.value0)) {
                          return pushStack(v.range.start)(LytTopDecl.value)(v2);
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(v2);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "class")) {
                      var v2 = insertDefault(v1);
                      if (isTopDecl(v.range.start)(v2.value0)) {
                          return pushStack(v.range.start)(LytTopDeclHead.value)(v2);
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(v2);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "where")) {
                      var whereP = function (v2) {
                          return function (v3) {
                              if (v3 instanceof LytDo) {
                                  return true;
                              };
                              return offsideEndP(v2)(v3);
                          };
                      };
                      if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytTopDeclHead) {
                          return insertStart(LytWhere.value)(insertToken(v)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1)));
                      };
                      if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytProperty) {
                          return insertToken(v)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
                      };
                      return insertStart(LytWhere.value)(insertToken(v)(collapse(whereP)(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "in")) {
                      var inP = function (v2) {
                          return function (v3) {
                              if (v3 instanceof LytLet) {
                                  return false;
                              };
                              if (v3 instanceof LytAdo) {
                                  return false;
                              };
                              return isIndented(v3);
                          };
                      };
                      var v2 = collapse(inP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && (v2.value0.value0.value1 instanceof LytLetStmt && (v2.value0.value1 instanceof Data_List_Types.Cons && v2.value0.value1.value0.value1 instanceof LytAdo))) {
                          return insertToken(v)(insertEnd(v2.value0.value1.value0.value0.column)(insertEnd(v2.value0.value0.value0.column)(new Data_Tuple.Tuple(v2.value0.value1.value1, v2.value1))));
                      };
                      if (v2.value0 instanceof Data_List_Types.Cons && isIndented(v2.value0.value0.value1)) {
                          return insertToken(v)(insertEnd(v2.value0.value0.value0.column)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1)));
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "let")) {
                      var next = function (v2) {
                          if (v2.value0 instanceof Data_List_Types.Cons && (v2.value0.value0.value1 instanceof LytDo && v2.value0.value0.value0.column === v.range.start.column)) {
                              return insertStart(LytLetStmt.value)(v2);
                          };
                          if (v2.value0 instanceof Data_List_Types.Cons && (v2.value0.value0.value1 instanceof LytAdo && v2.value0.value0.value0.column === v.range.start.column)) {
                              return insertStart(LytLetStmt.value)(v2);
                          };
                          return insertStart(LytLet.value)(v2);
                      };
                      return insertKwProperty(next)(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value1 === "do") {
                      return insertKwProperty(insertStart(LytDo.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value1 === "ado") {
                      return insertKwProperty(insertStart(LytAdo.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "case")) {
                      return insertKwProperty(pushStack(v.range.start)(LytCase.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "of")) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytCase) {
                          return pushStack(nextPos)(LytCaseBinders.value)(insertStart(LytOf.value)(insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1))));
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(insertDefault(v2));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "if")) {
                      return insertKwProperty(pushStack(v.range.start)(LytIf.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "then")) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytIf) {
                          return pushStack(v.range.start)(LytThen.value)(insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1)));
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "else")) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytThen) {
                          return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
                      };
                      var v3 = collapse(offsideP)(v1);
                      if (isTopDecl(v.range.start)(v3.value0)) {
                          return insertToken(v)(v3);
                      };
                      return popStack(function (v4) {
                          return Data_Eq.eq(eqLayoutDelim)(v4)(LytProperty.value);
                      })(insertToken(v)(insertSep(v3)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokForall) {
                      return insertKwProperty(pushStack(v.range.start)(LytForall.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokBackslash) {
                      return pushStack(v.range.start)(LytLambdaBinders.value)(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokRightArrow) {
                      var guardP = function (v2) {
                          if (v2 instanceof LytCaseBinders) {
                              return true;
                          };
                          if (v2 instanceof LytCaseGuard) {
                              return true;
                          };
                          if (v2 instanceof LytLambdaBinders) {
                              return true;
                          };
                          return false;
                      };
                      var arrowP = function (v2) {
                          return function (v3) {
                              if (v3 instanceof LytDo) {
                                  return true;
                              };
                              if (v3 instanceof LytOf) {
                                  return false;
                              };
                              return offsideEndP(v2)(v3);
                          };
                      };
                      return insertToken(v)(popStack(guardP)(collapse(arrowP)(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokEquals) {
                      var equalsP = function (v2) {
                          return function (v3) {
                              if (v3 instanceof LytWhere) {
                                  return true;
                              };
                              if (v3 instanceof LytLet) {
                                  return true;
                              };
                              if (v3 instanceof LytLetStmt) {
                                  return true;
                              };
                              return false;
                          };
                      };
                      var v2 = collapse(equalsP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytDeclGuard) {
                          return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
                      };
                      return insertDefault(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokPipe) {
                      var v2 = collapse(offsideEndP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytOf) {
                          return insertToken(v)(pushStack(v.range.start)(LytCaseGuard.value)(v2));
                      };
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytLet) {
                          return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
                      };
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytLetStmt) {
                          return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
                      };
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytWhere) {
                          return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
                      };
                      return insertDefault(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokTick) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytTick) {
                          return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
                      };
                      return pushStack(v.range.start)(LytTick.value)(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokComma) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytBrace) {
                          return pushStack(v.range.start)(LytProperty.value)(insertToken(v)(v2));
                      };
                      return insertToken(v)(v2);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokDot) {
                      var v2 = insertDefault(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytForall) {
                          return new Data_Tuple.Tuple(v2.value0.value1, v2.value1);
                      };
                      return pushStack(v.range.start)(LytProperty.value)(v2);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLeftParen) {
                      return pushStack(v.range.start)(LytParen.value)(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLeftBrace) {
                      return pushStack(v.range.start)(LytProperty.value)(pushStack(v.range.start)(LytBrace.value)(insertDefault(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLeftSquare) {
                      return pushStack(v.range.start)(LytSquare.value)(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokRightParen) {
                      return insertToken(v)(popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytParen.value);
                      })(collapse(indentedP)(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokRightBrace) {
                      return insertToken(v)(popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytBrace.value);
                      })(popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytProperty.value);
                      })(collapse(indentedP)(v1))));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokRightSquare) {
                      return insertToken(v)(popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytSquare.value);
                      })(collapse(indentedP)(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokString) {
                      return popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytProperty.value);
                      })(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value0 instanceof Data_Maybe.Nothing) {
                      return popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytProperty.value);
                      })(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokOperator) {
                      return insertToken(v)(insertSep(collapse(offsideEndP)(v1)));
                  };
                  return insertDefault(v1);
              };
              return insert(new Data_Tuple.Tuple(stack, [  ]));
          };
      };
  }; 
  var currentIndent = (function () {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Types.Cons) {
                  if (isIndented(v.value0.value1)) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0.value0);
                  };
                  if (Data_Boolean.otherwise) {
                      $copy_v = v.value1;
                      return;
                  };
              };
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return go;
  })();
  exports["LytRoot"] = LytRoot;
  exports["currentIndent"] = currentIndent;
  exports["isIndented"] = isIndented;
  exports["insertLayout"] = insertLayout;
  exports["lytToken"] = lytToken;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["PureScript.CST.TokenStream"] = $PS["PureScript.CST.TokenStream"] || {};
  var exports = $PS["PureScript.CST.TokenStream"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var PureScript_CST_Layout = $PS["PureScript.CST.Layout"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var TokenEOF = (function () {
      function TokenEOF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokenEOF.create = function (value0) {
          return function (value1) {
              return new TokenEOF(value0, value1);
          };
      };
      return TokenEOF;
  })();
  var TokenError = (function () {
      function TokenError(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      TokenError.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new TokenError(value0, value1, value2, value3);
                  };
              };
          };
      };
      return TokenError;
  })();
  var TokenCons = (function () {
      function TokenCons(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      TokenCons.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new TokenCons(value0, value1, value2, value3);
                  };
              };
          };
      };
      return TokenCons;
  })();
  var TokenStream = function (x) {
      return x;
  }; 
  var step = (function () {
      var $29 = Data_Newtype.unwrap();
      return function ($30) {
          return Data_Lazy.force($29($30));
      };
  })();
  var unwindLayout = function (pos) {
      return function (eof) {
          var go = function (stk) {
              return TokenStream(Data_Lazy.defer(function (v) {
                  if (stk instanceof Data_List_Types.Nil) {
                      return step(eof);
                  };
                  if (stk instanceof Data_List_Types.Cons) {
                      if (stk.value0.value1 instanceof PureScript_CST_Layout.LytRoot) {
                          return step(eof);
                      };
                      if (PureScript_CST_Layout.isIndented(stk.value0.value1)) {
                          return new TokenCons(PureScript_CST_Layout.lytToken(pos)(new PureScript_CST_Types.TokLayoutEnd(stk.value0.value0.column)), pos, go(stk.value1), stk.value1);
                      };
                      if (Data_Boolean.otherwise) {
                          return step(go(stk.value1));
                      };
                      throw new Error("Failed pattern match at PureScript.CST.TokenStream (line 59, column 7 - line 65, column 27): " + [ stk.value0.value1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.TokenStream (line 56, column 43 - line 65, column 27): " + [ stk.constructor.name ]);
              }));
          };
          return go;
      };
  };
  var layoutStack = function (stream) {
      var v = step(stream);
      if (v instanceof TokenEOF) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof TokenError) {
          return v.value3;
      };
      if (v instanceof TokenCons) {
          return v.value3;
      };
      throw new Error("Failed pattern match at PureScript.CST.TokenStream (line 48, column 22 - line 51, column 29): " + [ v.constructor.name ]);
  };
  var consTokens = function (dictFoldable) {
      var go = function (v) {
          return function (v1) {
              return Data_Tuple.Tuple.create(v.value0.range.start)(TokenStream(Data_Lazy.defer(function (v2) {
                  return new TokenCons(v.value0, v1.value0, v1.value1, v.value1);
              })));
          };
      };
      return Data_Function.flip(Data_Foldable.foldr(dictFoldable)(go));
  };
  exports["TokenStream"] = TokenStream;
  exports["TokenEOF"] = TokenEOF;
  exports["TokenError"] = TokenError;
  exports["TokenCons"] = TokenCons;
  exports["step"] = step;
  exports["consTokens"] = consTokens;
  exports["layoutStack"] = layoutStack;
  exports["unwindLayout"] = unwindLayout;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["PureScript.CST.Lexer"] = $PS["PureScript.CST.Lexer"] || {};
  var exports = $PS["PureScript.CST.Lexer"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Char = $PS["Data.Char"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Number = $PS["Data.Number"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Regex_Unsafe = $PS["Data.String.Regex.Unsafe"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var PureScript_CST_Errors = $PS["PureScript.CST.Errors"];
  var PureScript_CST_Layout = $PS["PureScript.CST.Layout"];
  var PureScript_CST_TokenStream = $PS["PureScript.CST.TokenStream"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var LexFail = (function () {
      function LexFail(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LexFail.create = function (value0) {
          return function (value1) {
              return new LexFail(value0, value1);
          };
      };
      return LexFail;
  })();
  var LexSucc = (function () {
      function LexSucc(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LexSucc.create = function (value0) {
          return function (value1) {
              return new LexSucc(value0, value1);
          };
      };
      return LexSucc;
  })();
  var Lex = function (x) {
      return x;
  };
  var $$try = function (v) {
      return function (str) {
          var v1 = v(str);
          if (v1 instanceof LexFail) {
              return new LexFail(v1.value0, str);
          };
          if (v1 instanceof LexSucc) {
              return new LexSucc(v1.value0, v1.value1);
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 81, column 3 - line 83, column 31): " + [ v1.constructor.name ]);
      };
  };
  var toModuleName = function (v) {
      if (v.length === 0) {
          return Data_Maybe.Nothing.value;
      };
      return Data_Maybe.Just.create(PureScript_CST_Types.ModuleName(Data_String_Common.joinWith(".")(v)));
  };
  var qualLength = Data_Maybe.maybe(0)((function () {
      var $244 = Data_Semiring.add(Data_Semiring.semiringInt)(1);
      var $245 = Data_Newtype.unwrap();
      return function ($246) {
          return $244(Data_String_CodePoints.length($245($246)));
      };
  })());
  var optional = function (v) {
      return function (str) {
          var v1 = v(str);
          if (v1 instanceof LexFail) {
              if (Data_String_CodeUnits.length(str) === Data_String_CodeUnits.length(v1.value1)) {
                  return new LexSucc(Data_Maybe.Nothing.value, str);
              };
              if (Data_Boolean.otherwise) {
                  return new LexFail(v1.value0, v1.value1);
              };
          };
          if (v1 instanceof LexSucc) {
              return new LexSucc(new Data_Maybe.Just(v1.value0), v1.value1);
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 137, column 3 - line 144, column 25): " + [ v1.constructor.name ]);
      };
  };    
  var mkUnexpected = function (str) {
      var start = Data_String_CodePoints.take(6)(str);
      var len = Data_String_CodePoints.length(start);
      var $87 = len === 0;
      if ($87) {
          return "end of file";
      };
      var $88 = len < 6;
      if ($88) {
          return start;
      };
      return start + "...";
  };
  var regex = function (mkErr) {
      return function (regexStr) {
          var matchRegex = Data_String_Regex_Unsafe.unsafeRegex("^(?:" + (regexStr + ")"))(Data_String_Regex_Flags.unicode);
          return function (str) {
              var v = Data_String_Regex.match(matchRegex)(str);
              var v1 = function (v2) {
                  return new LexFail(function (v3) {
                      return mkErr(mkUnexpected(str));
                  }, str);
              };
              if (v instanceof Data_Maybe.Just) {
                  var $90 = Data_Array_NonEmpty.head(v.value0);
                  if ($90 instanceof Data_Maybe.Just) {
                      return new LexSucc($90.value0, Data_String_CodeUnits.drop(Data_String_CodeUnits.length($90.value0))(str));
                  };
                  return v1(true);
              };
              return v1(true);
          };
      };
  };
  var satisfy = function (mkErr) {
      return function (p) {
          return function (str) {
              var v = Data_String_CodeUnits.charAt(0)(str);
              if (v instanceof Data_Maybe.Just && p(v.value0)) {
                  return new LexSucc(v.value0, Data_String_CodeUnits.drop(1)(str));
              };
              return new LexFail(function (v1) {
                  return mkErr(mkUnexpected(str));
              }, str);
          };
      };
  };
  var string = function (mkErr) {
      return function (match) {
          return function (str) {
              var $95 = Data_String_CodeUnits.take(Data_String_CodeUnits.length(match))(str) === match;
              if ($95) {
                  return new LexSucc(match, Data_String_CodeUnits.drop(Data_String_CodeUnits.length(match))(str));
              };
              return new LexFail(function (v) {
                  return mkErr(mkUnexpected(str));
              }, str);
          };
      };
  };
  var many = function (v) {
      return function (str) {
          var go = function ($copy_acc) {
              return function ($copy_str$prime) {
                  var $tco_var_acc = $copy_acc;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(acc, str$prime) {
                      var v1 = v(str$prime);
                      if (v1 instanceof LexFail) {
                          if (Data_String_CodeUnits.length(str$prime) === Data_String_CodeUnits.length(v1.value1)) {
                              $tco_done = true;
                              return new LexSucc(acc, str$prime);
                          };
                          if (Data_Boolean.otherwise) {
                              $tco_done = true;
                              return new LexFail(v1.value0, v1.value1);
                          };
                      };
                      if (v1 instanceof LexSucc) {
                          $tco_var_acc = Data_Array.snoc(acc)(v1.value0);
                          $copy_str$prime = v1.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Lexer (line 163, column 7 - line 170, column 38): " + [ v1.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_acc, $copy_str$prime);
                  };
                  return $tco_result;
              };
          };
          return go([  ])(str);
      };
  };
  var functorLex = new Data_Functor.Functor(function (f) {
      return function (v) {
          return function (str) {
              var v1 = v(str);
              if (v1 instanceof LexFail) {
                  return new LexFail(v1.value0, v1.value1);
              };
              if (v1 instanceof LexSucc) {
                  return new LexSucc(f(v1.value0), v1.value1);
              };
              throw new Error("Failed pattern match at PureScript.CST.Lexer (line 43, column 5 - line 45, column 37): " + [ v1.constructor.name ]);
          };
      };
  });
  var spaceComment = Data_Functor.map(functorLex)(Data_String_CodeUnits.length)(regex(PureScript_CST_Errors.LexExpected.create("spaces"))(" +"));
  var fail = function ($249) {
      return Lex(LexFail.create(Data_Function["const"]($249)));
  };
  var char$prime = function (mkErr) {
      return function (res) {
          return function (match) {
              return function (str) {
                  var $110 = Data_String_CodeUnits.singleton(match) === Data_String_CodeUnits.take(1)(str);
                  if ($110) {
                      return new LexSucc(res, Data_String_CodeUnits.drop(1)(str));
                  };
                  return new LexFail(function (v) {
                      return mkErr(mkUnexpected(str));
                  }, str);
              };
          };
      };
  };
  var $$char = function (mkErr) {
      return function (match) {
          return function (str) {
              var $111 = Data_String_CodeUnits.singleton(match) === Data_String_CodeUnits.take(1)(str);
              if ($111) {
                  return new LexSucc(match, Data_String_CodeUnits.drop(1)(str));
              };
              return new LexFail(function (v) {
                  return mkErr(mkUnexpected(str));
              }, str);
          };
      };
  };
  var bumpText = function (v) {
      return function (colOffset) {
          return function (str) {
              var go = function ($copy_n) {
                  return function ($copy_ix) {
                      var $tco_var_n = $copy_n;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(n, ix) {
                          var v1 = Data_String_CodeUnits["indexOf'"]("\x0a")(ix)(str);
                          if (v1 instanceof Data_Maybe.Just) {
                              $tco_var_n = n + 1 | 0;
                              $copy_ix = v1.value0 + 1 | 0;
                              return;
                          };
                          if (v1 instanceof Data_Maybe.Nothing) {
                              if (n === 0) {
                                  $tco_done = true;
                                  return {
                                      line: v.line,
                                      column: (v.column + Data_String_CodePoints.length(str) | 0) + (colOffset * 2 | 0) | 0
                                  };
                              };
                              if (Data_Boolean.otherwise) {
                                  $tco_done = true;
                                  return {
                                      line: v.line + n | 0,
                                      column: Data_String_CodePoints.length(Data_String_CodeUnits.drop(ix)(str)) + colOffset | 0
                                  };
                              };
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 319, column 13 - line 328, column 12): " + [ v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_n, $copy_ix);
                      };
                      return $tco_result;
                  };
              };
              return go(0)(0);
          };
      };
  };
  var bumpToken = function (v) {
      return function (v1) {
          if (v1 instanceof PureScript_CST_Types.TokLeftParen) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightParen) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLeftBrace) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightBrace) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLeftSquare) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightSquare) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLeftArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLeftArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightFatArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightFatArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokDoubleColon && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokDoubleColon && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokForall && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 6 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokForall && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokEquals) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokPipe) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokTick) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokDot) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokComma) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokUnderscore) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokBackslash) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokAt) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLowerName) {
              return {
                  line: v.line,
                  column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokUpperName) {
              return {
                  line: v.line,
                  column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokOperator) {
              return {
                  line: v.line,
                  column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokSymbolName) {
              return {
                  line: v.line,
                  column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokSymbolArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokSymbolArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 4 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokHole) {
              return {
                  line: v.line,
                  column: (v.column + Data_String_CodePoints.length(v1.value0) | 0) + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokChar) {
              return {
                  line: v.line,
                  column: (v.column + Data_String_CodePoints.length(v1.value0) | 0) + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokInt) {
              return {
                  line: v.line,
                  column: v.column + Data_String_CodePoints.length(v1.value0) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokNumber) {
              return {
                  line: v.line,
                  column: v.column + Data_String_CodePoints.length(v1.value0) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokString) {
              return bumpText(v)(1)(v1.value0);
          };
          if (v1 instanceof PureScript_CST_Types.TokRawString) {
              return bumpText(v)(3)(v1.value0);
          };
          if (v1 instanceof PureScript_CST_Types.TokLayoutStart) {
              return v;
          };
          if (v1 instanceof PureScript_CST_Types.TokLayoutSep) {
              return v;
          };
          if (v1 instanceof PureScript_CST_Types.TokLayoutEnd) {
              return v;
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 236, column 34 - line 314, column 8): " + [ v1.constructor.name ]);
      };
  };
  var bumpComment = function (v) {
      return function (v1) {
          if (v1 instanceof PureScript_CST_Types.Comment) {
              return bumpText(v)(0)(v1.value0);
          };
          if (v1 instanceof PureScript_CST_Types.Space) {
              return {
                  line: v.line,
                  column: v.column + v1.value0 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.Line) {
              return {
                  line: v.line + v1.value1 | 0,
                  column: 0
              };
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 331, column 36 - line 337, column 34): " + [ v1.constructor.name ]);
      };
  };
  var applyLex = new Control_Apply.Apply(function () {
      return functorLex;
  }, function (v) {
      return function (v1) {
          return function (str) {
              var v2 = v(str);
              if (v2 instanceof LexFail) {
                  return new LexFail(v2.value0, v2.value1);
              };
              if (v2 instanceof LexSucc) {
                  var v3 = v1(v2.value1);
                  if (v3 instanceof LexFail) {
                      return new LexFail(v3.value0, v3.value1);
                  };
                  if (v3 instanceof LexSucc) {
                      return new LexSucc(v2.value0(v3.value0), v3.value1);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Lexer (line 52, column 9 - line 55, column 32): " + [ v3.constructor.name ]);
              };
              throw new Error("Failed pattern match at PureScript.CST.Lexer (line 49, column 5 - line 55, column 32): " + [ v2.constructor.name ]);
          };
      };
  });
  var bindLex = new Control_Bind.Bind(function () {
      return applyLex;
  }, function (v) {
      return function (k) {
          return function (str) {
              var v1 = v(str);
              if (v1 instanceof LexFail) {
                  return new LexFail(v1.value0, v1.value1);
              };
              if (v1 instanceof LexSucc) {
                  var v2 = k(v1.value0);
                  return v2(v1.value1);
              };
              throw new Error("Failed pattern match at PureScript.CST.Lexer (line 62, column 5 - line 66, column 16): " + [ v1.constructor.name ]);
          };
      };
  });
  var applicativeLex = new Control_Applicative.Applicative(function () {
      return applyLex;
  }, function ($250) {
      return Lex(LexSucc.create($250));
  });
  var altLex = new Control_Alt.Alt(function () {
      return functorLex;
  }, function (v) {
      return function (v1) {
          return function (str) {
              var v2 = v(str);
              if (v2 instanceof LexFail) {
                  if (Data_String_CodeUnits.length(str) === Data_String_CodeUnits.length(v2.value1)) {
                      return v1(str);
                  };
                  if (Data_Boolean.otherwise) {
                      return new LexFail(v2.value0, v2.value1);
                  };
              };
              if (v2 instanceof LexSucc) {
                  return new LexSucc(v2.value0, v2.value1);
              };
              throw new Error("Failed pattern match at PureScript.CST.Lexer (line 70, column 5 - line 77, column 20): " + [ v2.constructor.name ]);
          };
      };
  });
  var comment = Control_Alt.alt(altLex)(regex(PureScript_CST_Errors.LexExpected.create("block comment"))("\\{-(-(?!\\})|[^-]+)*-\\}"))(regex(PureScript_CST_Errors.LexExpected.create("line comment"))("--[^\\r\\n]*"));
  var lineComment = Control_Alt.alt(altLex)(Data_Functor.map(functorLex)((function () {
      var $251 = PureScript_CST_Types.Line.create(PureScript_CST_Types.LF.value);
      return function ($252) {
          return $251(Data_String_CodePoints.length($252));
      };
  })())(regex(PureScript_CST_Errors.LexExpected.create("newline"))("\x0a+")))(Data_Functor.map(functorLex)((function () {
      var $253 = PureScript_CST_Types.Line.create(PureScript_CST_Types.CRLF.value);
      return function ($254) {
          return $253((function (v) {
              return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v)(2);
          })(Data_String_CodePoints.length($254)));
      };
  })())(regex(PureScript_CST_Errors.LexExpected.create("newline"))("(?:\x0d\x0a)+")));
  var leadingComments = many(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Data_Functor.map(functorLex)(PureScript_CST_Types.Comment.create)(comment))(Data_Functor.map(functorLex)(PureScript_CST_Types.Space.create)(spaceComment)))(lineComment));
  var token = (function () {
      var tokenTick = char$prime(PureScript_CST_Errors.LexExpected.create("backtick"))(PureScript_CST_Types.TokTick.value)("`");
      var tokenRightSquare = char$prime(PureScript_CST_Errors.LexExpected.create("right square"))(PureScript_CST_Types.TokRightSquare.value)("]");
      var tokenRightParen = char$prime(PureScript_CST_Errors.LexExpected.create("right paren"))(PureScript_CST_Types.TokRightParen.value)(")");
      var tokenRightBrace = char$prime(PureScript_CST_Errors.LexExpected.create("right brace"))(PureScript_CST_Types.TokRightBrace.value)("}");
      var tokenLeftSquare = char$prime(PureScript_CST_Errors.LexExpected.create("left square"))(PureScript_CST_Types.TokLeftSquare.value)("[");
      var tokenLeftParen = char$prime(PureScript_CST_Errors.LexExpected.create("left paren"))(PureScript_CST_Types.TokLeftParen.value)("(");
      var tokenLeftBrace = char$prime(PureScript_CST_Errors.LexExpected.create("left brace"))(PureScript_CST_Types.TokLeftBrace.value)("{");
      var tokenComma = char$prime(PureScript_CST_Errors.LexExpected.create("comma"))(PureScript_CST_Types.TokComma.value)(",");
      var stripUnderscores = Data_String_Common.replaceAll("_")("");
      var stringSpaceEscapeRegex = regex(PureScript_CST_Errors.LexExpected.create("whitespace escape"))("\\\\[ \\r\\n]+\\\\");
      var stringCharsRegex = regex(PureScript_CST_Errors.LexExpected.create("string characters"))("[^\"\\\\]+");
      var rawStringCharsRegex = regex(PureScript_CST_Errors.LexExpected.create("raw string characters"))("\"\"\"\"{0,2}([^\"]+\"{1,2})*[^\"]*\"\"\"");
      var parseSymbolIdent = regex(PureScript_CST_Errors.LexExpected.create("symbol"))("(?:[:!#$%&*+./<=>?@\\\\^|~-]|(?!\\p{P})\\p{S})+");
      var parseSymbol = Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  if (v === "->") {
                      return new PureScript_CST_Types.TokSymbolArrow(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u2192") {
                      return new PureScript_CST_Types.TokSymbolArrow(PureScript_CST_Types.Unicode.value);
                  };
                  return new PureScript_CST_Types.TokSymbolName(Data_Maybe.Nothing.value, v);
              };
              return new PureScript_CST_Types.TokSymbolName(v1, v);
          };
      })($$try(Control_Apply.applyFirst(applyLex)(Control_Apply.applySecond(applyLex)(tokenLeftParen)(parseSymbolIdent))(tokenRightParen)));
      var parseStringSpaceEscape = Data_Functor.map(functorLex)(function (v) {
          return {
              raw: v,
              string: ""
          };
      })(stringSpaceEscapeRegex);
      var parseStringChars = Data_Functor.map(functorLex)(function (v) {
          return {
              raw: v,
              string: v
          };
      })(stringCharsRegex);
      var parseRawString = Data_Functor.map(functorLex)(function (v) {
          return PureScript_CST_Types.TokRawString.create(Data_String_CodeUnits.dropRight(3)(Data_String_CodeUnits.drop(3)(v)));
      })(rawStringCharsRegex);
      var parseProper = regex(PureScript_CST_Errors.LexExpected.create("proper name"))("\\p{Lu}[\\p{L}0-9_']*");
      var parseUpper = Data_Functor.map(functorLex)(Data_Function.flip(PureScript_CST_Types.TokUpperName.create))(parseProper);
      var parseOperator = Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  if (v === "<-") {
                      return new PureScript_CST_Types.TokLeftArrow(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u2190") {
                      return new PureScript_CST_Types.TokLeftArrow(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "->") {
                      return new PureScript_CST_Types.TokRightArrow(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u2192") {
                      return new PureScript_CST_Types.TokRightArrow(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "=>") {
                      return new PureScript_CST_Types.TokRightFatArrow(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u21d2") {
                      return new PureScript_CST_Types.TokRightFatArrow(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "::") {
                      return new PureScript_CST_Types.TokDoubleColon(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u2237") {
                      return new PureScript_CST_Types.TokDoubleColon(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "\u2200") {
                      return new PureScript_CST_Types.TokForall(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "=") {
                      return PureScript_CST_Types.TokEquals.value;
                  };
                  if (v === ".") {
                      return PureScript_CST_Types.TokDot.value;
                  };
                  if (v === "\\") {
                      return PureScript_CST_Types.TokBackslash.value;
                  };
                  if (v === "|") {
                      return PureScript_CST_Types.TokPipe.value;
                  };
                  if (v === "@") {
                      return PureScript_CST_Types.TokAt.value;
                  };
                  if (v === "`") {
                      return PureScript_CST_Types.TokTick.value;
                  };
                  return new PureScript_CST_Types.TokOperator(Data_Maybe.Nothing.value, v);
              };
              return new PureScript_CST_Types.TokOperator(v1, v);
          };
      })(parseSymbolIdent);
      var parseIdent = regex(PureScript_CST_Errors.LexExpected.create("ident"))("[\\p{Ll}_][\\p{L}0-9_']*");
      var parseLower = Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  if (v === "forall") {
                      return new PureScript_CST_Types.TokForall(PureScript_CST_Types.ASCII.value);
                  };
                  return new PureScript_CST_Types.TokLowerName(Data_Maybe.Nothing.value, v);
              };
              return new PureScript_CST_Types.TokLowerName(v1, v);
          };
      })(parseIdent);
      var parseName = Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(parseLower)(parseUpper))(parseOperator))(parseSymbol);
      var parseExponentSign = Control_Alt.alt(altLex)(string(PureScript_CST_Errors.LexExpected.create("negative"))("-"))(string(PureScript_CST_Errors.LexExpected.create("positive"))("+"));
      var intPartRegex = regex(PureScript_CST_Errors.LexExpected.create("int part"))("(0|[1-9][0-9_]*)");
      var parseExponentPart = Control_Apply.apply(applyLex)(Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              return {
                  sign: v,
                  exponent: v1
              };
          };
      })(optional(parseExponentSign)))(intPartRegex);
      var hexIntRegex = regex(PureScript_CST_Errors.LexExpected.create("hex int"))("[a-fA-F0-9]+");
      var hexIntPrefix = string(PureScript_CST_Errors.LexExpected.create("hex int prefix"))("0x");
      var parseHexInt = Control_Bind.bind(bindLex)(Control_Apply.applySecond(applyLex)(hexIntPrefix)(hexIntRegex))(function (raw) {
          var v = Data_Int.fromStringAs(Data_Int.hexadecimal)(raw);
          if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokInt("0x" + raw, v.value0));
          };
          if (v instanceof Data_Maybe.Nothing) {
              return fail(new PureScript_CST_Errors.LexHexOutOfRange(raw));
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 567, column 5 - line 571, column 36): " + [ v.constructor.name ]);
      });
      var hexEscapeRegex = regex(PureScript_CST_Errors.LexExpected.create("hex"))("[a-fA-F0-9]{1,6}");
      var parseHexEscape = Control_Bind.bind(bindLex)(hexEscapeRegex)(function (esc) {
          var v = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Char.fromCharCode)(Data_Int.fromStringAs(Data_Int.hexadecimal)(esc));
          if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\x" + esc,
                  "char": v.value0
              });
          };
          if (v instanceof Data_Maybe.Nothing) {
              return fail(new PureScript_CST_Errors.LexCharEscapeOutOfRange(esc));
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 515, column 5 - line 519, column 43): " + [ v.constructor.name ]);
      });
      var fractionPartRegex = regex(PureScript_CST_Errors.LexExpected.create("fraction part"))("[0-9_]+");
      var charSingleQuote = $$char(PureScript_CST_Errors.LexExpected.create("single quote"))("'");
      var charQuote = $$char(PureScript_CST_Errors.LexExpected.create("quote"))("\"");
      var charQuestionMark = $$char(PureScript_CST_Errors.LexExpected.create("question mark"))("?");
      var parseHole = Data_Functor.map(functorLex)(function (v) {
          return new PureScript_CST_Types.TokHole(v);
      })($$try(Control_Apply.applySecond(applyLex)(charQuestionMark)(Control_Alt.alt(altLex)(parseIdent)(parseProper))));
      var charExponent = $$char(PureScript_CST_Errors.LexExpected.create("exponent"))("e");
      var charDot = $$char(PureScript_CST_Errors.LexExpected.create("dot"))(".");
      var parseModuleName = Control_Apply.apply(applyLex)(Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              return v1(toModuleName(v));
          };
      })(many($$try(Control_Apply.applyFirst(applyLex)(parseProper)(charDot)))))(parseName);
      var parseNumber = Control_Bind.bind(bindLex)(intPartRegex)(function (intPart) {
          return Control_Bind.bind(bindLex)(optional($$try(Control_Apply.applySecond(applyLex)(charDot)(fractionPartRegex))))(function (fractionPart) {
              return Control_Bind.bind(bindLex)(optional(Control_Apply.applySecond(applyLex)(charExponent)(parseExponentPart)))(function (exponentPart) {
                  var $215 = Data_Maybe.isNothing(fractionPart) && Data_Maybe.isNothing(exponentPart);
                  if ($215) {
                      var v = Data_Int.fromString(intPart);
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokInt(intPart, v.value0));
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          return fail(new PureScript_CST_Errors.LexIntOutOfRange(intPart));
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Lexer (line 578, column 7 - line 582, column 42): " + [ v.constructor.name ]);
                  };
                  var raw = intPart + (Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (fr) {
                      return "." + fr;
                  })(fractionPart) + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (ex) {
                      return "e" + (Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(ex.sign) + ex.exponent);
                  })(exponentPart));
                  var v = Data_Number.fromString(stripUnderscores(raw));
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokNumber(raw, v.value0));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return fail(new PureScript_CST_Errors.LexNumberOutOfRange(raw));
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Lexer (line 589, column 7 - line 593, column 41): " + [ v.constructor.name ]);
              });
          });
      });
      var parseNumericLiteral = Control_Alt.alt(altLex)(parseHexInt)(parseNumber);
      var charBackslash = $$char(PureScript_CST_Errors.LexExpected.create("backslash"))("\\");
      var charAny = satisfy(PureScript_CST_Errors.LexExpected.create("char"))(Data_Function["const"](true));
      var parseEscape = Control_Bind.bind(bindLex)(charAny)(function (ch) {
          if (ch === "t") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\t",
                  "char": "\x09"
              });
          };
          if (ch === "r") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\r",
                  "char": "\x0d"
              });
          };
          if (ch === "n") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\n",
                  "char": "\x0a"
              });
          };
          if (ch === "\"") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\\"",
                  "char": "\""
              });
          };
          if (ch === "'") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\'",
                  "char": "'"
              });
          };
          if (ch === "\\") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\\\",
                  "char": "\\"
              });
          };
          if (ch === "x") {
              return parseHexEscape;
          };
          return fail(PureScript_CST_Errors.LexInvalidCharEscape.create(Data_String_CodeUnits.singleton(ch)));
      });
      var parseChar = Control_Bind.bind(bindLex)(charAny)(function (ch) {
          if (ch === "\\") {
              return parseEscape;
          };
          if (ch === "'") {
              return fail(new PureScript_CST_Errors.LexExpected("character", "empty character literal"));
          };
          return Control_Applicative.pure(applicativeLex)({
              raw: Data_String_CodeUnits.singleton(ch),
              "char": ch
          });
      });
      var parseCharLiteral = Data_Functor.map(functorLex)(function (v) {
          return new PureScript_CST_Types.TokChar(v.raw, v["char"]);
      })(Control_Apply.applyFirst(applyLex)(Control_Apply.applySecond(applyLex)(charSingleQuote)(parseChar))(charSingleQuote));
      var parseStringEscape = Data_Functor.map(functorLex)(function (v) {
          return {
              raw: v.raw,
              string: Data_String_CodeUnits.singleton(v["char"])
          };
      })(Control_Apply.applySecond(applyLex)(charBackslash)(parseEscape));
      var parseStringPart = Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(parseStringChars)(parseStringSpaceEscape))(parseStringEscape);
      var parseString = Data_Functor.map(functorLex)(function (v) {
          var v1 = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
              return "raw";
          }))(Data_Monoid.monoidString)()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
              return "string";
          }))(Data_Monoid.monoidString)()(Data_Monoid.monoidRecordNil))))(v);
          return new PureScript_CST_Types.TokString(v1.raw, v1.string);
      })(Control_Apply.applyFirst(applyLex)(Control_Apply.applySecond(applyLex)(charQuote)(many(parseStringPart)))(charQuote));
      var parseStringLiteral = Control_Alt.alt(altLex)(parseRawString)(parseString);
      return Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(parseHole)(parseModuleName))(parseCharLiteral))(parseStringLiteral))(parseNumericLiteral))(tokenLeftParen))(tokenRightParen))(tokenLeftBrace))(tokenRightBrace))(tokenLeftSquare))(tokenRightSquare))(tokenTick))(tokenComma);
  })();
  var trailingComments = many(Control_Alt.alt(altLex)(Data_Functor.map(functorLex)(PureScript_CST_Types.Comment.create)(comment))(Data_Functor.map(functorLex)(PureScript_CST_Types.Space.create)(spaceComment)));
  var lexWithState = (function () {
      var token$prime = Control_Apply.apply(applyLex)(Control_Apply.apply(applyLex)(Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              return function (v2) {
                  return {
                      token: v,
                      trailing: v1,
                      nextLeading: v2
                  };
              };
          };
      })(token))(trailingComments))(leadingComments);
      var go = function (stack) {
          return function (startPos) {
              return function (leading) {
                  return function (str) {
                      return PureScript_CST_TokenStream.TokenStream(Data_Lazy.defer(function (v) {
                          var $228 = str === "";
                          if ($228) {
                              return PureScript_CST_TokenStream.step(PureScript_CST_TokenStream.unwindLayout(startPos)(PureScript_CST_TokenStream.TokenStream(Data_Lazy.defer(function (v1) {
                                  return new PureScript_CST_TokenStream.TokenEOF(startPos, leading);
                              })))(stack));
                          };
                          var v1 = token$prime(str);
                          if (v1 instanceof LexFail) {
                              var errPos = bumpText(startPos)(0)(Data_String_CodeUnits.take(Data_String_CodeUnits.length(str) - Data_String_CodeUnits.length(v1.value1) | 0)(str));
                              return new PureScript_CST_TokenStream.TokenError(errPos, v1.value0(Data_Unit.unit), Data_Maybe.Nothing.value, stack);
                          };
                          if (v1 instanceof LexSucc) {
                              var endPos = bumpToken(startPos)(v1.value0.token);
                              var nextStart = Data_Foldable.foldl(Data_Foldable.foldableArray)(bumpComment)(Data_Foldable.foldl(Data_Foldable.foldableArray)(bumpComment)(endPos)(v1.value0.trailing))(v1.value0.nextLeading);
                              var posToken = {
                                  range: {
                                      start: startPos,
                                      end: endPos
                                  },
                                  leadingComments: leading,
                                  trailingComments: v1.value0.trailing,
                                  value: v1.value0.token
                              };
                              var v2 = PureScript_CST_Layout.insertLayout(posToken)(nextStart)(stack);
                              return PureScript_CST_TokenStream.step(Data_Tuple.snd(PureScript_CST_TokenStream.consTokens(Data_Foldable.foldableArray)(v2.value1)(Data_Tuple.Tuple.create(nextStart)(go(v2.value0)(nextStart)(v1.value0.nextLeading)(v1.value1)))));
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 198, column 7 - line 217, column 63): " + [ v1.constructor.name ]);
                      }));
                  };
              };
          };
      };
      var init = function (initStack) {
          return function (initPos) {
              return function (str) {
                  return PureScript_CST_TokenStream.TokenStream(Data_Lazy.defer(function (v) {
                      var v1 = leadingComments(str);
                      if (v1 instanceof LexFail) {
                          return Partial_Unsafe.unsafeCrashWith("Leading comments can't fail.");
                      };
                      if (v1 instanceof LexSucc) {
                          var nextPos = Data_Foldable.foldl(Data_Foldable.foldableArray)(bumpComment)(initPos)(v1.value0);
                          return PureScript_CST_TokenStream.step(go(initStack)(nextPos)(v1.value0)(v1.value1));
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Lexer (line 185, column 5 - line 190, column 51): " + [ v1.constructor.name ]);
                  }));
              };
          };
      };
      return init;
  })();
  var lex = lexWithState(new Data_List_Types.Cons(new Data_Tuple.Tuple({
      line: 0,
      column: 0
  }, PureScript_CST_Layout.LytRoot.value), Data_List_Types.Nil.value))({
      line: 0,
      column: 0
  });
  exports["lex"] = lex;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["PureScript.CST.Parser.Monad"] = $PS["PureScript.CST.Parser.Monad"] || {};
  var exports = $PS["PureScript.CST.Parser.Monad"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_ST_Class = $PS["Control.Monad.ST.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var PureScript_CST_Errors = $PS["PureScript.CST.Errors"];
  var PureScript_CST_TokenStream = $PS["PureScript.CST.TokenStream"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var Recovery = (function () {
      function Recovery(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Recovery.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Recovery(value0, value1, value2);
              };
          };
      };
      return Recovery;
  })();
  var Leaf = (function () {
      function Leaf(value0) {
          this.value0 = value0;
      };
      Leaf.create = function (value0) {
          return new Leaf(value0);
      };
      return Leaf;
  })();
  var Node = (function () {
      function Node(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Node.create = function (value0) {
          return function (value1) {
              return new Node(value0, value1);
          };
      };
      return Node;
  })();
  var UnconsDone = (function () {
      function UnconsDone(value0) {
          this.value0 = value0;
      };
      UnconsDone.create = function (value0) {
          return new UnconsDone(value0);
      };
      return UnconsDone;
  })();
  var UnconsMore = (function () {
      function UnconsMore(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UnconsMore.create = function (value0) {
          return function (value1) {
              return new UnconsMore(value0, value1);
          };
      };
      return UnconsMore;
  })();
  var ParseFail = (function () {
      function ParseFail(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      ParseFail.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new ParseFail(value0, value1, value2, value3);
                  };
              };
          };
      };
      return ParseFail;
  })();
  var ParseSucc = (function () {
      function ParseSucc(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseSucc.create = function (value0) {
          return function (value1) {
              return new ParseSucc(value0, value1);
          };
      };
      return ParseSucc;
  })();
  var Take = (function () {
      function Take(value0) {
          this.value0 = value0;
      };
      Take.create = function (value0) {
          return new Take(value0);
      };
      return Take;
  })();
  var Eof = (function () {
      function Eof(value0) {
          this.value0 = value0;
      };
      Eof.create = function (value0) {
          return new Eof(value0);
      };
      return Eof;
  })();
  var Fail = (function () {
      function Fail(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fail.create = function (value0) {
          return function (value1) {
              return new Fail(value0, value1);
          };
      };
      return Fail;
  })();
  var Alt = (function () {
      function Alt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Alt.create = function (value0) {
          return function (value1) {
              return new Alt(value0, value1);
          };
      };
      return Alt;
  })();
  var Try = (function () {
      function Try(value0) {
          this.value0 = value0;
      };
      Try.create = function (value0) {
          return new Try(value0);
      };
      return Try;
  })();
  var LookAhead = (function () {
      function LookAhead(value0) {
          this.value0 = value0;
      };
      LookAhead.create = function (value0) {
          return new LookAhead(value0);
      };
      return LookAhead;
  })();
  var Defer = (function () {
      function Defer(value0) {
          this.value0 = value0;
      };
      Defer.create = function (value0) {
          return new Defer(value0);
      };
      return Defer;
  })();
  var Recover = (function () {
      function Recover(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Recover.create = function (value0) {
          return function (value1) {
              return new Recover(value0, value1);
          };
      };
      return Recover;
  })();
  var Iter = (function () {
      function Iter(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iter.create = function (value0) {
          return function (value1) {
              return new Iter(value0, value1);
          };
      };
      return Iter;
  })();
  var Pure = (function () {
      function Pure(value0) {
          this.value0 = value0;
      };
      Pure.create = function (value0) {
          return new Pure(value0);
      };
      return Pure;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var StkNil = (function () {
      function StkNil() {

      };
      StkNil.value = new StkNil();
      return StkNil;
  })();
  var StkAlt = (function () {
      function StkAlt(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      StkAlt.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new StkAlt(value0, value1, value2);
              };
          };
      };
      return StkAlt;
  })();
  var StkTry = (function () {
      function StkTry(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StkTry.create = function (value0) {
          return function (value1) {
              return new StkTry(value0, value1);
          };
      };
      return StkTry;
  })();
  var StkLookAhead = (function () {
      function StkLookAhead(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StkLookAhead.create = function (value0) {
          return function (value1) {
              return new StkLookAhead(value0, value1);
          };
      };
      return StkLookAhead;
  })();
  var StkBinds = (function () {
      function StkBinds(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StkBinds.create = function (value0) {
          return function (value1) {
              return new StkBinds(value0, value1);
          };
      };
      return StkBinds;
  })();
  var StkRecover = (function () {
      function StkRecover(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      StkRecover.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new StkRecover(value0, value1, value2);
              };
          };
      };
      return StkRecover;
  })();
  var SuccStop = (function () {
      function SuccStop(value0) {
          this.value0 = value0;
      };
      SuccStop.create = function (value0) {
          return new SuccStop(value0);
      };
      return SuccStop;
  })();
  var SuccBinds = (function () {
      function SuccBinds(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SuccBinds.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SuccBinds(value0, value1, value2);
              };
          };
      };
      return SuccBinds;
  })();
  var FailStop = (function () {
      function FailStop(value0) {
          this.value0 = value0;
      };
      FailStop.create = function (value0) {
          return new FailStop(value0);
      };
      return FailStop;
  })();
  var FailAlt = (function () {
      function FailAlt(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FailAlt.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FailAlt(value0, value1, value2);
              };
          };
      };
      return FailAlt;
  })();
  var FailRecover = (function () {
      function FailRecover(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FailRecover.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FailRecover(value0, value1, value2);
              };
          };
      };
      return FailRecover;
  })();
  var uncons$prime = function ($copy_cons) {
      return function ($copy_l) {
          return function ($copy_r) {
              var $tco_var_cons = $copy_cons;
              var $tco_var_l = $copy_l;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(cons, l, r) {
                  if (l instanceof Leaf) {
                      $tco_done = true;
                      return cons(l.value0)(r);
                  };
                  if (l instanceof Node) {
                      $tco_var_cons = cons;
                      $tco_var_l = l.value0;
                      $copy_r = new Node(l.value1, r);
                      return;
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 74, column 20 - line 76, column 74): " + [ l.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_cons, $tco_var_l, $copy_r);
              };
              return $tco_result;
          };
      };
  };
  var uncons = function (done) {
      return function (more) {
          return function (v) {
              if (v instanceof Leaf) {
                  return done(v.value0);
              };
              if (v instanceof Node) {
                  return uncons$prime(more)(v.value0)(v.value1);
              };
              throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 64, column 20 - line 66, column 31): " + [ v.constructor.name ]);
          };
      };
  };
  var unconsView = uncons(UnconsDone.create)(UnconsMore.create);
  var unFold = Unsafe_Coerce.unsafeCoerce;
  var $$try = Try.create;
  var take = Take.create;
  var runParser$prime = (function () {
      var unwindSucc = function ($copy_a) {
          return function ($copy_state) {
              return function ($copy_v) {
                  var $tco_var_a = $copy_a;
                  var $tco_var_state = $copy_state;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(a, state, v) {
                      if (v instanceof StkNil) {
                          $tco_done = true;
                          return new SuccStop(new ParseSucc(a, state));
                      };
                      if (v instanceof StkAlt) {
                          $tco_var_a = a;
                          $tco_var_state = state;
                          $copy_v = v.value0;
                          return;
                      };
                      if (v instanceof StkTry) {
                          $tco_var_a = a;
                          $tco_var_state = state;
                          $copy_v = v.value0;
                          return;
                      };
                      if (v instanceof StkRecover) {
                          $tco_var_a = a;
                          $tco_var_state = {
                              consumed: state.consumed || v.value1.consumed,
                              errors: state.errors,
                              position: state.position,
                              stream: state.stream
                          };
                          $copy_v = v.value0;
                          return;
                      };
                      if (v instanceof StkLookAhead) {
                          $tco_var_a = a;
                          $tco_var_state = v.value1;
                          $copy_v = v.value0;
                          return;
                      };
                      if (v instanceof StkBinds) {
                          $tco_done = true;
                          return new SuccBinds(v.value0, state, v.value1);
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 344, column 24 - line 356, column 38): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_a, $tco_var_state, $copy_v);
                  };
                  return $tco_result;
              };
          };
      };
      var unwindFail = function ($copy_error) {
          return function ($copy_position) {
              return function ($copy_v) {
                  return function ($copy_v1) {
                      var $tco_var_error = $copy_error;
                      var $tco_var_position = $copy_position;
                      var $tco_var_v = $copy_v;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(error, position, v, v1) {
                          if (v1 instanceof StkNil) {
                              $tco_done1 = true;
                              return new FailStop(new ParseFail(error, position, v, new Data_Maybe.Just(v.stream)));
                          };
                          if (v1 instanceof StkAlt) {
                              if (v.consumed) {
                                  $tco_var_error = error;
                                  $tco_var_position = position;
                                  $tco_var_v = v;
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_done1 = true;
                              return new FailAlt(v1.value0, v1.value1, v1.value2);
                          };
                          if (v1 instanceof StkTry) {
                              $tco_var_error = error;
                              $tco_var_position = position;
                              $tco_var_v = {
                                  consumed: v1.value1.consumed,
                                  errors: v.errors,
                                  position: v.position,
                                  stream: v.stream
                              };
                              $copy_v1 = v1.value0;
                              return;
                          };
                          if (v1 instanceof StkRecover) {
                              if (v.consumed) {
                                  var posError = {
                                      error: error,
                                      position: position
                                  };
                                  var nextErrors = Data_Array.snoc(v.errors)(posError);
                                  var v2 = v1.value2(posError)(v1.value1.stream);
                                  $tco_done1 = true;
                                  return new FailRecover(v1.value0, {
                                      consumed: true,
                                      errors: nextErrors,
                                      position: v2.value1,
                                      stream: v2.value2
                                  }, v2.value0);
                              };
                              $tco_var_error = error;
                              $tco_var_position = position;
                              $tco_var_v = {
                                  consumed: v.consumed || v1.value1.consumed,
                                  errors: v.errors,
                                  position: v.position,
                                  stream: v.stream
                              };
                              $copy_v1 = v1.value0;
                              return;
                          };
                          if (v1 instanceof StkLookAhead) {
                              $tco_var_error = error;
                              $tco_var_position = position;
                              $tco_var_v = v1.value1;
                              $copy_v1 = v1.value0;
                              return;
                          };
                          if (v1 instanceof StkBinds) {
                              $tco_var_error = error;
                              $tco_var_position = position;
                              $tco_var_v = v;
                              $copy_v1 = v1.value0;
                              return;
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 315, column 48 - line 341, column 48): " + [ v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_error, $tco_var_position, $tco_var_v, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
          };
      };
      var go = function ($copy_stack) {
          return function ($copy_v) {
              return function ($copy_v1) {
                  var $tco_var_stack = $copy_stack;
                  var $tco_var_v = $copy_v;
                  var $tco_done2 = false;
                  var $tco_result;
                  function $tco_loop(stack, v, v1) {
                      if (v1 instanceof Alt) {
                          $tco_var_stack = new StkAlt(stack, v, v1.value1);
                          $tco_var_v = {
                              consumed: false,
                              errors: v.errors,
                              position: v.position,
                              stream: v.stream
                          };
                          $copy_v1 = v1.value0;
                          return;
                      };
                      if (v1 instanceof Try) {
                          $tco_var_stack = new StkTry(stack, v);
                          $tco_var_v = v;
                          $copy_v1 = v1.value0;
                          return;
                      };
                      if (v1 instanceof LookAhead) {
                          $tco_var_stack = new StkLookAhead(stack, v);
                          $tco_var_v = v;
                          $copy_v1 = v1.value0;
                          return;
                      };
                      if (v1 instanceof Bind) {
                          $tco_var_stack = new StkBinds(stack, v1.value1);
                          $tco_var_v = v;
                          $copy_v1 = v1.value0;
                          return;
                      };
                      if (v1 instanceof Pure) {
                          var v2 = unwindSucc(v1.value0)(v)(stack);
                          if (v2 instanceof SuccBinds) {
                              var v3 = unconsView(v2.value2);
                              if (v3 instanceof UnconsDone) {
                                  $tco_var_stack = v2.value0;
                                  $tco_var_v = v2.value1;
                                  $copy_v1 = v3.value0(v1.value0);
                                  return;
                              };
                              if (v3 instanceof UnconsMore) {
                                  $tco_var_stack = new StkBinds(v2.value0, v3.value1);
                                  $tco_var_v = v2.value1;
                                  $copy_v1 = v3.value0(v1.value0);
                                  return;
                              };
                              throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 260, column 11 - line 264, column 64): " + [ v3.constructor.name ]);
                          };
                          if (v2 instanceof SuccStop) {
                              $tco_done2 = true;
                              return v2.value0;
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 258, column 7 - line 266, column 14): " + [ v2.constructor.name ]);
                      };
                      if (v1 instanceof Fail) {
                          var v2 = unwindFail(v1.value1)(v1.value0)(v)(stack);
                          if (v2 instanceof FailAlt) {
                              $tco_var_stack = v2.value0;
                              $tco_var_v = v2.value1;
                              $copy_v1 = v2.value2;
                              return;
                          };
                          if (v2 instanceof FailRecover) {
                              $tco_var_stack = v2.value0;
                              $tco_var_v = v2.value1;
                              $copy_v1 = new Pure(v2.value2);
                              return;
                          };
                          if (v2 instanceof FailStop) {
                              $tco_done2 = true;
                              return v2.value0;
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 268, column 7 - line 274, column 14): " + [ v2.constructor.name ]);
                      };
                      if (v1 instanceof Take) {
                          var v2 = PureScript_CST_TokenStream.step(v.stream);
                          if (v2 instanceof PureScript_CST_TokenStream.TokenError) {
                              $tco_done2 = true;
                              return new ParseFail(v2.value1, v2.value0, v, v2.value2);
                          };
                          if (v2 instanceof PureScript_CST_TokenStream.TokenEOF) {
                              $tco_var_stack = stack;
                              $tco_var_v = v;
                              $copy_v1 = new Fail(v2.value0, PureScript_CST_Errors.UnexpectedEof.value);
                              return;
                          };
                          if (v2 instanceof PureScript_CST_TokenStream.TokenCons) {
                              var v3 = v1.value0(v2.value0);
                              if (v3 instanceof Data_Either.Left) {
                                  $tco_var_stack = stack;
                                  $tco_var_v = v;
                                  $copy_v1 = new Fail(v2.value0.range.start, v3.value0);
                                  return;
                              };
                              if (v3 instanceof Data_Either.Right) {
                                  $tco_var_stack = stack;
                                  $tco_var_v = {
                                      consumed: true,
                                      errors: v.errors,
                                      position: v2.value1,
                                      stream: v2.value2
                                  };
                                  $copy_v1 = new Pure(v3.value0);
                                  return;
                              };
                              throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 282, column 11 - line 286, column 98): " + [ v3.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 276, column 7 - line 286, column 98): " + [ v2.constructor.name ]);
                      };
                      if (v1 instanceof Eof) {
                          var v2 = PureScript_CST_TokenStream.step(v.stream);
                          if (v2 instanceof PureScript_CST_TokenStream.TokenError) {
                              $tco_done2 = true;
                              return new ParseFail(v2.value1, v2.value0, v, v2.value2);
                          };
                          if (v2 instanceof PureScript_CST_TokenStream.TokenEOF) {
                              $tco_var_stack = stack;
                              $tco_var_v = {
                                  consumed: true,
                                  errors: v.errors,
                                  position: v2.value0,
                                  stream: v.stream
                              };
                              $copy_v1 = new Pure(v1.value0(new Data_Tuple.Tuple(v2.value0, v2.value1)));
                              return;
                          };
                          if (v2 instanceof PureScript_CST_TokenStream.TokenCons) {
                              $tco_var_stack = stack;
                              $tco_var_v = v;
                              $copy_v1 = new Fail(v2.value0.range.start, new PureScript_CST_Errors.ExpectedEof(v2.value0.value));
                              return;
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 288, column 7 - line 294, column 72): " + [ v2.constructor.name ]);
                      };
                      if (v1 instanceof Iter) {
                          var v2 = unFold(function (v3) {
                              var iter1 = function ($copy_acc) {
                                  return function ($copy_state$prime) {
                                      var $tco_var_acc = $copy_acc;
                                      var $tco_done3 = false;
                                      var $tco_result;
                                      function $tco_loop(acc, state$prime) {
                                          var v4 = runParser$prime({
                                              consumed: false,
                                              errors: state$prime.errors,
                                              position: state$prime.position,
                                              stream: state$prime.stream
                                          })(v1.value1);
                                          if (v4 instanceof ParseSucc) {
                                              $tco_var_acc = v3.step(acc)(v4.value0);
                                              $copy_state$prime = v4.value1;
                                              return;
                                          };
                                          if (v4 instanceof ParseFail) {
                                              if (v4.value2.consumed) {
                                                  $tco_done3 = true;
                                                  return new Data_Tuple.Tuple(v4.value2, new Fail(v4.value1, v4.value0));
                                              };
                                              if (Data_Boolean.otherwise) {
                                                  $tco_done3 = true;
                                                  return new Data_Tuple.Tuple(state$prime, new Pure(v3.done(acc)));
                                              };
                                          };
                                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 299, column 31 - line 306, column 51): " + [ v4.constructor.name ]);
                                      };
                                      while (!$tco_done3) {
                                          $tco_result = $tco_loop($tco_var_acc, $copy_state$prime);
                                      };
                                      return $tco_result;
                                  };
                              };
                              return iter1(v3.init(Data_Unit.unit))(v);
                          })(v1.value0);
                          $tco_var_stack = stack;
                          $tco_var_v = v2.value0;
                          $copy_v1 = v2.value1;
                          return;
                      };
                      if (v1 instanceof Defer) {
                          $tco_var_stack = stack;
                          $tco_var_v = v;
                          $copy_v1 = Data_Lazy.force(v1.value0);
                          return;
                      };
                      if (v1 instanceof Recover) {
                          $tco_var_stack = new StkRecover(stack, v, v1.value0);
                          $tco_var_v = {
                              consumed: false,
                              errors: v.errors,
                              position: v.position,
                              stream: v.stream
                          };
                          $copy_v1 = v1.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 248, column 31 - line 312, column 67): " + [ v1.constructor.name ]);
                  };
                  while (!$tco_done2) {
                      $tco_result = $tco_loop($tco_var_stack, $tco_var_v, $copy_v1);
                  };
                  return $tco_result;
              };
          };
      };
      return function (state) {
          return function (parser) {
              return go(StkNil.value)(state)(parser);
          };
      };
  })();
  var recover = Recover.create;
  var qsingleton = Leaf.create;
  var qappend = Node.create;
  var mkFold = Unsafe_Coerce.unsafeCoerce;
  var lookAhead = LookAhead.create;
  var lazyParser = new Control_Lazy.Lazy(function ($169) {
      return Defer.create(Data_Lazy.defer($169));
  });
  var iter = function (a) {
      return function (b) {
          return new Iter(a, b);
      };
  };
  var initialParserState = function (stream) {
      return {
          consumed: false,
          errors: [  ],
          position: {
              line: 0,
              column: 0
          },
          stream: stream
      };
  };
  var functorRecovery = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Recovery(f(m.value0), m.value1, m.value2);
      };
  });
  var functorParser = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof Bind) {
              return new Bind(v.value0, qappend(v.value1)(qsingleton(function ($170) {
                  return Pure.create(f($170));
              })));
          };
          return new Bind(v, qsingleton(function ($171) {
              return Pure.create(f($171));
          }));
      };
  });
  var fromParserResult = function (v) {
      if (v instanceof ParseFail) {
          return new Data_Either.Left({
              position: v.value1,
              error: v.value0
          });
      };
      if (v instanceof ParseSucc) {
          return new Data_Either.Right(new Data_Tuple.Tuple(v.value0, v.value1.errors));
      };
      throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 197, column 20 - line 201, column 29): " + [ v.constructor.name ]);
  };
  var runParser = function (stream) {
      var $172 = runParser$prime(initialParserState(stream));
      return function ($173) {
          return fromParserResult($172($173));
      };
  };
  var foldMaybe = mkFold({
      init: Data_Function["const"](Data_Maybe.Nothing.value),
      step: Data_Function["const"](Data_Maybe.Just.create),
      done: Control_Category.identity(Control_Category.categoryFn)
  });
  var optional = iter(foldMaybe);
  var foldArray = mkFold({
      init: function (v) {
          return Effect_Unsafe.unsafePerformEffect(Control_Monad_ST_Class.liftST(Control_Monad_ST_Class.monadSTEffect)(Data_Array_ST["new"]));
      },
      step: function (arr) {
          return function (a) {
              return Effect_Unsafe.unsafePerformEffect(Control_Monad_ST_Class.liftST(Control_Monad_ST_Class.monadSTEffect)(function __do() {
                  Data_Array_ST.push(a)(arr)();
                  return arr;
              }));
          };
      },
      done: (function () {
          var $174 = Control_Monad_ST_Class.liftST(Control_Monad_ST_Class.monadSTEffect);
          return function ($175) {
              return Effect_Unsafe.unsafePerformEffect($174(Data_Array_ST.unsafeFreeze($175)));
          };
      })()
  });
  var many = iter(foldArray);
  var eof = new Eof(Control_Category.identity(Control_Category.categoryFn));
  var bindParser = new Control_Bind.Bind(function () {
      return applyParser;
  }, function (p) {
      return function (k) {
          if (p instanceof Bind) {
              return new Bind(p.value0, qappend(p.value1)(qsingleton(k)));
          };
          return new Bind(p, qsingleton(k));
      };
  });
  var applyParser = new Control_Apply.Apply(function () {
      return functorParser;
  }, function (p1) {
      return function (p2) {
          return Control_Bind.bind(bindParser)(p1)(function (f) {
              return Control_Bind.bind(bindParser)(p2)(function (a) {
                  return Control_Applicative.pure(applicativeParser)(f(a));
              });
          });
      };
  });
  var applicativeParser = new Control_Applicative.Applicative(function () {
      return applyParser;
  }, Pure.create);
  var altParser = new Control_Alt.Alt(function () {
      return functorParser;
  }, Alt.create);
  exports["Recovery"] = Recovery;
  exports["runParser"] = runParser;
  exports["take"] = take;
  exports["try"] = $$try;
  exports["lookAhead"] = lookAhead;
  exports["many"] = many;
  exports["optional"] = optional;
  exports["eof"] = eof;
  exports["recover"] = recover;
  exports["functorRecovery"] = functorRecovery;
  exports["functorParser"] = functorParser;
  exports["applyParser"] = applyParser;
  exports["applicativeParser"] = applicativeParser;
  exports["bindParser"] = bindParser;
  exports["altParser"] = altParser;
  exports["lazyParser"] = lazyParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["PureScript.CST.Parser"] = $PS["PureScript.CST.Parser"] || {};
  var exports = $PS["PureScript.CST.Parser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Set = $PS["Data.Set"];
  var Data_Tuple = $PS["Data.Tuple"];
  var PureScript_CST_Errors = $PS["PureScript.CST.Errors"];
  var PureScript_CST_Layout = $PS["PureScript.CST.Layout"];
  var PureScript_CST_Parser_Monad = $PS["PureScript.CST.Parser.Monad"];
  var PureScript_CST_TokenStream = $PS["PureScript.CST.TokenStream"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var wrapped = function (openTok) {
      return function (closeTok) {
          return function (valueParser) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(openTok)(function (open) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(valueParser)(function (value) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(closeTok)(function (close) {
                          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                              open: open,
                              value: value,
                              close: close
                          });
                      });
                  });
              });
          };
      };
  };
  var separated = function (sepParser) {
      return function (valueParser) {
          return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
              return function (v1) {
                  return {
                      head: v,
                      tail: v1
                  };
              };
          })(valueParser))(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(sepParser))(valueParser)));
      };
  };
  var reservedKeywords = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordString)([ "ado", "case", "class", "data", "derive", "do", "else", "false", "foreign", "if", "import", "in", "infix", "infixl", "infixr", "instance", "let", "module", "newtype", "of", "then", "true", "type", "where" ]);
  var recoverTokensWhile = function (p) {
      return function (initStream) {
          var indent = Data_Maybe.maybe(0)(function (v) {
              return v.column;
          })(PureScript_CST_Layout.currentIndent(PureScript_CST_TokenStream.layoutStack(initStream)));
          var go = function ($copy_acc) {
              return function ($copy_stream) {
                  var $tco_var_acc = $copy_acc;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(acc, stream) {
                      var v = PureScript_CST_TokenStream.step(stream);
                      if (v instanceof PureScript_CST_TokenStream.TokenError) {
                          $tco_done = true;
                          return new PureScript_CST_Parser_Monad.Recovery(acc, v.value0, stream);
                      };
                      if (v instanceof PureScript_CST_TokenStream.TokenEOF) {
                          $tco_done = true;
                          return new PureScript_CST_Parser_Monad.Recovery(acc, v.value0, stream);
                      };
                      if (v instanceof PureScript_CST_TokenStream.TokenCons) {
                          var $113 = p(v.value0)(indent);
                          if ($113) {
                              $tco_var_acc = Data_Array.snoc(acc)(v.value0);
                              $copy_stream = v.value2;
                              return;
                          };
                          $tco_done = true;
                          return new PureScript_CST_Parser_Monad.Recovery(acc, v.value0.range.start, stream);
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Parser (line 1156, column 19 - line 1165, column 44): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_acc, $copy_stream);
                  };
                  return $tco_result;
              };
          };
          return go([  ])(initStream);
      };
  };
  var recoverIndent = function (mkNode) {
      return PureScript_CST_Parser_Monad.recover(function (v) {
          var $295 = Data_Functor.map(PureScript_CST_Parser_Monad.functorRecovery)(function (tokens) {
              return mkNode({
                  position: v.position,
                  error: v.error,
                  tokens: tokens
              });
          });
          var $296 = recoverTokensWhile(function (tok) {
              return function (indent) {
                  if (tok.value instanceof PureScript_CST_Types.TokLayoutEnd) {
                      return tok.value.value0 > indent;
                  };
                  if (tok.value instanceof PureScript_CST_Types.TokLayoutSep) {
                      return tok.value.value0 > indent;
                  };
                  return true;
              };
          });
          return function ($297) {
              return $295($296($297));
          };
      });
  };
  var recoverLetBinding = recoverIndent(PureScript_CST_Types.LetBindingError.create);
  var recoverDoStatement = recoverIndent(PureScript_CST_Types.DoError.create);
  var recoverDecl = recoverIndent(PureScript_CST_Types.DeclError.create);
  var many1 = function (parser) {
      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Array_NonEmpty["cons'"])(parser))(PureScript_CST_Parser_Monad.many(parser));
  };
  var expectMap = function (k) {
      return PureScript_CST_Parser_Monad.take(function (tok) {
          var v = k(tok);
          if (v instanceof Data_Maybe.Just) {
              return new Data_Either.Right(v.value0);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Either.Left.create(new PureScript_CST_Errors.UnexpectedToken(tok.value));
          };
          throw new Error("Failed pattern match at PureScript.CST.Parser (line 46, column 3 - line 50, column 39): " + [ v.constructor.name ]);
      });
  };
  var parseBoolean = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "true")) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, true));
      };
      if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "false")) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, false));
      };
      return Data_Maybe.Nothing.value;
  });
  var parseChar = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokChar) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value1));
      };
      return Data_Maybe.Nothing.value;
  });
  var parseHole = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokHole) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value0
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseIdent = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && !Data_Set.member(Data_Ord.ordString)(v.value.value1)(reservedKeywords))) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var $$parseInt = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokInt) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value1));
      };
      return Data_Maybe.Nothing.value;
  });
  var parseLabel = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokString) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value0 instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseModuleName = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Just) {
          return Data_Maybe.Just.create({
              token: v,
              name: PureScript_CST_Types.ModuleName(v.value.value0.value0 + ("." + v.value.value1))
          });
      };
      if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseNumber = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokNumber) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value1));
      };
      return Data_Maybe.Nothing.value;
  });
  var parseOperator = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokOperator && v.value.value0 instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseProper = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseQualifiedIdent = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokLowerName && !Data_Set.member(Data_Ord.ordString)(v.value.value1)(reservedKeywords)) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseQualifiedIdentOrProper = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokLowerName) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: Data_Either.Left.create(v.value.value1)
          });
      };
      if (v.value instanceof PureScript_CST_Types.TokUpperName) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: Data_Either.Right.create(v.value.value1)
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseQualifiedOperator = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokOperator) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseQualifiedProper = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokUpperName) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseQualifiedSymbol = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokSymbolName) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseString = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokString) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value1));
      };
      if (v.value instanceof PureScript_CST_Types.TokRawString) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value0));
      };
      return Data_Maybe.Nothing.value;
  });
  var parseSymbol = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokSymbolName && v.value.value0 instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var expect = function (pred) {
      return expectMap(function (tok) {
          var $208 = pred(tok.value);
          if ($208) {
              return new Data_Maybe.Just(tok);
          };
          return Data_Maybe.Nothing.value;
      });
  };
  var tokAt = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokAt) {
          return true;
      };
      return false;
  });
  var tokBackslash = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokBackslash) {
          return true;
      };
      return false;
  });
  var tokComma = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokComma) {
          return true;
      };
      return false;
  });
  var tokDot = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokDot) {
          return true;
      };
      return false;
  });
  var parseRecordAccessor = function (expr) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDot)(function (dot) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(separated(tokDot)(parseLabel))(function (path) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprRecordAccessor({
                  expr: expr,
                  dot: dot,
                  path: path
              }));
          });
      });
  };
  var tokDoubleColon = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokDoubleColon) {
          return true;
      };
      return false;
  });
  var tokEquals = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokEquals) {
          return true;
      };
      return false;
  });
  var tokForall = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokForall) {
          return true;
      };
      return false;
  });
  var tokKeyOperator = function (sym) {
      return expect(function (v) {
          if (v instanceof PureScript_CST_Types.TokOperator && v.value0 instanceof Data_Maybe.Nothing) {
              return sym === v.value1;
          };
          return false;
      });
  };
  var parseBinderNegative = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyOperator("-"))(function (negative) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderInt.create(new Data_Maybe.Just(negative))))($$parseInt))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderNumber.create(new Data_Maybe.Just(negative))))(parseNumber));
  });
  var parseRecordLabeled = function (valueParser) {
      var parseRecordField = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.RecordField.create))(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseLabel))(tokKeyOperator(":")))))(valueParser);
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordField)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.RecordPun.create)(parseIdent));
  };
  var tokKeySymbol = function (sym) {
      return expect(function (v) {
          if (v instanceof PureScript_CST_Types.TokSymbolName && v.value0 instanceof Data_Maybe.Nothing) {
              return sym === v.value1;
          };
          return false;
      });
  };
  var tokKeyword = function (kw) {
      return expect(function (v) {
          if (v instanceof PureScript_CST_Types.TokLowerName && v.value0 instanceof Data_Maybe.Nothing) {
              return kw === v.value1;
          };
          return false;
      });
  };
  var parseFixityKeyword = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infix.value))(tokKeyword("infix")))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infixl.value))(tokKeyword("infixl")))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infixr.value))(tokKeyword("infixr"))));
  var parseFixityOp = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FixityType.create)(tokKeyword("type")))(parseQualifiedProper))(tokKeyword("as")))(parseOperator))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FixityValue.create)(parseQualifiedIdentOrProper))(tokKeyword("as")))(parseOperator));
  var parseDeclFixity = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseFixityKeyword)(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)($$parseInt)(function (prec) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseFixityOp)(function (operator) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclFixity({
                  keyword: keyword,
                  prec: prec,
                  operator: operator
              }));
          });
      });
  });
  var parseForeignKind = PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ForeignKind.create)(tokKeyword("kind")))(parseProper));
  var parseRole = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Representational.value))(tokKeyword("representational")))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Nominal.value))(tokKeyword("nominal")))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Phantom.value))(tokKeyword("phantom"))));
  var parseDeclRole = function (keyword1) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("role"))(function (keyword2) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(many1(parseRole))(function (roles) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclRole(keyword1, keyword2, name, roles));
              });
          });
      });
  };
  var tokLayoutEnd = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLayoutEnd) {
          return true;
      };
      return false;
  });
  var tokLayoutSep = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLayoutSep) {
          return true;
      };
      return false;
  });
  var parseInstanceChainSeparator = Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(tokKeyword("else"))(PureScript_CST_Parser_Monad.optional(tokLayoutSep));
  var tokLayoutStart = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLayoutStart) {
          return true;
      };
      return false;
  });
  var layout = function (valueParser) {
      var tail = PureScript_CST_Parser_Monad.many(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutSep)(valueParser));
      var go = function (head) {
          return Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Array.cons(head))(tail);
      };
      var values = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Bind.bindFlipped(PureScript_CST_Parser_Monad.bindParser)(go)(valueParser))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)([  ]));
      return Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(values))(tokLayoutEnd);
  };
  var layoutNonEmpty = function (valueParser) {
      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
          return function (v1) {
              return Data_Array_NonEmpty["cons'"](v)(v1);
          };
      })(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(valueParser)))(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(PureScript_CST_Parser_Monad.many(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutSep)(valueParser)))(tokLayoutEnd));
  };
  var tokLeftArrow = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLeftArrow) {
          return true;
      };
      return false;
  });
  var tokLeftBrace = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLeftBrace) {
          return true;
      };
      return false;
  });
  var tokLeftFatArrow = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokOperator && v.value0 instanceof Data_Maybe.Nothing) {
          return v.value1 === "<=" || v.value1 === "\u21d0";
      };
      return false;
  });
  var tokLeftParen = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLeftParen) {
          return true;
      };
      return false;
  });
  var tokLeftSquare = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLeftSquare) {
          return true;
      };
      return false;
  });
  var tokPipe = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokPipe) {
          return true;
      };
      return false;
  });
  var tokQualifiedKeyword = function (kw) {
      return expect(function (v) {
          if (v instanceof PureScript_CST_Types.TokLowerName) {
              return kw === v.value1;
          };
          return false;
      });
  };
  var tokRightArrow = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokRightArrow) {
          return true;
      };
      return false;
  });
  var parseFundep = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FundepDetermined.create)(tokRightArrow))(many1(parseIdent)))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FundepDetermines.create)(many1(parseIdent)))(tokRightArrow))(many1(parseIdent)));
  var tokRightBrace = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokRightBrace) {
          return true;
      };
      return false;
  });
  var tokRightFatArrow = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokRightFatArrow) {
          return true;
      };
      return false;
  });
  var tokRightParen = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokRightParen) {
          return true;
      };
      return false;
  });
  var parens = wrapped(tokLeftParen)(tokRightParen);
  var parseEmptyRow = function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeRow.create({
              open: open,
              value: {
                  labels: Data_Maybe.Nothing.value,
                  tail: Data_Maybe.Nothing.value
              },
              close: close
          }));
      });
  };
  var tokRightSquare = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokRightSquare) {
          return true;
      };
      return false;
  });                                                  
  var tokSymbolArrow = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokSymbolArrow) {
          return true;
      };
      return false;
  });
  var tokTick = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokTick) {
          return true;
      };
      return false;
  });
  var tokUnderscore = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokUnderscore) {
          return true;
      };
      return false;
  });
  var delimited = function (openTok) {
      return function (closeTok) {
          return function (sepTok) {
              return function (valueParser) {
                  var parseNonEmpty = function (open) {
                      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
                          return function (v1) {
                              return {
                                  open: open,
                                  value: new Data_Maybe.Just(v),
                                  close: v1
                              };
                          };
                      })(separated(sepTok)(valueParser)))(closeTok);
                  };
                  var parseEmpty = function (open) {
                      return Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
                          return {
                              open: open,
                              value: Data_Maybe.Nothing.value,
                              close: v
                          };
                      })(closeTok);
                  };
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(openTok)(function (open) {
                      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseEmpty(open))(parseNonEmpty(open));
                  });
              };
          };
      };
  };
  var parseDataMembers = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DataAll.create)(tokKeySymbol("..")))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DataEnumerated.create)(delimited(tokLeftParen)(tokRightParen)(tokComma)(parseProper)));
  var parseExport = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportTypeOp.create)(tokKeyword("type")))(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportClass.create)(tokKeyword("class")))(parseProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportModule.create)(tokKeyword("module")))(parseModuleName))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportKind.create)(tokKeyword("kind")))(parseProper)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportOp.create)(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportValue.create)(parseIdent))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportType.create)(parseProper))(PureScript_CST_Parser_Monad.optional(parseDataMembers))))))));
  var parseImport = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportOp.create)(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportType.create)(parseProper))(PureScript_CST_Parser_Monad.optional(parseDataMembers)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportTypeOp.create)(tokKeyword("type")))(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportClass.create)(tokKeyword("class")))(parseProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportKind.create)(tokKeyword("kind")))(parseProper))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportValue.create)(parseIdent))))));
  var parseImportDecl = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("import"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleName)(function (module_) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(PureScript_CST_Parser_Monad.optional(tokKeyword("hiding"))))(parens(separated(tokComma)(parseImport)))))(function (names) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("as")))(parseModuleName)))(function (qualified) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                      keyword: keyword,
                      module: module_,
                      names: names,
                      qualified: qualified
                  });
              });
          });
      });
  });
  var parseModuleImportDecls = PureScript_CST_Parser_Monad.many(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(parseImportDecl)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(tokLayoutSep)(PureScript_CST_Parser_Monad.lookAhead(tokLayoutEnd))));
  var parseModuleHeader = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("module"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleName)(function (name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(parens(separated(tokComma)(parseExport))))(function (exports) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("where"))(function (where_) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(parseModuleImportDecls))(function (imports) {
                      return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                          keyword: keyword,
                          name: name,
                          exports: exports,
                          where: where_,
                          imports: imports
                      });
                  });
              });
          });
      });
  });
  var braces = wrapped(tokLeftBrace)(tokRightBrace);
  var parseTypeVarKinded = Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVarKinded.create)(parens(Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  label: label,
                  separator: separator,
                  value: value
              });
          });
      });
  })));
  var parseTypeVarBinding = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseTypeVarKinded)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVarName.create)(parseIdent));
  });
  var parseTypeParens = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokLeftParen)(function (open) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRowParen(open))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRowTailParen(open))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseKindedVar(open))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseTypeParen(open))(parseEmptyRow(open)))));
  });
  var parseTypeParen = function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType1)(function (value) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeParens.create({
                  open: open,
                  value: value,
                  close: close
              }));
          });
      });
  };
  var parseTypeAtom = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVar.create)(parseIdent))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeConstructor.create)(parseQualifiedProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.TypeString.create))(parseString))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseTypeParens)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeRecord.create)(braces(parseRow)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeOpName.create)(parseQualifiedSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeHole.create)(parseHole))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeWildcard.create)(tokUnderscore))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeArrowName.create)(tokSymbolArrow)))))))));
  });
  var parseType5 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseTypeAtom)(function (ty) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeAtom))(function (args) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(args);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return ty;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.TypeApp(ty, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 438, column 8 - line 440, column 29): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseType4 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeUnaryRow.create)(tokKeyOperator("#")))(parseType4))(parseType5);
  });
  var parseType3 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType4)(function (ty) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseType4)))(function (ops) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(ops);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return ty;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.TypeOp(ty, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 425, column 8 - line 427, column 28): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseType2 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType3)(function (ty) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeArrow.create(ty))(tokRightArrow))(parseType1))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeConstrained.create(ty))(tokRightFatArrow))(parseType1))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(ty)));
      });
  });
  var parseType1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseForall)(parseType2);
  });
  var parseType = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType1)(function (ty) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeKinded.create(ty))(tokDoubleColon))(parseType))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(ty));
      });
  });
  var parseRowTailParen = function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(parseType))(function (tail) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeRow.create({
                  open: open,
                  value: {
                      labels: Data_Maybe.Nothing.value,
                      tail: new Data_Maybe.Just(tail)
                  },
                  close: close
              }));
          });
      });
  };
  var parseRowParen = function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseLabel))(tokDoubleColon)))(function (v) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokComma))(parseRowLabel)))(function (rest) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(parseType)))(function (tail) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
                          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeRow.create({
                              open: open,
                              value: {
                                  labels: Data_Maybe.Just.create({
                                      head: {
                                          label: v.value0,
                                          separator: v.value1,
                                          value: value
                                      },
                                      tail: rest
                                  }),
                                  tail: tail
                              },
                              close: close
                          }));
                      });
                  });
              });
          });
      });
  };
  var parseRowLabel = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseLabel)(function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  label: label,
                  separator: separator,
                  value: value
              });
          });
      });
  });
  var parseRow = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(separated(tokComma)(parseRowLabel)))(function (labels) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(parseType)))(function (tail) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  labels: labels,
                  tail: tail
              });
          });
      });
  });
  var parseKindedVar = function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parens(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVar.create)(parseIdent))))(tokDoubleColon)))(function (v) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (kind) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeParens.create({
                      open: open,
                      value: new PureScript_CST_Types.TypeKinded(new PureScript_CST_Types.TypeParens(v.value0), v.value1, kind),
                      close: close
                  }));
              });
          });
      });
  };
  var parseForall = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeForall.create)(tokForall))(many1(parseTypeVarBinding)))(tokDot))(parseType1);
  });
  var parseDataCtor = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
      return function (v1) {
          return {
              name: v,
              fields: v1
          };
      };
  })(parseProper))(PureScript_CST_Parser_Monad.many(parseTypeAtom));
  var parseIdentBinder = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (ident) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderNamed.create(ident))(tokAt))(parseBinderAtom))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.BinderVar(ident)));
  });
  var parseBinderConstructor = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseQualifiedProper)(function (name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (apps) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.BinderConstructor(name, apps));
          });
      });
  });
  var parseBinderAtom = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseIdentBinder)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(PureScript_CST_Types.BinderConstructor.create)([  ]))(parseQualifiedProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderWildcard.create)(tokUnderscore))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderString.create))(parseString))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderChar.create))(parseChar))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderBoolean.create))(parseBoolean))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderInt.create(Data_Maybe.Nothing.value)))($$parseInt))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderNumber.create(Data_Maybe.Nothing.value)))(parseNumber))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderArray.create)(delimited(tokLeftSquare)(tokRightSquare)(tokComma)(parseBinder)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderRecord.create)(delimited(tokLeftBrace)(tokRightBrace)(tokComma)(parseRecordLabeled(parseBinder))))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderParens.create)(parens(parseBinder))))))))))));
  });
  var parseBinder2 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseBinderNegative)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseBinderConstructor)(parseBinderAtom));
  });
  var parseBinder1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseBinder2)(function (binder) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseBinder2)))(function (ops) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(ops);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return binder;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.BinderOp(binder, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 813, column 8 - line 815, column 34): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseBinder = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseBinder1)(function (binder) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderTyped.create(binder))(tokDoubleColon))(parseType))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(binder));
      });
  });
  var parseClassConstraints = function (parseOneConstraint) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.Many.create)(parens(separated(tokComma)(parseType))))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.One.create)(parseOneConstraint));
  };
  var parseDeclDerive = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("derive"))(function (derive_) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(tokKeyword("newtype")))(function (newtype_) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("instance"))(function (keyword) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (name) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseClassConstraints(parseType3)))(tokRightFatArrow))))(function (constraints) {
                          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseQualifiedProper)(function (className) {
                              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeAtom))(function (types) {
                                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclDerive(derive_, newtype_, {
                                      keyword: keyword,
                                      name: name,
                                      separator: separator,
                                      constraints: constraints,
                                      className: className,
                                      types: types
                                  }));
                              });
                          });
                      });
                  });
              });
          });
      });
  });
  var parseClassMember = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  label: label,
                  separator: separator,
                  value: value
              });
          });
      });
  });
  var parseDeclClassSignature = function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseProper))(tokDoubleColon)))(function (v) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.DeclKindSignature.create(keyword)({
                  label: v.value0,
                  separator: v.value1,
                  value: value
              }));
          });
      });
  };
  var parseDeclKindSignature = function (keyword) {
      return function (label) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.DeclKindSignature.create(keyword)({
                      label: label,
                      separator: separator,
                      value: value
                  }));
              });
          });
      };
  };
  var parseDeclSignature = function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.DeclSignature.create({
                  label: label,
                  separator: separator,
                  value: value
              }));
          });
      });
  };
  var parseForeignData = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("data"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (label) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.ForeignData.create(keyword)({
                      label: label,
                      separator: separator,
                      value: value
                  }));
              });
          });
      });
  });
  var parseForeignValue = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.ForeignValue.create({
                  label: label,
                  separator: separator,
                  value: value
              }));
          });
      });
  });
  var parseDeclForeign = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("foreign"))(function (keyword1) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("import"))(function (keyword2) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseForeignData)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseForeignKind)(parseForeignValue)))(function (foreign_) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclForeign(keyword1, keyword2, foreign_));
          });
      });
  });
  var parseInstanceBindingSignature = function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.InstanceBindingSignature.create({
                  label: label,
                  separator: separator,
                  value: value
              }));
          });
      });
  };
  var parseLetBindingSignature = function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.LetBindingSignature.create({
                  label: label,
                  separator: separator,
                  value: value
              }));
          });
      });
  };
  var parseWhere = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (expr) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(recoverLetBinding(parseLetBinding)))))(function (bindings) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  expr: expr,
                  bindings: bindings
              });
          });
      });
  });
  var parseTickExpr1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr3)(function (expr) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseExpr3)))(function (ops) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(ops);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return expr;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.ExprOp(expr, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 584, column 8 - line 586, column 30): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseTickExpr = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokTick)(function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseTickExpr1)(function (value) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokTick)(function (close) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  open: open,
                  value: value,
                  close: close
              });
          });
      });
  });
  var parseRecordUpdates = function (expr) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(tokLeftBrace)(PureScript_CST_Parser_Monad.lookAhead(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(parseLabel)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(tokEquals)(tokLeftBrace))))))(function (open) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(separated(tokComma)(parseRecordUpdate))(function (value) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightBrace)(function (close) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.ExprRecordUpdate.create(expr)({
                      open: open,
                      value: value,
                      close: close
                  }));
              });
          });
      });
  };
  var parseRecordUpdateLeaf = function (label) {
      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.RecordUpdateLeaf.create(label))(tokEquals))(parseExpr);
  };
  var parseRecordUpdateBranch = function (label) {
      return Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.RecordUpdateBranch.create(label))(braces(separated(tokComma)(parseRecordUpdate)));
  };
  var parseRecordUpdate = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseLabel)(function (label) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordUpdateLeaf(label))(parseRecordUpdateBranch(label));
  });
  var parseLetIn = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("let"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(layoutNonEmpty(recoverLetBinding(parseLetBinding)))(function (bindings) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("in"))(function (in_) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (body) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprLet({
                      keyword: keyword,
                      bindings: bindings,
                      "in": in_,
                      body: body
                  }));
              });
          });
      });
  });
  var parseLetBindingName = function (name) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (binders) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseGuarded(tokEquals))(function (guarded) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.LetBindingName({
                  name: name,
                  binders: binders,
                  guarded: guarded
              }));
          });
      });
  };
  var parseLetBinding = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(PureScript_CST_Parser_Monad["try"](parseIdentBinding))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.LetBindingPattern.create)(parseBinder1))(tokEquals))(parseWhere));
  });
  var parseLambda = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokBackslash)(function (symbol) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(many1(parseBinderAtom))(function (binders) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightArrow)(function (arrow) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (body) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprLambda({
                      symbol: symbol,
                      binders: binders,
                      arrow: arrow,
                      body: body
                  }));
              });
          });
      });
  });
  var parseIf = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("if"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (cond) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("then"))(function (then_) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (true_) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("else"))(function (else_) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (false_) {
                          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprIf({
                              keyword: keyword,
                              cond: cond,
                              then: then_,
                              "true": true_,
                              "else": else_,
                              "false": false_
                          }));
                      });
                  });
              });
          });
      });
  });
  var parseIdentBinding = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (ident) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseLetBindingSignature(ident))(parseLetBindingName(ident));
  });
  var parseGuarded = function (sepParser) {
      var parsePatternGuard = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
          return function (v1) {
              return {
                  binder: v,
                  expr: v1
              };
          };
      })(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseBinder))(tokLeftArrow)))))(parseExpr);
      var parseGuardedExpr = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return {
                          bar: v,
                          patterns: v1,
                          separator: v2,
                          where: v3
                      };
                  };
              };
          };
      })(tokPipe))(separated(tokComma)(parsePatternGuard)))(sepParser))(parseWhere);
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.Unconditional.create)(sepParser))(parseWhere))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.Guarded.create)(many1(parseGuardedExpr)));
  };
  var parseExprAtom = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprIdent.create)(parseQualifiedIdent))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprConstructor.create)(parseQualifiedProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprOpName.create)(parseQualifiedSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprSection.create)(tokUnderscore))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprHole.create)(parseHole))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprString.create))(parseString))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprChar.create))(parseChar))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprBoolean.create))(parseBoolean))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprInt.create))($$parseInt))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprNumber.create))(parseNumber))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprArray.create)(delimited(tokLeftSquare)(tokRightSquare)(tokComma)(parseExpr)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprRecord.create)(delimited(tokLeftBrace)(tokRightBrace)(tokComma)(parseRecordLabeled(parseExpr))))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprParens.create)(parens(parseExpr))))))))))))));
  });
  var parseExpr7 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExprAtom)(function (expr) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordAccessor(expr))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(expr));
      });
  });
  var parseExpr6 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr7)(function (expr) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordUpdates(expr))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(expr));
      });
  });
  var parseExpr5 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseIf)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseLetIn)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseLambda)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseCase)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDo)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseAdo)(parseExpr6))))));
  });
  var parseExpr4 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr5)(function (expr) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseExpr5))(function (args) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(args);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return expr;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.ExprApp(expr, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 597, column 8 - line 599, column 31): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseExpr3 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprNegate.create)(tokKeyOperator("-")))(parseExpr3))(parseExpr4);
  });
  var parseExpr2 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr3)(function (expr) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseTickExpr))(parseExpr3)))(function (ops) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(ops);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return expr;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.ExprInfix(expr, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 569, column 8 - line 571, column 33): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseExpr1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr2)(function (expr) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseExpr2)))(function (ops) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(ops);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return expr;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.ExprOp(expr, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 561, column 8 - line 563, column 30): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseExpr = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr1)(function (expr) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprTyped.create(expr))(tokDoubleColon))(parseType))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(expr));
      });
  });
  var parseDoStatement = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DoLet.create)(tokKeyword("let")))(layoutNonEmpty(recoverLetBinding(parseLetBinding))))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.DoBind.create))(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseBinder))(tokLeftArrow))))(parseExpr))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DoDiscard.create)(parseExpr)));
  });
  var parseDo = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokQualifiedKeyword("do"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(layoutNonEmpty(recoverDoStatement(parseDoStatement)))(function (statements) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprDo({
              keyword: keyword,
              statements: statements
          }));
      });
  });
  var parseCaseBranches = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return layoutNonEmpty(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(separated(tokComma)(parseBinder1)))(parseGuarded(tokRightArrow)));
  });
  var parseCase = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("case"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(separated(tokComma)(parseExpr))(function (head) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("of"))(function (of_) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(PureScript_CST_Parser_Monad["try"](parseBadSingleCaseBranch))(parseCaseBranches))(function (branches) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprCase({
                      keyword: keyword,
                      head: head,
                      of: of_,
                      branches: branches
                  }));
              });
          });
      });
  });
  var parseBadSingleCaseWhere = function (binder) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightArrow)(function (arrow) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutEnd)(parseWhere))(function (body) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(Data_Array_NonEmpty.singleton(Data_Tuple.Tuple.create({
                  head: binder,
                  tail: [  ]
              })(new PureScript_CST_Types.Unconditional(arrow, body))));
          });
      });
  };
  var parseBadSingleCaseGuarded = function (binder) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutEnd)(parseGuarded(tokRightArrow)))(function (body) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(Data_Array_NonEmpty.singleton(new Data_Tuple.Tuple({
              head: binder,
              tail: [  ]
          }, body)));
      });
  };
  var parseBadSingleCaseBranch = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(parseBinder1))(function (binder) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseBadSingleCaseWhere(binder))(parseBadSingleCaseGuarded(binder));
  });
  var parseAdo = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokQualifiedKeyword("ado"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(layout(recoverDoStatement(parseDoStatement)))(function (statements) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("in"))(function (in_) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (result) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprAdo({
                      keyword: keyword,
                      statements: statements,
                      "in": in_,
                      result: result
                  }));
              });
          });
      });
  });
  var parseDeclValue1 = function (name) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (binders) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseGuarded(tokEquals))(function (guarded) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclValue({
                  name: name,
                  binders: binders,
                  guarded: guarded
              }));
          });
      });
  };
  var parseDeclValue = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (ident) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclSignature(ident))(parseDeclValue1(ident));
  });
  var parseInstanceBindingName = function (name) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (binders) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseGuarded(tokEquals))(function (guarded) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.InstanceBindingName({
                  name: name,
                  binders: binders,
                  guarded: guarded
              }));
          });
      });
  };
  var parseInstanceBinding = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (ident) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseInstanceBindingSignature(ident))(parseInstanceBindingName(ident));
  });
  var parseInstance = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("instance"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseClassConstraints(parseType3)))(tokRightFatArrow))))(function (constraints) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseQualifiedProper)(function (className) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeAtom))(function (types) {
                          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(parseInstanceBinding))))(function (body) {
                              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                                  head: {
                                      keyword: keyword,
                                      name: name,
                                      separator: separator,
                                      constraints: constraints,
                                      className: className,
                                      types: types
                                  },
                                  body: body
                              });
                          });
                      });
                  });
              });
          });
      });
  });
  var parseDeclInstanceChain = Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DeclInstanceChain.create)(separated(parseInstanceChainSeparator)(parseInstance));
  var parseDeclClass1 = function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseClassConstraints(parseType5)))(tokLeftFatArrow))))(function ($$super) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(separated(tokComma)(parseFundep))))(function (fundeps) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(parseClassMember))))(function (members) {
                          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclClass({
                              keyword: keyword,
                              "super": $$super,
                              name: name,
                              vars: vars,
                              fundeps: fundeps
                          }, members));
                      });
                  });
              });
          });
      });
  };
  var parseDeclClass = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("class"))(function (keyword) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclClassSignature(keyword))(parseDeclClass1(keyword));
  });
  var parseDeclData1 = function (keyword) {
      return function (name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokEquals))(separated(tokPipe)(parseDataCtor))))(function (ctors) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclData({
                      keyword: keyword,
                      name: name,
                      vars: vars
                  }, ctors));
              });
          });
      };
  };
  var parseDeclData = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("data"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclKindSignature(keyword)(name))(parseDeclData1(keyword)(name));
      });
  });
  var parseDeclNewtype1 = function (keyword) {
      return function (name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokEquals)(function (tok) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (wrapper) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseTypeAtom)(function (body) {
                          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclNewtype({
                              keyword: keyword,
                              name: name,
                              vars: vars
                          }, tok, wrapper, body));
                      });
                  });
              });
          });
      };
  };
  var parseDeclNewtype = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("newtype"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclKindSignature(keyword)(name))(parseDeclNewtype1(keyword)(name));
      });
  });
  var parseDeclType2 = function (keyword) {
      return function (name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokEquals)(function (tok) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (body) {
                      return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclType({
                          keyword: keyword,
                          name: name,
                          vars: vars
                      }, tok, body));
                  });
              });
          });
      };
  };
  var parseDeclType1 = function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclKindSignature(keyword)(name))(parseDeclType2(keyword)(name));
      });
  };
  var parseDeclType = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("type"))(function (keyword) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclRole(keyword))(parseDeclType1(keyword));
  });
  var parseDecl = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclData)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclNewtype)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclType)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclClass)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclInstanceChain)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclDerive)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclValue)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclForeign)(parseDeclFixity))))))));
  var parseModuleDecls = PureScript_CST_Parser_Monad.many(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(recoverDecl(parseDecl))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(tokLayoutSep)(PureScript_CST_Parser_Monad.lookAhead(tokLayoutEnd))));
  var parseModuleBody = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(parseModuleDecls)(tokLayoutEnd))(function (decls) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.eof)(function (v) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
              decls: decls,
              trailingComments: v.value1,
              end: v.value0
          });
      });
  });
  var parseModule = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleHeader)(function (header) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleBody)(function (body) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
              header: header,
              body: body
          });
      });
  });
  exports["parseModule"] = parseModule;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["PureScript.CST"] = $PS["PureScript.CST"] || {};
  var exports = $PS["PureScript.CST"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var PureScript_CST_Lexer = $PS["PureScript.CST.Lexer"];
  var PureScript_CST_Parser = $PS["PureScript.CST.Parser"];
  var PureScript_CST_Parser_Monad = $PS["PureScript.CST.Parser.Monad"];
  var ParseSucceeded = (function () {
      function ParseSucceeded(value0) {
          this.value0 = value0;
      };
      ParseSucceeded.create = function (value0) {
          return new ParseSucceeded(value0);
      };
      return ParseSucceeded;
  })();
  var ParseSucceededWithErrors = (function () {
      function ParseSucceededWithErrors(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseSucceededWithErrors.create = function (value0) {
          return function (value1) {
              return new ParseSucceededWithErrors(value0, value1);
          };
      };
      return ParseSucceededWithErrors;
  })();
  var ParseFailed = (function () {
      function ParseFailed(value0) {
          this.value0 = value0;
      };
      ParseFailed.create = function (value0) {
          return new ParseFailed(value0);
      };
      return ParseFailed;
  })();
  var toRecoveredParserResult = function (v) {
      var v1 = function (v2) {
          if (v instanceof Data_Either.Right && Data_Boolean.otherwise) {
              return new ParseSucceeded(v.value0.value0);
          };
          if (v instanceof Data_Either.Left) {
              return new ParseFailed(v.value0);
          };
          throw new Error("Failed pattern match at PureScript.CST (line 41, column 1 - line 44, column 29): " + [ v.constructor.name ]);
      };
      if (v instanceof Data_Either.Right) {
          var $12 = Data_Array_NonEmpty.fromArray(v.value0.value1);
          if ($12 instanceof Data_Maybe.Just) {
              return new ParseSucceededWithErrors(v.value0.value0, $12.value0);
          };
          return v1(true);
      };
      return v1(true);
  };                                           
  var runRecoveredParser = function (p) {
      var $24 = Data_Function.flip(PureScript_CST_Parser_Monad.runParser)(p);
      return function ($25) {
          return toRecoveredParserResult($24(PureScript_CST_Lexer.lex($25)));
      };
  };
  var parseModule = runRecoveredParser(PureScript_CST_Parser.parseModule);
  exports["ParseSucceeded"] = ParseSucceeded;
  exports["ParseSucceededWithErrors"] = ParseSucceededWithErrors;
  exports["parseModule"] = parseModule;
})(PS);
(function($PS) {
  "use strict";
  $PS["LanguageServer.IdePurescript.ChangeContent"] = $PS["LanguageServer.IdePurescript.ChangeContent"] || {};
  var exports = $PS["LanguageServer.IdePurescript.ChangeContent"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_DateTime_Instant = $PS["Data.DateTime.Instant"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Now = $PS["Effect.Now"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Foreign_Object = $PS["Foreign.Object"];
  var LanguageServer_IdePurescript_Build = $PS["LanguageServer.IdePurescript.Build"];
  var LanguageServer_IdePurescript_Config = $PS["LanguageServer.IdePurescript.Config"];
  var LanguageServer_IdePurescript_Types = $PS["LanguageServer.IdePurescript.Types"];
  var LanguageServer_IdePurescript_Util_TemporaryFile = $PS["LanguageServer.IdePurescript.Util.TemporaryFile"];
  var LanguageServer_Protocol_Console = $PS["LanguageServer.Protocol.Console"];
  var LanguageServer_Protocol_Handlers = $PS["LanguageServer.Protocol.Handlers"];
  var LanguageServer_Protocol_TextDocument = $PS["LanguageServer.Protocol.TextDocument"];
  var LanguageServer_Protocol_Types = $PS["LanguageServer.Protocol.Types"];
  var LanguageServer_Protocol_Uri = $PS["LanguageServer.Protocol.Uri"];
  var LanguageServer_Protocol_Window = $PS["LanguageServer.Protocol.Window"];
  var PureScript_CST = $PS["PureScript.CST"];                
  var parseAndStoreResult = function (stateRef) {
      return function (document) {
          var v = LanguageServer_Protocol_TextDocument.getUri(document);
          return function __do() {
              var version = LanguageServer_Protocol_TextDocument.getVersion(document)();
              var textContent = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(LanguageServer_Protocol_TextDocument.getText(document))();
              var result = PureScript_CST.parseModule(textContent);
              var modification = function (s) {
                  return {
                      parseResults: Foreign_Object.insert(v)({
                          version: version,
                          result: result
                      })(s.parseResults),
                      buildQueue: s.buildQueue,
                      clientCapabilities: s.clientCapabilities,
                      connection: s.connection,
                      deactivate: s.deactivate,
                      diagnostics: s.diagnostics,
                      modules: s.modules,
                      modulesFile: s.modulesFile,
                      previousRebuild: s.previousRebuild,
                      pscIdePort: s.pscIdePort,
                      root: s.root,
                      runningRebuild: s.runningRebuild,
                      showExportManagementCodeLenses: s.showExportManagementCodeLenses,
                      successfulBuildTimes: s.successfulBuildTimes
                  };
              };
              return Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref.modify_(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(modification))(stateRef))();
          };
      };
  };
  var median = function (arr) {
      return Data_Maybe.fromMaybe(Data_Monoid.mempty(Data_Time_Duration.monoidMilliseconds))((function () {
          var sorted = Data_Array.sort(Data_Time_Duration.ordMilliseconds)(arr);
          var $17 = Data_Int.odd(Data_Array.length(arr));
          if ($17) {
              return Data_Array.index(sorted)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(Data_Array.length(arr))(2));
          };
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(sorted)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(Data_Array.length(arr))(2)))(function (v) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(sorted)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(Data_Array.length(arr))(2) - 1 | 0))(function (v1) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)((v + v1) / 2.0);
              });
          });
      })());
  };
  var isTooSlow = function (times) {
      return Data_Ord.greaterThan(Data_Time_Duration.ordMilliseconds)(median(times))(Data_Time_Duration.fromDuration(Data_Time_Duration.durationSeconds)(Data_Time_Duration.Seconds(4.0)));
  };
  var killServer = function (conn) {
      return function (stateRef) {
          return function (restartPscIdeServer) {
              return function (state) {
                  return function (previousBuildTimes) {
                      return function (realFilename) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(Data_Time_Duration.fromDuration(Data_Time_Duration.durationSeconds)(8.0)))(function () {
                              var newSuccesfulBuildTimes = Data_Array.takeEnd(3)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(previousBuildTimes)([ Data_Time_Duration.fromDuration(Data_Time_Duration.durationSeconds)(8.0) ]));
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Window.showWarning(conn)("Extremely long compile time, restarting the PureScript language server")))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(restartPscIdeServer)(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(isTooSlow(newSuccesfulBuildTimes))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                          LanguageServer_Protocol_Window.showInformation(conn)("This file builds very slowly and I won't build it as you type anymore")();
                                          return LanguageServer_Protocol_Window.showWarning(conn)("You must save this file to get error information")();
                                      })))(function () {
                                          var update = Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function (v) {
                                              return {
                                                  runningRebuild: Data_Maybe.Nothing.value,
                                                  successfulBuildTimes: Foreign_Object.insert(realFilename)(newSuccesfulBuildTimes)((Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)(state)).successfulBuildTimes),
                                                  buildQueue: v.buildQueue,
                                                  clientCapabilities: v.clientCapabilities,
                                                  connection: v.connection,
                                                  deactivate: v.deactivate,
                                                  diagnostics: v.diagnostics,
                                                  modules: v.modules,
                                                  modulesFile: v.modulesFile,
                                                  parseResults: v.parseResults,
                                                  previousRebuild: v.previousRebuild,
                                                  pscIdePort: v.pscIdePort,
                                                  root: v.root,
                                                  showExportManagementCodeLenses: v.showExportManagementCodeLenses
                                              };
                                          });
                                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(update)(stateRef));
                                      });
                                  });
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var rebuildFile = function (stateRef) {
      return function (config) {
          return function (state) {
              return function (conn) {
                  return function (uri) {
                      return function (previousBuildTimes) {
                          return function (realFilename) {
                              return function (tmpFilename) {
                                  return function (textContent) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.mapFlipped(Effect.functorEffect)(Effect_Now.now)(Data_DateTime_Instant.unInstant)))(function (v) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_IdePurescript_Build.getDiagnosticsForTmpFile(tmpFilename)(uri)(config)(state))(function (v1) {
                                              var fileDiagnostics = Data_Maybe.fromMaybe([  ])(Foreign_Object.lookup(realFilename)(v1.diagnostics));
                                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                                  Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(LanguageServer_Protocol_Handlers.sendDiagnosticsBegin(conn))();
                                                  var v2 = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Data_Functor.mapFlipped(Effect.functorEffect)(Effect_Now.now)(Data_DateTime_Instant.unInstant))();
                                                  var buildTime = Data_Time_Duration.Milliseconds(v2 - v);
                                                
                                                  // errors usually get reported quickly so we exclude them 
  var newSuccessfulBuildTimes = (function () {
                                                      if (v1.hasErrors) {
                                                          return previousBuildTimes;
                                                      };
                                                      return Data_Array.takeEnd(5)(Data_Array.snoc(previousBuildTimes)(buildTime));
                                                  })();
                                                  Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Control_Applicative.when(Effect.applicativeEffect)(isTooSlow(newSuccessfulBuildTimes))(LanguageServer_Protocol_Window.showWarning(conn)("This file builds very slowly.\x0a" + ("I will not build it as you type anymore.\x0a" + "You must save this file to get error information."))))();
                                                  LanguageServer_Protocol_Console.log(conn)("Built with " + (Data_Show.show(Data_Show.showInt)(Data_Array.length(fileDiagnostics)) + ("/" + (Data_Show.show(Data_Show.showInt)(Data_Array.length(v1.pscErrors)) + (" issues for file: " + (Data_Show.show(Data_Show.showString)(realFilename) + (", all diagnostic files: " + Data_Show.show(Data_Show.showArray(Data_Show.showString))(Foreign_Object.keys(v1.diagnostics)))))))))();
                                                  var nonFileDiagnostics = Foreign_Object["delete"](realFilename)(v1.diagnostics);
                                                  Control_Applicative.when(Effect.applicativeEffect)(Foreign_Object.size(nonFileDiagnostics) > 0)(LanguageServer_Protocol_Console.log(conn)("Unmatched diagnostics: " + Data_Show.show(Foreign_Object.showObject(Data_Show.showArray(LanguageServer_Protocol_Types.showDiagnostic)))(nonFileDiagnostics)))();
                                                  Effect_Ref.modify_(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function (s1) {
                                                      return {
                                                          runningRebuild: Data_Maybe.Nothing.value,
                                                          successfulBuildTimes: Foreign_Object.insert(realFilename)(newSuccessfulBuildTimes)((Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)(state)).successfulBuildTimes),
                                                          diagnostics: Foreign_Object.insert(Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)(uri))(v1.pscErrors)(s1.diagnostics),
                                                          previousRebuild: new Data_Maybe.Just({
                                                              content: textContent,
                                                              uri: uri
                                                          }),
                                                          buildQueue: s1.buildQueue,
                                                          clientCapabilities: s1.clientCapabilities,
                                                          connection: s1.connection,
                                                          deactivate: s1.deactivate,
                                                          modules: s1.modules,
                                                          modulesFile: s1.modulesFile,
                                                          parseResults: s1.parseResults,
                                                          pscIdePort: s1.pscIdePort,
                                                          root: s1.root,
                                                          showExportManagementCodeLenses: s1.showExportManagementCodeLenses
                                                      };
                                                  }))(stateRef)();
                                                  LanguageServer_Protocol_Handlers.publishDiagnostics(conn)({
                                                      uri: uri,
                                                      diagnostics: fileDiagnostics
                                                  })();
                                                  return LanguageServer_Protocol_Handlers.sendDiagnosticsEnd(conn)();
                                              });
                                          });
                                      });
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var invalidateModulesFile = Effect_Ref.modify_(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function (v) {
      return {
          modulesFile: Data_Maybe.Nothing.value,
          buildQueue: v.buildQueue,
          clientCapabilities: v.clientCapabilities,
          connection: v.connection,
          deactivate: v.deactivate,
          diagnostics: v.diagnostics,
          modules: v.modules,
          parseResults: v.parseResults,
          previousRebuild: v.previousRebuild,
          pscIdePort: v.pscIdePort,
          root: v.root,
          runningRebuild: v.runningRebuild,
          showExportManagementCodeLenses: v.showExportManagementCodeLenses,
          successfulBuildTimes: v.successfulBuildTimes
      };
  }));
  var debounceMessage = "Debounced build";
  var compileFile = function (config) {
      return function (conn) {
          return function (stateRef) {
              return function (state) {
                  return function (document) {
                      return function (restartPscIdeServer) {
                          return function (uri) {
                              return function (realFilename) {
                                  return function (previousBuildTimes) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(LanguageServer_IdePurescript_Config.rebuildFrequency(config)))(function () {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getText(document)))(function (textContent) {
                                              var textDidChange = (function () {
                                                  var v = (Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)(state)).previousRebuild;
                                                  if (v instanceof Data_Maybe.Nothing) {
                                                      return true;
                                                  };
                                                  if (v instanceof Data_Maybe.Just) {
                                                      return !(Data_Eq.eq(LanguageServer_Protocol_Types.eqDocumentUri)(v.value0.uri)(uri) && v.value0.content === textContent);
                                                  };
                                                  throw new Error("Failed pattern match at LanguageServer.IdePurescript.ChangeContent (line 98, column 21 - line 100, column 84): " + [ v.constructor.name ]);
                                              })();
                                              return Control_Applicative.when(Effect_Aff.applicativeAff)(textDidChange)(LanguageServer_IdePurescript_Util_TemporaryFile.withTemporaryFFIFile(realFilename)(textContent)(function (v) {
                                                  var rebuild = rebuildFile(stateRef)(config)(state)(conn)(uri)(previousBuildTimes)(realFilename)(v.pursFilePath)(textContent);
                                                  var kill = killServer(conn)(stateRef)(restartPscIdeServer)(state)(previousBuildTimes)(realFilename);
                                                  return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Alt.alt(Effect_Aff.altParAff)(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(rebuild))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(kill)));
                                              }));
                                          });
                                      });
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var liveRebuild = function (config) {
      return function (connection) {
          return function (stateRef) {
              return function (uri) {
                  return function (restartPscIdeServer) {
                      return function (document) {
                          return function (realFilename) {
                              return function (previousBuildTimes) {
                                  return function (launchAffLog) {
                                      return function __do() {
                                          var v = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref.read(stateRef))();
                                          var currentlyRunning = Data_Functor.mapFlipped(Effect.functorEffect)(Data_Functor.mapFlipped(Effect.functorEffect)(Effect_Ref.read(stateRef))(Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)))(function (v1) {
                                              return v1.runningRebuild;
                                          })();
                                          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(currentlyRunning)((function () {
                                              var $40 = Effect_Aff.killFiber(Effect_Exception.error(debounceMessage));
                                              return function ($41) {
                                                  return Effect_Aff.launchAff_($40($41));
                                              };
                                          })())();
                                          var runningRebuild = launchAffLog(compileFile(config)(connection)(stateRef)(v)(document)(restartPscIdeServer)(uri)(realFilename)(previousBuildTimes))();
                                          return Effect_Ref.modify_(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function (v1) {
                                              return {
                                                  runningRebuild: new Data_Maybe.Just(runningRebuild),
                                                  buildQueue: v1.buildQueue,
                                                  clientCapabilities: v1.clientCapabilities,
                                                  connection: v1.connection,
                                                  deactivate: v1.deactivate,
                                                  diagnostics: v1.diagnostics,
                                                  modules: v1.modules,
                                                  modulesFile: v1.modulesFile,
                                                  parseResults: v1.parseResults,
                                                  previousRebuild: v1.previousRebuild,
                                                  pscIdePort: v1.pscIdePort,
                                                  root: v1.root,
                                                  showExportManagementCodeLenses: v1.showExportManagementCodeLenses,
                                                  successfulBuildTimes: v1.successfulBuildTimes
                                              };
                                          }))(stateRef)();
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var handleDidChangeContent = function (configRef) {
      return function (connection) {
          return function (stateRef) {
              return function (restartPscIdeServer) {
                  return function (launchAffLog) {
                      return function (v) {
                          var uri = LanguageServer_Protocol_TextDocument.getUri(v.document);
                          return function __do() {
                              var config = Effect_Ref.read(configRef)();
                              var state = Effect_Ref.read(stateRef)();
                              var filename = LanguageServer_Protocol_Uri.uriToFilename(uri)();
                              var previousBuildTimes = Data_Maybe.fromMaybe([  ])(Foreign_Object.lookup(filename)((Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)(state)).successfulBuildTimes));
                              parseAndStoreResult(stateRef)(v.document)();
                              var $38 = LanguageServer_IdePurescript_Config.liveRebuild(config) && Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(isTooSlow)(previousBuildTimes);
                              if ($38) {
                                  return liveRebuild(config)(connection)(stateRef)(uri)(restartPscIdeServer)(v.document)(filename)(previousBuildTimes)(launchAffLog)();
                              };
                              return invalidateModulesFile(stateRef)();
                          };
                      };
                  };
              };
          };
      };
  };
  exports["handleDidChangeContent"] = handleDidChangeContent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.CodeActions"] = $PS["LanguageServer.IdePurescript.CodeActions"] || {};
  var exports = $PS["LanguageServer.IdePurescript.CodeActions"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Foreign_Internal_Stringify = $PS["Foreign.Internal.Stringify"];
  var Foreign_Object = $PS["Foreign.Object"];
  var IdePurescript_QuickFix = $PS["IdePurescript.QuickFix"];
  var IdePurescript_Regex = $PS["IdePurescript.Regex"];
  var LanguageServer_IdePurescript_Assist = $PS["LanguageServer.IdePurescript.Assist"];
  var LanguageServer_IdePurescript_Commands = $PS["LanguageServer.IdePurescript.Commands"];
  var LanguageServer_IdePurescript_Util_Position = $PS["LanguageServer.IdePurescript.Util.Position"];
  var LanguageServer_Protocol_Console = $PS["LanguageServer.Protocol.Console"];
  var LanguageServer_Protocol_DocumentStore = $PS["LanguageServer.Protocol.DocumentStore"];
  var LanguageServer_Protocol_Handlers = $PS["LanguageServer.Protocol.Handlers"];
  var LanguageServer_Protocol_Text = $PS["LanguageServer.Protocol.Text"];
  var LanguageServer_Protocol_TextDocument = $PS["LanguageServer.Protocol.TextDocument"];
  var LanguageServer_Protocol_Types = $PS["LanguageServer.Protocol.Types"];                
  var toNextLine = function (v) {
      return {
          start: v.start,
          end: {
              line: v.end.line + 1 | 0,
              character: 0
          }
      };
  };
  var readSuggestion = function (o) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(o)("replacement"))(Foreign.readString(Data_Identity.monadIdentity)))(function (replacement) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(o)("range"))(LanguageServer_Protocol_Types.readRange))(function (range) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                  replacement: replacement,
                  range: range
              });
          });
      });
  };
  var m = Data_Nullable.toMaybe;
  var commandAction = function (kind) {
      return function (v) {
          return {
              title: v.title,
              kind: kind,
              isPreferred: false,
              edit: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
              command: Data_Nullable.toNullable(new Data_Maybe.Just(v))
          };
      };
  };
  var codeActionLiteralsSupported = function (c) {
      return Data_Maybe.isJust(Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(m((function (v) {
          return v.textDocument;
      })(c)))(function ($175) {
          return m((function (v) {
              return v.codeAction;
          })($175));
      }))(function ($176) {
          return m((function (v) {
              return v.codeActionLiteralSupport;
          })($176));
      }));
  };
  var codeActionToCommand = function (capabilities) {
      return function (action) {
          var supportsLiteral = Data_Maybe.maybe(true)(codeActionLiteralsSupported)(capabilities);
          var convert = function (v) {
              var v1 = function (v2) {
                  return Data_Maybe.Nothing.value;
              };
              var $48 = m(v.command);
              if ($48 instanceof Data_Maybe.Just) {
                  return Data_Maybe.Just.create(new Data_Either.Right($48.value0));
              };
              return v1(true);
          };
          return Data_Functor.map(Data_Maybe.functorMaybe)(LanguageServer_Protocol_Types.codeActionResult)((function () {
              if (supportsLiteral) {
                  return new Data_Maybe.Just(action);
              };
              return Data_Either.either(convert)(function ($177) {
                  return Data_Maybe.Just.create(Data_Either.Right.create($177));
              })(action);
          })());
      };
  };
  var getActions = function (v) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  if (v2.connection instanceof Data_Maybe.Just) {
                      var removeOverlaps = (function () {
                          var go = function (v4) {
                              return function (v5) {
                                  if (v4.length === 0) {
                                      return [ v5 ];
                                  };
                                  var v6 = function (v7) {
                                      return v4;
                                  };
                                  var $63 = Data_Array.head(v4);
                                  if ($63 instanceof Data_Maybe.Just) {
                                      var $64 = Data_Ord.lessThan(LanguageServer_Protocol_Types.positionOrd)($63.value0.range.end)(v5.range.start);
                                      if ($64) {
                                          return Data_Array.cons(v5)(v4);
                                      };
                                      return v6(true);
                                  };
                                  return v6(true);
                              };
                          };
                          return Data_Array.foldl(go)([  ]);
                      })();
                      var organiseImports = [ Data_Either.Left.create(commandAction(LanguageServer_Protocol_Types.CodeActionKind("source.organizeImports"))(LanguageServer_IdePurescript_Commands.organiseImports(v3.textDocument.uri))) ];
                      var notImplicitPrelude = Data_Array.filter(function (v4) {
                          return !(v4.errorCode === "ImplicitImport" && Data_String_CodeUnits.contains("Module Prelude")(v4.message));
                      });
                      var intersects = function (v4) {
                          return function (v5) {
                              return Data_Ord.lessThanOrEq(LanguageServer_Protocol_Types.positionOrd)(v4.start)(v5.end) && Data_Ord.lessThanOrEq(LanguageServer_Protocol_Types.positionOrd)(v5.start)(v4.end);
                          };
                      };
                      var getReplacementRange = function (v4) {
                          if (v4.position instanceof Data_Maybe.Just && v4.suggestion instanceof Data_Maybe.Just) {
                              var range$prime = LanguageServer_IdePurescript_Util_Position.convertRangePosition(Data_Maybe.fromMaybe(v4.position.value0)(v4.suggestion.value0.replaceRange));
                              return Data_Maybe.Just.create({
                                  replacement: v4.suggestion.value0.replacement,
                                  range: range$prime
                              });
                          };
                          return Data_Maybe.Nothing.value;
                      };
                      var fixAllCommand = function (text) {
                          return function (rebuildErrors) {
                              var replacements = removeOverlaps(Data_Array.sortWith(LanguageServer_Protocol_Types.ordRange)(function (v4) {
                                  return v4.range;
                              })(Data_Array.nubByEq(Data_Eq.eq(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                  return "replacement";
                              }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                  return "range";
                              }))(LanguageServer_Protocol_Types.eqRange))))(Data_Array.mapMaybe(getReplacementRange)(rebuildErrors))));
                              var $86 = Data_Array.length(replacements) > 0;
                              if ($86) {
                                  return [ LanguageServer_IdePurescript_Commands.replaceAllSuggestions(text)(v3.textDocument.uri)(replacements) ];
                              };
                              return [  ];
                          };
                      };
                      var commandForCode = function (v4) {
                          if (v4.position instanceof Data_Maybe.Just && intersects(LanguageServer_IdePurescript_Util_Position.convertRangePosition(v4.position.value0))(v3.range)) {
                              if (v4.errorCode === "ModuleNotFound") {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)([ LanguageServer_IdePurescript_Commands.build ]);
                              };
                              if (v4.errorCode === "HoleInferredType") {
                                  if (v4.pursIde instanceof Data_Maybe.Just) {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Array.singleton(LanguageServer_IdePurescript_Commands.typedHole(v4.pursIde.value0.name)(v3.textDocument.uri)(LanguageServer_IdePurescript_Util_Position.convertRangePosition(v4.position.value0))(v4.pursIde.value0.completions)));
                                  };
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
                              };
                              var v5 = function (v6) {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
                              };
                              var $95 = IdePurescript_QuickFix.isUnknownToken(v4.errorCode);
                              if ($95) {
                                  return LanguageServer_IdePurescript_Assist.fixTypoActions(v)(v1)(v2)(v3.textDocument.uri)(v4.position.value0.startLine - 1 | 0)(v4.position.value0.startColumn - 1 | 0);
                              };
                              return v5(true);
                          };
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
                      };
                      var asCommand = function (v4) {
                          var v5 = function (v6) {
                              return Data_Maybe.Nothing.value;
                          };
                          if (v4.position instanceof Data_Maybe.Just) {
                              var $103 = getReplacementRange(v4);
                              if ($103 instanceof Data_Maybe.Just) {
                                  var $104 = intersects(LanguageServer_IdePurescript_Util_Position.convertRangePosition(v4.position.value0))(v3.range);
                                  if ($104) {
                                      return Data_Maybe.Just.create(LanguageServer_IdePurescript_Commands.replaceSuggestion(IdePurescript_QuickFix.getTitle(v4.errorCode))(v3.textDocument.uri)($103.value0.replacement)($103.value0.range));
                                  };
                                  return v5(true);
                              };
                              return v5(true);
                          };
                          return v5(true);
                      };
                      var allImportSuggestions = function (errs) {
                          return Data_Functor.map(Data_Functor.functorArray)((function () {
                              var $178 = commandAction(LanguageServer_Protocol_Types.codeActionEmpty);
                              return function ($179) {
                                  return Data_Either.Left.create($178($179));
                              };
                          })())(fixAllCommand("Apply all import suggestions")(Data_Array.filter(function (v4) {
                              return IdePurescript_QuickFix.isImport(v4.errorCode);
                          })(errs)));
                      };
                      var v4 = Foreign_Object.lookup(Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)(v3.textDocument.uri))(v2.diagnostics);
                      if (v4 instanceof Data_Maybe.Just) {
                          return Data_Functor.map(Effect_Aff.functorAff)(Data_Array.mapMaybe(codeActionToCommand(v2.clientCapabilities)))(Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(commandForCode)(v4.value0))(function (codeActions) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Either.Right.create)(Data_Array.mapMaybe(asCommand)(v4.value0)))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Either.Right.create)(fixAllCommand("Apply all suggestions")(notImplicitPrelude(v4.value0))))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(allImportSuggestions(notImplicitPrelude(v4.value0)))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Either.Right.create)(Data_Array.concat(codeActions)))(organiseImports)))));
                          }));
                      };
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
                  };
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
              };
          };
      };
  };
  var afterEnd = function (v) {
      return {
          start: v.end,
          end: {
              line: v.end.line,
              character: v.end.character + 10 | 0
          }
      };
  };
  var getReplacementEdit = function (doc) {
      return function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(IdePurescript_Regex["replace'"](Data_String_Regex.regex("\x0a$")(Data_String_Regex_Flags.noFlags))(""))(LanguageServer_Protocol_TextDocument.getTextAtRange(doc)(afterEnd(v.range)))))(function (afterText) {
              var newText = IdePurescript_QuickFix.getReplacement(v.replacement)(afterText);
              var range$prime = (function () {
                  var $128 = newText === "" && afterText === "";
                  if ($128) {
                      return toNextLine(v.range);
                  };
                  return v.range;
              })();
              return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                  range: range$prime,
                  newText: newText
              });
          });
      };
  };
  var onReplaceAllSuggestions = function (docs) {
      return function (v) {
          return function (v1) {
              return function (args) {
                  var v2 = function (v3) {
                      if (v1.connection instanceof Data_Maybe.Just) {
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(v1.connection.value0)("[onReplaceAllSuggestions]: " + ("received unexpected args" + Foreign_Internal_Stringify.unsafeStringify(args))));
                      };
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                  };
                  if (v1.connection instanceof Data_Maybe.Just && args.length === 2) {
                      var $140 = Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[0]));
                      if ($140 instanceof Data_Either.Right) {
                          var $141 = Control_Monad_Except.runExcept(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray(Data_Identity.monadIdentity)(args[1]))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(readSuggestion)));
                          if ($141 instanceof Data_Either.Right) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)($140.value0)))(function (maybeDoc) {
                                  if (maybeDoc instanceof Data_Maybe.Nothing) {
                                      return Data_Monoid.mempty(Effect_Aff.monoidAff(Data_Monoid.monoidUnit));
                                  };
                                  if (maybeDoc instanceof Data_Maybe.Just) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getVersion(maybeDoc.value0)))(function (version) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(getReplacementEdit(maybeDoc.value0))($141.value0))(function (edits) {
                                              return Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(v1.connection.value0)(LanguageServer_Protocol_Types.workspaceEdit(v1.clientCapabilities)([ {
                                                  textDocument: {
                                                      uri: $140.value0,
                                                      version: version
                                                  },
                                                  edits: edits
                                              } ])));
                                          });
                                      });
                                  };
                                  throw new Error("Failed pattern match at LanguageServer.IdePurescript.CodeActions (line 197, column 11 - line 207, column 18): " + [ maybeDoc.constructor.name ]);
                              });
                          };
                          return v2(true);
                      };
                      return v2(true);
                  };
                  return v2(true);
              };
          };
      };
  };
  var onReplaceSuggestion = function (docs) {
      return function (v) {
          return function (v1) {
              return function (args) {
                  var v2 = function (v3) {
                      if (v1.connection instanceof Data_Maybe.Just) {
                          var message = "Invalid arguments to onReplaceSuggestion: " + Foreign_Internal_Stringify.unsafeStringify(args);
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(v1.connection.value0)(message));
                      };
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                  };
                  if (v1.connection instanceof Data_Maybe.Just && args.length === 3) {
                      var $158 = Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[0]));
                      if ($158 instanceof Data_Either.Right) {
                          var $159 = Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[1]));
                          if ($159 instanceof Data_Either.Right) {
                              var $160 = Control_Monad_Except.runExcept(LanguageServer_Protocol_Types.readRange(args[2]));
                              if ($160 instanceof Data_Either.Right) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)($158.value0)))(function (maybeDoc) {
                                      if (maybeDoc instanceof Data_Maybe.Nothing) {
                                          return Data_Monoid.mempty(Effect_Aff.monoidAff(Data_Monoid.monoidUnit));
                                      };
                                      if (maybeDoc instanceof Data_Maybe.Just) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getVersion(maybeDoc.value0)))(function (version) {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(getReplacementEdit(maybeDoc.value0)({
                                                  replacement: $159.value0,
                                                  range: $160.value0
                                              }))(function (v3) {
                                                  var edit = LanguageServer_Protocol_Text.makeWorkspaceEdit(v1.clientCapabilities)($158.value0)(version)(v3.range)(v3.newText);
                                                  return Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(v1.connection.value0)(edit));
                                              });
                                          });
                                      };
                                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.CodeActions (line 163, column 9 - line 171, column 40): " + [ maybeDoc.constructor.name ]);
                                  });
                              };
                              return v2(true);
                          };
                          return v2(true);
                      };
                      return v2(true);
                  };
                  return v2(true);
              };
          };
      };
  };
  exports["getActions"] = getActions;
  exports["onReplaceSuggestion"] = onReplaceSuggestion;
  exports["onReplaceAllSuggestions"] = onReplaceAllSuggestions;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.Util.CST"] = $PS["LanguageServer.IdePurescript.Util.CST"] || {};
  var exports = $PS["LanguageServer.IdePurescript.Util.CST"];
  var sourcePosToPosition = function (v) {
      return {
          line: v.line,
          character: v.column
      };
  };
  var sourceRangeToRange = function (sr) {
      return {
          start: sourcePosToPosition(sr.start),
          end: sourcePosToPosition(sr.end)
      };
  };
  exports["sourceRangeToRange"] = sourceRangeToRange;
  exports["sourcePosToPosition"] = sourcePosToPosition;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["PureScript.CST.Traversal"] = $PS["PureScript.CST.Traversal"] || {};
  var exports = $PS["PureScript.CST.Traversal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Bitraversable = $PS["Data.Bitraversable"];
  var Data_Const = $PS["Data.Const"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Compose = $PS["Data.Functor.Compose"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unit = $PS["Data.Unit"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var traverseWrapped = function (dictApplicative) {
      return function (k) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (value) {
                  return {
                      open: v.open,
                      value: value,
                      close: v.close
                  };
              })(k(v.value));
          };
      };
  };
  var traverseSeparated = function (dictApplicative) {
      return function (k) {
          return function (v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v1) {
                  return function (v2) {
                      return {
                          head: v1,
                          tail: v2
                      };
                  };
              })(k(v.head)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(k))(v.tail));
          };
      };
  };
  var traverseRecordUpdate = function (dictApplicative) {
      return function (k) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.RecordUpdateLeaf) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.RecordUpdateLeaf.create(v.value0)(v.value1))(k.onExpr(v.value2));
              };
              if (v instanceof PureScript_CST_Types.RecordUpdateBranch) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.RecordUpdateBranch.create(v.value0))(traverseWrapped(dictApplicative)(traverseSeparated(dictApplicative)(traverseRecordUpdate(dictApplicative)(k)))(v.value1));
              };
              throw new Error("Failed pattern match at PureScript.CST.Traversal (line 410, column 26 - line 412, column 146): " + [ v.constructor.name ]);
          };
      };
  };
  var traverseRecordLabeled = function (dictApplicative) {
      return function (k) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.RecordPun) {
                  return Control_Applicative.pure(dictApplicative)(new PureScript_CST_Types.RecordPun(v.value0));
              };
              if (v instanceof PureScript_CST_Types.RecordField) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.RecordField.create(v.value0)(v.value1))(k(v.value2));
              };
              throw new Error("Failed pattern match at PureScript.CST.Traversal (line 385, column 27 - line 387, column 57): " + [ v.constructor.name ]);
          };
      };
  };
  var traverseRecordAccessor = function (dictApplicative) {
      return function (k) {
          return function (r) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                  return {
                      expr: v,
                      dot: r.dot,
                      path: r.path
                  };
              })(k.onExpr(r.expr));
          };
      };
  };
  var traversePatternGuard = function (dictApplicative) {
      return function (k) {
          return function (v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (binder) {
                  return function (expr) {
                      return {
                          binder: binder,
                          expr: expr
                      };
                  };
              })(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Bitraversable.ltraverse(Data_Bitraversable.bitraversableTuple)(dictApplicative)(k.onBinder))(v.binder)))(k.onExpr(v.expr));
          };
      };
  };
  var traverseModuleBody = function (dictApplicative) {
      return function (k) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (decls) {
                  return {
                      decls: decls,
                      trailingComments: v.trailingComments,
                      end: v.end
                  };
              })(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(k.onDecl)(v.decls));
          };
      };
  };
  var traverseModule = function (dictApplicative) {
      return function (k) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (body) {
                  return {
                      header: v.header,
                      body: body
                  };
              })(traverseModuleBody(dictApplicative)(k)(v.body));
          };
      };
  };
  var traverseLambda = function (dictApplicative) {
      return function (k) {
          return function (l) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                  return function (v1) {
                      return {
                          binders: v,
                          body: v1,
                          arrow: l.arrow,
                          symbol: l.symbol
                      };
                  };
              })(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(k.onBinder)(l.binders)))(k.onExpr(l.body));
          };
      };
  };
  var traverseLabeled = function (dictApplicative) {
      return function (k) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (value) {
                  return {
                      label: v.label,
                      separator: v.separator,
                      value: value
                  };
              })(k(v.value));
          };
      };
  };
  var traverseRow = function (dictApplicative) {
      return function (k) {
          return function (v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (labels) {
                  return function (tail) {
                      return {
                          labels: labels,
                          tail: tail
                      };
                  };
              })(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(traverseSeparated(dictApplicative)(traverseLabeled(dictApplicative)(k.onType)))(v.labels)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(k.onType))(v.tail));
          };
      };
  };
  var traverseTypeVarBinding = function (dictApplicative) {
      return function (k) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.TypeVarKinded) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeVarKinded.create)(traverseWrapped(dictApplicative)(traverseLabeled(dictApplicative)(k.onType))(v.value0));
              };
              if (v instanceof PureScript_CST_Types.TypeVarName) {
                  return Control_Applicative.pure(dictApplicative)(new PureScript_CST_Types.TypeVarName(v.value0));
              };
              throw new Error("Failed pattern match at PureScript.CST.Traversal (line 320, column 28 - line 322, column 46): " + [ v.constructor.name ]);
          };
      };
  };
  var traverseType = function (dictApplicative) {
      return function (k) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.TypeRow) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeRow.create)(traverseWrapped(dictApplicative)(traverseRow(dictApplicative)(k))(v.value0));
              };
              if (v instanceof PureScript_CST_Types.TypeRecord) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeRecord.create)(traverseWrapped(dictApplicative)(traverseRow(dictApplicative)(k))(v.value0));
              };
              if (v instanceof PureScript_CST_Types.TypeForall) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeForall.create(v.value0))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseTypeVarBinding(dictApplicative)(k))(v.value1)))(v.value2))(k.onType(v.value3));
              };
              if (v instanceof PureScript_CST_Types.TypeKinded) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeKinded.create)(k.onType(v.value0)))(v.value1))(k.onType(v.value2));
              };
              if (v instanceof PureScript_CST_Types.TypeApp) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeApp.create)(k.onType(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(k.onType)(v.value1));
              };
              if (v instanceof PureScript_CST_Types.TypeOp) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeOp.create)(k.onType(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(k.onType))(v.value1));
              };
              if (v instanceof PureScript_CST_Types.TypeArrow) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeArrow.create)(k.onType(v.value0)))(v.value1))(k.onType(v.value2));
              };
              if (v instanceof PureScript_CST_Types.TypeConstrained) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeConstrained.create)(k.onType(v.value0)))(v.value1))(k.onType(v.value2));
              };
              if (v instanceof PureScript_CST_Types.TypeParens) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeParens.create)(traverseWrapped(dictApplicative)(k.onType)(v.value0));
              };
              if (v instanceof PureScript_CST_Types.TypeUnaryRow) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeUnaryRow.create(v.value0))(k.onType(v.value1));
              };
              return Control_Applicative.pure(dictApplicative)(v);
          };
      };
  };
  var traverseIfThenElse = function (dictApplicative) {
      return function (k) {
          return function (r) {
              return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                  return function (v1) {
                      return function (v2) {
                          return {
                              cond: v,
                              "true": v1,
                              "false": v2,
                              "else": r["else"],
                              keyword: r.keyword,
                              then: r.then
                          };
                      };
                  };
              })(k.onExpr(r.cond)))(k.onExpr(r["true"])))(k.onExpr(r["false"]));
          };
      };
  };
  var traverseWhere = function (dictApplicative) {
      return function (k) {
          return function (v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (expr) {
                  return function (bindings) {
                      return {
                          expr: expr,
                          bindings: bindings
                      };
                  };
              })(k.onExpr(v.expr)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseLetBinding(dictApplicative)(k))))(v.bindings));
          };
      };
  };
  var traverseValueBindingFields = function (dictApplicative) {
      return function (k) {
          return function (v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v1) {
                  return function (v2) {
                      return {
                          binders: v1,
                          guarded: v2,
                          name: v.name
                      };
                  };
              })(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(k.onBinder)(v.binders)))(traverseGuarded(dictApplicative)(k)(v.guarded));
          };
      };
  };
  var traverseLetBinding = function (dictApplicative) {
      return function (k) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.LetBindingSignature) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.LetBindingSignature.create)(traverseLabeled(dictApplicative)(k.onType)(v.value0));
              };
              if (v instanceof PureScript_CST_Types.LetBindingName) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.LetBindingName.create)(traverseValueBindingFields(dictApplicative)(k)(v.value0));
              };
              if (v instanceof PureScript_CST_Types.LetBindingPattern) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.LetBindingPattern.create)(k.onBinder(v.value0)))(v.value1))(traverseWhere(dictApplicative)(k)(v.value2));
              };
              if (v instanceof PureScript_CST_Types.LetBindingError) {
                  return Control_Applicative.pure(dictApplicative)(new PureScript_CST_Types.LetBindingError(v.value0));
              };
              throw new Error("Failed pattern match at PureScript.CST.Traversal (line 489, column 24 - line 493, column 48): " + [ v.constructor.name ]);
          };
      };
  };
  var traverseGuardedExpr = function (dictApplicative) {
      return function (k) {
          return function (v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (ps) {
                  return function (wh) {
                      return {
                          bar: v.bar,
                          patterns: ps,
                          separator: v.separator,
                          where: wh
                      };
                  };
              })(traverseSeparated(dictApplicative)(traversePatternGuard(dictApplicative)(k))(v.patterns)))(traverseWhere(dictApplicative)(k)(v.where));
          };
      };
  };
  var traverseGuarded = function (dictApplicative) {
      return function (k) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.Unconditional) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.Unconditional.create(v.value0))(traverseWhere(dictApplicative)(k)(v.value1));
              };
              if (v instanceof PureScript_CST_Types.Guarded) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.Guarded.create)(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseGuardedExpr(dictApplicative)(k))(v.value0));
              };
              throw new Error("Failed pattern match at PureScript.CST.Traversal (line 450, column 21 - line 452, column 72): " + [ v.constructor.name ]);
          };
      };
  };
  var traverseInstanceBinding = function (dictApplicative) {
      return function (k) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.InstanceBindingSignature) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.InstanceBindingSignature.create)(traverseLabeled(dictApplicative)(k.onType)(v.value0));
              };
              if (v instanceof PureScript_CST_Types.InstanceBindingName) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.InstanceBindingName.create)(traverseValueBindingFields(dictApplicative)(k)(v.value0));
              };
              throw new Error("Failed pattern match at PureScript.CST.Traversal (line 246, column 29 - line 248, column 92): " + [ v.constructor.name ]);
          };
      };
  };
  var traverseLetIn = function (dictApplicative) {
      return function (k) {
          return function (l) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                  return function (v1) {
                      return {
                          bindings: v,
                          body: v1,
                          "in": l["in"],
                          keyword: l.keyword
                      };
                  };
              })(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseLetBinding(dictApplicative)(k))(l.bindings)))(k.onExpr(l.body));
          };
      };
  };
  var traverseForeign = function (dictApplicative) {
      return function (k) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.ForeignValue) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ForeignValue.create)(traverseLabeled(dictApplicative)(k.onType)(v.value0));
              };
              if (v instanceof PureScript_CST_Types.ForeignData) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ForeignData.create(v.value0))(traverseLabeled(dictApplicative)(k.onType)(v.value1));
              };
              if (v instanceof PureScript_CST_Types.ForeignKind) {
                  return Control_Applicative.pure(dictApplicative)(v);
              };
              throw new Error("Failed pattern match at PureScript.CST.Traversal (line 216, column 21 - line 219, column 40): " + [ v.constructor.name ]);
          };
      };
  };
  var traverseDoStatement = function (dictApplicative) {
      return function (k) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.DoLet) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DoLet.create(v.value0))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseLetBinding(dictApplicative)(k))(v.value1));
              };
              if (v instanceof PureScript_CST_Types.DoDiscard) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DoDiscard.create)(k.onExpr(v.value0));
              };
              if (v instanceof PureScript_CST_Types.DoBind) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DoBind.create)(k.onBinder(v.value0)))(v.value1))(k.onExpr(v.value2));
              };
              if (v instanceof PureScript_CST_Types.DoError) {
                  return Control_Applicative.pure(dictApplicative)(new PureScript_CST_Types.DoError(v.value0));
              };
              throw new Error("Failed pattern match at PureScript.CST.Traversal (line 520, column 25 - line 524, column 32): " + [ v.constructor.name ]);
          };
      };
  };
  var traverseDoBlock = function (dictApplicative) {
      return function (k) {
          return function (d) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                  return {
                      statements: v,
                      keyword: d.keyword
                  };
              })(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseDoStatement(dictApplicative)(k))(d.statements));
          };
      };
  };
  var traverseDelimitedNonEmpty = function (dictApplicative) {
      return function (k) {
          return traverseWrapped(dictApplicative)(traverseSeparated(dictApplicative)(k));
      };
  };
  var traverseOneOrDelimited = function (dictApplicative) {
      return function (k) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.One) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.One.create)(k(v.value0));
              };
              if (v instanceof PureScript_CST_Types.Many) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.Many.create)(traverseDelimitedNonEmpty(dictApplicative)(k)(v.value0));
              };
              throw new Error("Failed pattern match at PureScript.CST.Traversal (line 265, column 28 - line 267, column 55): " + [ v.constructor.name ]);
          };
      };
  };
  var traverseInstanceHead = function (dictApplicative) {
      return function (k) {
          return function (head) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                  return function (v1) {
                      return {
                          constraints: v,
                          types: v1,
                          className: head.className,
                          keyword: head.keyword,
                          name: head.name,
                          separator: head.separator
                      };
                  };
              })(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Bitraversable.ltraverse(Data_Bitraversable.bitraversableTuple)(dictApplicative)(traverseOneOrDelimited(dictApplicative)(k.onType)))(head.constraints)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(k.onType)(head.types));
          };
      };
  };
  var traverseInstance = function (dictApplicative) {
      return function (k) {
          return function (v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (head) {
                  return function (body) {
                      return {
                          head: head,
                          body: body
                      };
                  };
              })(traverseInstanceHead(dictApplicative)(k)(v.head)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseInstanceBinding(dictApplicative)(k))))(v.body));
          };
      };
  };
  var traverseDelimited = function (dictApplicative) {
      return function (k) {
          return traverseWrapped(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(traverseSeparated(dictApplicative)(k)));
      };
  };
  var traverseDataHead = function (dictApplicative) {
      return function (k) {
          return function (head) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                  return {
                      vars: v,
                      keyword: head.keyword,
                      name: head.name
                  };
              })(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(traverseTypeVarBinding(dictApplicative)(k))(head.vars));
          };
      };
  };
  var traverseDataCtor = function (dictApplicative) {
      return function (k) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (fields) {
                  return {
                      name: v.name,
                      fields: fields
                  };
              })(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(k.onType)(v.fields));
          };
      };
  };
  var traverseClassHead = function (dictApplicative) {
      return function (k) {
          return function (head) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                  return function (v1) {
                      return {
                          "super": v,
                          vars: v1,
                          fundeps: head.fundeps,
                          keyword: head.keyword,
                          name: head.name
                      };
                  };
              })(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Bitraversable.ltraverse(Data_Bitraversable.bitraversableTuple)(dictApplicative)(traverseOneOrDelimited(dictApplicative)(k.onType)))(head["super"])))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(traverseTypeVarBinding(dictApplicative)(k))(head.vars));
          };
      };
  };
  var traverseDecl = function (dictApplicative) {
      return function (k) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.DeclData) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclData.create)(traverseDataHead(dictApplicative)(k)(v.value0)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(traverseSeparated(dictApplicative)(traverseDataCtor(dictApplicative)(k))))(v.value1));
              };
              if (v instanceof PureScript_CST_Types.DeclType) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclType.create)(traverseDataHead(dictApplicative)(k)(v.value0)))(v.value1))(k.onType(v.value2));
              };
              if (v instanceof PureScript_CST_Types.DeclNewtype) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclNewtype.create)(traverseDataHead(dictApplicative)(k)(v.value0)))(v.value1))(v.value2))(k.onType(v.value3));
              };
              if (v instanceof PureScript_CST_Types.DeclClass) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclClass.create)(traverseClassHead(dictApplicative)(k)(v.value0)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseLabeled(dictApplicative)(k.onType))))(v.value1));
              };
              if (v instanceof PureScript_CST_Types.DeclInstanceChain) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclInstanceChain.create)(traverseSeparated(dictApplicative)(traverseInstance(dictApplicative)(k))(v.value0));
              };
              if (v instanceof PureScript_CST_Types.DeclDerive) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclDerive.create(v.value0)(v.value1))(traverseInstanceHead(dictApplicative)(k)(v.value2));
              };
              if (v instanceof PureScript_CST_Types.DeclKindSignature) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclKindSignature.create(v.value0))(traverseLabeled(dictApplicative)(k.onType)(v.value1));
              };
              if (v instanceof PureScript_CST_Types.DeclSignature) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclSignature.create)(traverseLabeled(dictApplicative)(k.onType)(v.value0));
              };
              if (v instanceof PureScript_CST_Types.DeclValue) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclValue.create)(traverseValueBindingFields(dictApplicative)(k)(v.value0));
              };
              if (v instanceof PureScript_CST_Types.DeclForeign) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclForeign.create(v.value0)(v.value1))(traverseForeign(dictApplicative)(k)(v.value2));
              };
              return Control_Applicative.pure(dictApplicative)(v);
          };
      };
  };
  var traverseCaseOf = function (dictApplicative) {
      return function (k) {
          return function (r) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                  return function (v1) {
                      return {
                          head: v,
                          branches: v1,
                          keyword: r.keyword,
                          of: r.of
                      };
                  };
              })(traverseSeparated(dictApplicative)(k.onExpr)(r.head)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple)(dictApplicative)(traverseSeparated(dictApplicative)(k.onBinder))(traverseGuarded(dictApplicative)(k)))(r.branches));
          };
      };
  };
  var traverseBinder = function (dictApplicative) {
      return function (k) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.BinderNamed) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.BinderNamed.create(v.value0)(v.value1))(k.onBinder(v.value2));
              };
              if (v instanceof PureScript_CST_Types.BinderConstructor) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.BinderConstructor.create(v.value0))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(k.onBinder)(v.value1));
              };
              if (v instanceof PureScript_CST_Types.BinderArray) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.BinderArray.create)(traverseDelimited(dictApplicative)(k.onBinder)(v.value0));
              };
              if (v instanceof PureScript_CST_Types.BinderRecord) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.BinderRecord.create)(traverseDelimited(dictApplicative)(traverseRecordLabeled(dictApplicative)(k.onBinder))(v.value0));
              };
              if (v instanceof PureScript_CST_Types.BinderParens) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.BinderParens.create)(traverseWrapped(dictApplicative)(k.onBinder)(v.value0));
              };
              if (v instanceof PureScript_CST_Types.BinderTyped) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.BinderTyped.create)(k.onBinder(v.value0)))(v.value1))(k.onType(v.value2));
              };
              if (v instanceof PureScript_CST_Types.BinderOp) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.BinderOp.create)(k.onBinder(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(k.onBinder))(v.value1));
              };
              return Control_Applicative.pure(dictApplicative)(v);
          };
      };
  };
  var traverseAdoBlock = function (dictApplicative) {
      return function (k) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                  return function (v1) {
                      return {
                          statements: v,
                          result: v1,
                          "in": a["in"],
                          keyword: a.keyword
                      };
                  };
              })(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(traverseDoStatement(dictApplicative)(k))(a.statements)))(k.onExpr(a.result));
          };
      };
  };
  var traverseExpr = function (dictApplicative) {
      return function (k) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.ExprArray) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprArray.create)(traverseDelimited(dictApplicative)(k.onExpr)(v.value0));
              };
              if (v instanceof PureScript_CST_Types.ExprRecord) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprRecord.create)(traverseDelimited(dictApplicative)(traverseRecordLabeled(dictApplicative)(k.onExpr))(v.value0));
              };
              if (v instanceof PureScript_CST_Types.ExprParens) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprParens.create)(traverseWrapped(dictApplicative)(k.onExpr)(v.value0));
              };
              if (v instanceof PureScript_CST_Types.ExprTyped) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprTyped.create)(k.onExpr(v.value0)))(v.value1))(k.onType(v.value2));
              };
              if (v instanceof PureScript_CST_Types.ExprInfix) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprInfix.create)(k.onExpr(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple)(dictApplicative)(traverseWrapped(dictApplicative)(k.onExpr))(k.onExpr))(v.value1));
              };
              if (v instanceof PureScript_CST_Types.ExprOp) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprOp.create)(k.onExpr(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(k.onExpr))(v.value1));
              };
              if (v instanceof PureScript_CST_Types.ExprNegate) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprNegate.create(v.value0))(k.onExpr(v.value1));
              };
              if (v instanceof PureScript_CST_Types.ExprRecordAccessor) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprRecordAccessor.create)(traverseRecordAccessor(dictApplicative)(k)(v.value0));
              };
              if (v instanceof PureScript_CST_Types.ExprRecordUpdate) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprRecordUpdate.create)(k.onExpr(v.value0)))(traverseWrapped(dictApplicative)(traverseSeparated(dictApplicative)(traverseRecordUpdate(dictApplicative)(k)))(v.value1));
              };
              if (v instanceof PureScript_CST_Types.ExprApp) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprApp.create)(k.onExpr(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(k.onExpr)(v.value1));
              };
              if (v instanceof PureScript_CST_Types.ExprLambda) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprLambda.create)(traverseLambda(dictApplicative)(k)(v.value0));
              };
              if (v instanceof PureScript_CST_Types.ExprIf) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprIf.create)(traverseIfThenElse(dictApplicative)(k)(v.value0));
              };
              if (v instanceof PureScript_CST_Types.ExprCase) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprCase.create)(traverseCaseOf(dictApplicative)(k)(v.value0));
              };
              if (v instanceof PureScript_CST_Types.ExprLet) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprLet.create)(traverseLetIn(dictApplicative)(k)(v.value0));
              };
              if (v instanceof PureScript_CST_Types.ExprDo) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprDo.create)(traverseDoBlock(dictApplicative)(k)(v.value0));
              };
              if (v instanceof PureScript_CST_Types.ExprAdo) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprAdo.create)(traverseAdoBlock(dictApplicative)(k)(v.value0));
              };
              return Control_Applicative.pure(dictApplicative)(v);
          };
      };
  }; 
  var defer = function (dictMonad) {
      return function (v) {
          return Control_Bind.bind(dictMonad.Bind1())(Control_Applicative.pure(dictMonad.Applicative0())(Data_Unit.unit))(v);
      };
  };
  var topDownMonoidalTraversal = function (dictMonoid) {
      return function (visitor) {
          var visitor$prime = {
              onBinder: function (a) {
                  return Control_Apply.apply(Data_Functor_Compose.applyCompose(Control_Monad_Free.freeApply)(Data_Const.applyConst(dictMonoid.Semigroup0())))(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onBinder(a)))(defer(Control_Monad_Free.freeMonad)(function (v) {
                      return Data_Newtype.un()(Data_Functor_Compose.Compose)(traverseBinder(Data_Functor_Compose.applicativeCompose(Control_Monad_Free.freeApplicative)(Data_Const.applicativeConst(dictMonoid)))(visitor$prime)(a));
                  }));
              },
              onExpr: function (a) {
                  return Control_Apply.apply(Data_Functor_Compose.applyCompose(Control_Monad_Free.freeApply)(Data_Const.applyConst(dictMonoid.Semigroup0())))(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onExpr(a)))(defer(Control_Monad_Free.freeMonad)(function (v) {
                      return Data_Newtype.un()(Data_Functor_Compose.Compose)(traverseExpr(Data_Functor_Compose.applicativeCompose(Control_Monad_Free.freeApplicative)(Data_Const.applicativeConst(dictMonoid)))(visitor$prime)(a));
                  }));
              },
              onDecl: function (a) {
                  return Control_Apply.apply(Data_Functor_Compose.applyCompose(Control_Monad_Free.freeApply)(Data_Const.applyConst(dictMonoid.Semigroup0())))(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onDecl(a)))(defer(Control_Monad_Free.freeMonad)(function (v) {
                      return Data_Newtype.un()(Data_Functor_Compose.Compose)(traverseDecl(Data_Functor_Compose.applicativeCompose(Control_Monad_Free.freeApplicative)(Data_Const.applicativeConst(dictMonoid)))(visitor$prime)(a));
                  }));
              },
              onType: function (a) {
                  return Control_Apply.apply(Data_Functor_Compose.applyCompose(Control_Monad_Free.freeApply)(Data_Const.applyConst(dictMonoid.Semigroup0())))(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onType(a)))(defer(Control_Monad_Free.freeMonad)(function (v) {
                      return Data_Newtype.un()(Data_Functor_Compose.Compose)(traverseType(Data_Functor_Compose.applicativeCompose(Control_Monad_Free.freeApplicative)(Data_Const.applicativeConst(dictMonoid)))(visitor$prime)(a));
                  }));
              }
          };
          return visitor$prime;
      };
  };
  var monoidalRewrite = function (dictMonoid) {
      return function (traversal) {
          return function (visitor) {
              return function (g) {
                  var visitor$prime = topDownMonoidalTraversal(dictMonoid)(visitor);
                  return Data_Newtype.un()(Data_Const.Const)(Control_Monad_Free.runFree(Data_Identity.functorIdentity)(Data_Newtype.un()(Data_Identity.Identity))(Data_Newtype.un()(Data_Functor_Compose.Compose)(traversal(visitor$prime)(g))));
              };
          };
      };
  };
  var foldMapModule = function (dictMonoid) {
      return monoidalRewrite(dictMonoid)(traverseModule(Data_Functor_Compose.applicativeCompose(Control_Monad_Free.freeApplicative)(Data_Const.applicativeConst(dictMonoid))));
  };
  var defaultMonoidalVisitor = function (dictMonoid) {
      return {
          onBinder: Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)),
          onDecl: Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)),
          onExpr: Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)),
          onType: Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid))
      };
  };
  exports["defaultMonoidalVisitor"] = defaultMonoidalVisitor;
  exports["foldMapModule"] = foldMapModule;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.CodeLens.ExportManagement"] = $PS["LanguageServer.IdePurescript.CodeLens.ExportManagement"] || {};
  var exports = $PS["LanguageServer.IdePurescript.CodeLens.ExportManagement"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Utils = $PS["Data.String.Utils"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];
  var Foreign_Object = $PS["Foreign.Object"];
  var LanguageServer_IdePurescript_Commands = $PS["LanguageServer.IdePurescript.Commands"];
  var LanguageServer_IdePurescript_Util_CST = $PS["LanguageServer.IdePurescript.Util.CST"];
  var LanguageServer_IdePurescript_Util_Position = $PS["LanguageServer.IdePurescript.Util.Position"];
  var LanguageServer_Protocol_DocumentStore = $PS["LanguageServer.Protocol.DocumentStore"];
  var LanguageServer_Protocol_TextDocument = $PS["LanguageServer.Protocol.TextDocument"];
  var PureScript_CST = $PS["PureScript.CST"];
  var PureScript_CST_Traversal = $PS["PureScript.CST.Traversal"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var SemigroupRange = function (x) {
      return x;
  };
  var withoutConstructors = function (s) {
      return Data_Maybe.fromMaybe(s)(Data_String_CodeUnits.stripSuffix("(..)")(s));
  };
  var withConstructors = function (s) {
      return s + "(..)";
  };
  var semigroupSemigroupRange = new Data_Semigroup.Semigroup(function (sr1) {
      return function (v) {
          return sr1;
      };
  });
  var printExports = function (v) {
      if (v.length === 0) {
          return " ";
      };
      return " (\x0a    " + (Data_Array.intercalate(Data_Monoid.monoidString)("\x0a  , ")(Data_Array.sort(Data_Ord.ordString)(v)) + "\x0a  )\x0a  where\x0a\x0a");
  };
  var printExport = function (v) {
      if (v instanceof PureScript_CST_Types.ExportOp) {
          return Data_Maybe.Just.create("(" + (v.value0.name + ")"));
      };
      if (v instanceof PureScript_CST_Types.ExportType && v.value1 instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Just.create(v.value0.name);
      };
      if (v instanceof PureScript_CST_Types.ExportType && v.value1 instanceof Data_Maybe.Just) {
          return Data_Maybe.Just.create(v.value0.name + "(..)");
      };
      if (v instanceof PureScript_CST_Types.ExportTypeOp) {
          return Data_Maybe.Just.create("type (" + (v.value1.name + ")"));
      };
      if (v instanceof PureScript_CST_Types.ExportClass) {
          return Data_Maybe.Just.create("class " + v.value1.name);
      };
      if (v instanceof PureScript_CST_Types.ExportKind) {
          return Data_Maybe.Just.create(v.value1.name);
      };
      if (v instanceof PureScript_CST_Types.ExportModule) {
          return Data_Maybe.Just.create("module " + v.value1.name);
      };
      if (v instanceof PureScript_CST_Types.ExportValue) {
          return Data_Maybe.Just.create(v.value0.name);
      };
      if (v instanceof PureScript_CST_Types.ExportError) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at LanguageServer.IdePurescript.CodeLens.ExportManagement (line 91, column 15 - line 100, column 31): " + [ v.constructor.name ]);
  }; 
  var getSemigroupRanges = PureScript_CST_Traversal.foldMapModule(Foreign_Object.monoidObject(semigroupSemigroupRange))({
      onBinder: (PureScript_CST_Traversal.defaultMonoidalVisitor(Foreign_Object.monoidObject(semigroupSemigroupRange))).onBinder,
      onDecl: function (v1) {
          if (v1 instanceof PureScript_CST_Types.DeclSignature) {
              return Foreign_Object.singleton(v1.value0.label.name)(LanguageServer_IdePurescript_Util_CST.sourceRangeToRange(v1.value0.label.token.range));
          };
          if (v1 instanceof PureScript_CST_Types.DeclValue) {
              return Foreign_Object.singleton(v1.value0.name.name)(LanguageServer_IdePurescript_Util_CST.sourceRangeToRange(v1.value0.name.token.range));
          };
          if (v1 instanceof PureScript_CST_Types.DeclData) {
              return Data_Semigroup.append(Foreign_Object.semigroupObject(semigroupSemigroupRange))(Foreign_Object.singleton(v1.value0.name.name)(LanguageServer_IdePurescript_Util_CST.sourceRangeToRange(v1.value0.name.token.range)))(Foreign_Object.singleton(v1.value0.name.name + "(..)")(LanguageServer_IdePurescript_Util_CST.sourceRangeToRange(v1.value0.name.token.range)));
          };
          if (v1 instanceof PureScript_CST_Types.DeclNewtype) {
              return Data_Semigroup.append(Foreign_Object.semigroupObject(semigroupSemigroupRange))(Foreign_Object.singleton(v1.value0.name.name)(LanguageServer_IdePurescript_Util_CST.sourceRangeToRange(v1.value0.name.token.range)))(Foreign_Object.singleton(v1.value0.name.name + "(..)")(LanguageServer_IdePurescript_Util_CST.sourceRangeToRange(v1.value0.name.token.range)));
          };
          if (v1 instanceof PureScript_CST_Types.DeclType) {
              return Foreign_Object.singleton(v1.value0.name.name)(LanguageServer_IdePurescript_Util_CST.sourceRangeToRange(v1.value0.name.token.range));
          };
          if (v1 instanceof PureScript_CST_Types.DeclClass) {
              return Foreign_Object.singleton("class " + v1.value0.name.name)(LanguageServer_IdePurescript_Util_CST.sourceRangeToRange(v1.value0.name.token.range));
          };
          if (v1 instanceof PureScript_CST_Types.DeclFixity && v1.value0.operator instanceof PureScript_CST_Types.FixityValue) {
              return Foreign_Object.singleton("(" + (v1.value0.operator.value2.name + ")"))(LanguageServer_IdePurescript_Util_CST.sourceRangeToRange(v1.value0.operator.value2.token.range));
          };
          if (v1 instanceof PureScript_CST_Types.DeclFixity && v1.value0.operator instanceof PureScript_CST_Types.FixityType) {
              return Foreign_Object.singleton("type (" + (v1.value0.operator.value3.name + ")"))(LanguageServer_IdePurescript_Util_CST.sourceRangeToRange(v1.value0.operator.value3.token.range));
          };
          if (v1 instanceof PureScript_CST_Types.DeclForeign && v1.value2 instanceof PureScript_CST_Types.ForeignValue) {
              return Foreign_Object.singleton(v1.value2.value0.label.name)(LanguageServer_IdePurescript_Util_CST.sourceRangeToRange(v1.value2.value0.label.token.range));
          };
          if (v1 instanceof PureScript_CST_Types.DeclForeign && v1.value2 instanceof PureScript_CST_Types.ForeignData) {
              return Foreign_Object.singleton(v1.value2.value1.label.name)(LanguageServer_IdePurescript_Util_CST.sourceRangeToRange(v1.value2.value1.label.token.range));
          };
          if (v1 instanceof PureScript_CST_Types.DeclForeign && v1.value2 instanceof PureScript_CST_Types.ForeignKind) {
              return Foreign_Object.singleton(v1.value2.value1.name)(LanguageServer_IdePurescript_Util_CST.sourceRangeToRange(v1.value2.value1.token.range));
          };
          if (v1 instanceof PureScript_CST_Types.DeclInstanceChain) {
              return Data_Monoid.mempty(Foreign_Object.monoidObject(semigroupSemigroupRange));
          };
          if (v1 instanceof PureScript_CST_Types.DeclDerive) {
              return Data_Monoid.mempty(Foreign_Object.monoidObject(semigroupSemigroupRange));
          };
          if (v1 instanceof PureScript_CST_Types.DeclKindSignature) {
              return Data_Monoid.mempty(Foreign_Object.monoidObject(semigroupSemigroupRange));
          };
          if (v1 instanceof PureScript_CST_Types.DeclRole) {
              return Data_Monoid.mempty(Foreign_Object.monoidObject(semigroupSemigroupRange));
          };
          if (v1 instanceof PureScript_CST_Types.DeclError) {
              return Data_Monoid.mempty(Foreign_Object.monoidObject(semigroupSemigroupRange));
          };
          throw new Error("Failed pattern match at LanguageServer.IdePurescript.CodeLens.ExportManagement (line 115, column 11 - line 136, column 38): " + [ v1.constructor.name ]);
      },
      onExpr: (PureScript_CST_Traversal.defaultMonoidalVisitor(Foreign_Object.monoidObject(semigroupSemigroupRange))).onExpr,
      onType: (PureScript_CST_Traversal.defaultMonoidalVisitor(Foreign_Object.monoidObject(semigroupSemigroupRange))).onType
  });
  var exportsToArray = function (v) {
      return Data_Array.cons(v.head)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(v.tail));
  };
  var mkCodeLenses = function (uri) {
      return function (parsedModule) {
          return function (moduleNameEnd) {
              return function (whereClauseStart) {
                  return function (exports) {
                      var mkCodeLensResult = function (codeLensRange) {
                          return function (replaceCommand) {
                              return {
                                  range: codeLensRange,
                                  command: Data_Nullable.notNull(replaceCommand),
                                  data: Foreign.unsafeToForeign(Data_Nullable["null"])
                              };
                          };
                      };
                      var start = LanguageServer_IdePurescript_Util_Position.shiftPositionRight(1)(LanguageServer_IdePurescript_Util_CST.sourcePosToPosition(moduleNameEnd));
                      var noExplicitExports = Data_Maybe.isNothing(exports);
                      var exportArray = (function () {
                          if (exports instanceof Data_Maybe.Nothing) {
                              return [  ];
                          };
                          if (exports instanceof Data_Maybe.Just) {
                              return exportsToArray(exports.value0.value);
                          };
                          throw new Error("Failed pattern match at LanguageServer.IdePurescript.CodeLens.ExportManagement (line 154, column 19 - line 156, column 88): " + [ exports.constructor.name ]);
                      })();
                      var exportNames = Data_Array.mapMaybe(printExport)(exportArray);
                      var end = LanguageServer_IdePurescript_Util_Position.shiftPositionRight(Data_String_CodeUnits.length("where"))(LanguageServer_IdePurescript_Util_CST.sourcePosToPosition(whereClauseStart));
                      var exportsRange = {
                          start: start,
                          end: end
                      };
                      var decls = Data_Functor.mapFlipped(Foreign_Object.functorObject)(getSemigroupRanges(parsedModule))(Data_Newtype.un()(SemigroupRange));
                      var declToCodeLens = function (name) {
                          return function (range) {
                              var replace = function (title) {
                                  return function (exps) {
                                      return Data_Array.singleton(mkCodeLensResult(range)(LanguageServer_IdePurescript_Commands.replaceSuggestion(title)(uri)(printExports(exps))(exportsRange)));
                                  };
                              };
                              var exportedWithConstructors = function (x) {
                                  return Data_Array.elem(Data_Eq.eqString)(withConstructors(x))(exportNames);
                              };
                              var exportedWithoutConstructors = function (x) {
                                  return Data_String_Utils.endsWith("(..)")(x) && Data_Array.elem(Data_Eq.eqString)(Data_String_CodeUnits.dropRight(4)(x) + "(..)")(exportNames);
                              };
                              if (noExplicitExports) {
                                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(replace("exported (export only " + (name + ")"))([ name ]))(replace("(export everything but " + (name + ")"))(Data_Array["delete"](Data_Eq.eqString)(name)(Foreign_Object.keys(decls))));
                              };
                              var $123 = exportedWithConstructors(name);
                              if ($123) {
                                  return replace("exported as " + (withConstructors(name) + " (export only type)"))(Data_Array.cons(name)(Data_Array["delete"](Data_Eq.eqString)(withConstructors(name))(exportNames)));
                              };
                              var $124 = exportedWithoutConstructors(name);
                              if ($124) {
                                  return replace("exported as " + (withoutConstructors(name) + " (export with constructors)"))(Data_Array.cons(name)(Data_Array["delete"](Data_Eq.eqString)(withoutConstructors(name))(exportNames)));
                              };
                              var $125 = Data_Array.elem(Data_Eq.eqString)(name)(exportNames);
                              if ($125) {
                                  return replace("exported (remove " + (name + " from exports)"))(Data_Array["delete"](Data_Eq.eqString)(name)(exportNames));
                              };
                              return replace("private (add " + (name + " to exports)"))(Data_Array.snoc(exportNames)(name));
                          };
                      };
                      var privatePublicCodeLenses = Data_Foldable.fold(Foreign_Object.foldableObject)(Data_Monoid.monoidArray)(Foreign_Object.mapWithKey(declToCodeLens)(decls));
                      return privatePublicCodeLenses;
                  };
              };
          };
      };
  };
  var addExportManagementCodeLenses = function (uri) {
      return function (v) {
          if (v instanceof PureScript_CST.ParseSucceeded) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(mkCodeLenses(uri)(v.value0)(v.value0.header.name.token.range.end)(v.value0.header.where.range.start)(v.value0.header.exports));
          };
          if (v instanceof PureScript_CST.ParseSucceededWithErrors) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(mkCodeLenses(uri)(v.value0)(v.value0.header.name.token.range.end)(v.value0.header.where.range.start)(v.value0.header.exports));
          };
          return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
      };
  };
  var exportManagementCodeLenses = function (parseResults) {
      return function (documentStore) {
          return function (v) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(documentStore)(v)))(Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("no such thing")))(Control_Applicative.pure(Effect_Aff.applicativeAff))))(function (doc) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getVersion(doc)))(function (currentVersion) {
                      var v1 = Foreign_Object.lookup(v)(parseResults);
                      if (v1 instanceof Data_Maybe.Just && v1.value0.version === currentVersion) {
                          return addExportManagementCodeLenses(v)(v1.value0.result);
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return Data_Monoid.mempty(Effect_Aff.monoidAff(Data_Monoid.monoidArray));
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Data_Monoid.mempty(Effect_Aff.monoidAff(Data_Monoid.monoidArray));
                      };
                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.CodeLens.ExportManagement (line 49, column 3 - line 53, column 22): " + [ v1.constructor.name ]);
                  });
              });
          };
      };
  };
  exports["exportManagementCodeLenses"] = exportManagementCodeLenses;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.CodeLens.TopLevelDeclarations"] = $PS["LanguageServer.IdePurescript.CodeLens.TopLevelDeclarations"] || {};
  var exports = $PS["LanguageServer.IdePurescript.CodeLens.TopLevelDeclarations"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Utils = $PS["Data.String.Utils"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Foreign = $PS["Foreign"];
  var Foreign_Object = $PS["Foreign.Object"];
  var LanguageServer_IdePurescript_Commands = $PS["LanguageServer.IdePurescript.Commands"];
  var LanguageServer_IdePurescript_Util_Position = $PS["LanguageServer.IdePurescript.Util.Position"];
  var LanguageServer_Protocol_Types = $PS["LanguageServer.Protocol.Types"];                
  var ensureSpaceAfterFirstLine = (function () {
      var prependSpaceIfNecessary = function (i) {
          return function (s) {
              var $1 = i === 0 || Data_String_Utils.startsWith(" ")(s);
              if ($1) {
                  return s;
              };
              return " " + s;
          };
      };
      var $9 = Data_String_Common.joinWith("\x0a");
      var $10 = Data_Array.mapWithIndex(prependSpaceIfNecessary);
      return function ($11) {
          return $9($10(Data_String_Utils.lines($11)));
      };
  })();
  var addTypeDefinitionCodeLenses = function (docUri) {
      var mkReplaceCommand = function (signature) {
          return function (range) {
              return {
                  command: LanguageServer_IdePurescript_Commands.cmdName(LanguageServer_IdePurescript_Commands.replaceSuggestionCmd),
                  title: signature,
                  "arguments": Data_Nullable.notNull([ Foreign.unsafeToForeign(docUri), Foreign.unsafeToForeign(ensureSpaceAfterFirstLine(signature)), Foreign.unsafeToForeign(range) ])
              };
          };
      };
      var mkCodeLensResult = function (rangePosition) {
          return function (signature) {
              var range = LanguageServer_IdePurescript_Util_Position.convertRangePosition(rangePosition);
              return {
                  range: range,
                  command: Data_Nullable.notNull(mkReplaceCommand(signature)(range)),
                  data: Foreign.unsafeToForeign(Data_Nullable["null"])
              };
          };
      };
      return Data_Array.mapMaybe(function (v) {
          if (v.errorCode === "MissingTypeDeclaration" && (v.suggestion instanceof Data_Maybe.Just && v.suggestion.value0.replaceRange instanceof Data_Maybe.Just)) {
              return new Data_Maybe.Just(mkCodeLensResult(v.suggestion.value0.replaceRange.value0)(v.suggestion.value0.replacement));
          };
          return Data_Maybe.Nothing.value;
      });
  };
  var topLevelDeclarationCodeLenses = function (diagnostics) {
      return function (uri) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)((function () {
              var fileDiagnostics = Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidArray)(Foreign_Object.lookup(Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)(uri))(diagnostics));
              var addTypeDefinitions = addTypeDefinitionCodeLenses(uri)(fileDiagnostics);
              return addTypeDefinitions;
          })());
      };
  };
  exports["topLevelDeclarationCodeLenses"] = topLevelDeclarationCodeLenses;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.CodeLenses"] = $PS["LanguageServer.IdePurescript.CodeLenses"] || {};
  var exports = $PS["LanguageServer.IdePurescript.CodeLenses"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var LanguageServer_IdePurescript_CodeLens_ExportManagement = $PS["LanguageServer.IdePurescript.CodeLens.ExportManagement"];
  var LanguageServer_IdePurescript_CodeLens_TopLevelDeclarations = $PS["LanguageServer.IdePurescript.CodeLens.TopLevelDeclarations"];
  var LanguageServer_Protocol_Console = $PS["LanguageServer.Protocol.Console"];                
  var getCodeLenses = function (stateRef) {
      return function (documentStore) {
          return function (v) {
              return function (v1) {
                  return function (v2) {
                      var run = Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(stateRef)))(function (v3) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_IdePurescript_CodeLens_TopLevelDeclarations.topLevelDeclarationCodeLenses(v3.diagnostics)(v2.textDocument.uri))(function (topLevelDeclarations) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Data_Monoid.guard(Effect_Aff.monoidAff(Data_Monoid.monoidArray))(v3.showExportManagementCodeLenses)(LanguageServer_IdePurescript_CodeLens_ExportManagement.exportManagementCodeLenses(v3.parseResults)(documentStore)(v2.textDocument.uri)))(function (exportManagement) {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(topLevelDeclarations)(exportManagement));
                              });
                          });
                      });
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(stateRef)))(function (v3) {
                          if (v3.runningRebuild instanceof Data_Maybe.Just) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(Effect_Aff.joinFiber(v3.runningRebuild.value0)))(function (result) {
                                  if (result instanceof Data_Either.Left && Effect_Exception.message(result.value0) === "Debounced build") {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
                                  };
                                  if (result instanceof Data_Either.Left) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(stateRef)))(function (v4) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(v4.connection)(function (c) {
                                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(c)(Effect_Exception.message(result.value0)));
                                          }))(function () {
                                              return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
                                          });
                                      });
                                  };
                                  if (result instanceof Data_Either.Right) {
                                      return run;
                                  };
                                  throw new Error("Failed pattern match at LanguageServer.IdePurescript.CodeLenses (line 26, column 7 - line 32, column 23): " + [ result.constructor.name ]);
                              });
                          };
                          if (v3.runningRebuild instanceof Data_Maybe.Nothing) {
                              return run;
                          };
                          throw new Error("Failed pattern match at LanguageServer.IdePurescript.CodeLenses (line 23, column 3 - line 33, column 19): " + [ v3.runningRebuild.constructor.name ]);
                      });
                  };
              };
          };
      };
  };
  exports["getCodeLenses"] = getCodeLenses;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.SuggestionRank"] = $PS["LanguageServer.IdePurescript.SuggestionRank"] || {};
  var exports = $PS["LanguageServer.IdePurescript.SuggestionRank"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Char = $PS["Data.Char"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];                
  var SuggestionRank = function (x) {
      return x;
  };
  var toString = function (v) {
      return Data_String_CodePoints.singleton(Data_String_CodePoints.codePointFromChar(Data_Maybe.fromMaybe(" ")(Data_Char.fromCharCode(65 + v | 0))));
  };
  var semigroupSuggestionRank = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return Data_Ord.min(Data_Ord.ordInt)(v)(v1);
      };
  });
  var fromInt = (function () {
      var $28 = Data_Ord.clamp(Data_Ord.ordInt)(0)(25);
      return function ($29) {
          return SuggestionRank($28($29));
      };
  })();
  var eqSuggestionRank = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordSuggestionRank = new Data_Ord.Ord(function () {
      return eqSuggestionRank;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.invert(Data_Ord.compare(Data_Ord.ordInt)(v)(v1));
      };
  });
  var boundedSuggestionRank = new Data_Bounded.Bounded(function () {
      return ordSuggestionRank;
  }, 25, 0);
  var monoidSuggestionRank = new Data_Monoid.Monoid(function () {
      return semigroupSuggestionRank;
  }, Data_Bounded.bottom(boundedSuggestionRank));
  var cmapRanking = function (k) {
      return function (r) {
          var $31 = Data_Maybe.maybe(Data_Monoid.mempty(monoidSuggestionRank))(Data_Newtype.unwrap()(r));
          return function ($32) {
              return $31(k($32));
          };
      };
  };
  var semigroupRanking = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (a) {
              var rank = v(a);
              var $27 = Data_Eq.eq(eqSuggestionRank)(rank)(Data_Bounded.top(boundedSuggestionRank));
              if ($27) {
                  return rank;
              };
              return Data_Semigroup.append(semigroupSuggestionRank)(rank)(v1(a));
          };
      };
  });
  exports["fromInt"] = fromInt;
  exports["toString"] = toString;
  exports["cmapRanking"] = cmapRanking;
  exports["boundedSuggestionRank"] = boundedSuggestionRank;
  exports["monoidSuggestionRank"] = monoidSuggestionRank;
  exports["semigroupRanking"] = semigroupRanking;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.Completion"] = $PS["LanguageServer.IdePurescript.Completion"] || {};
  var exports = $PS["LanguageServer.IdePurescript.Completion"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Utils = $PS["Data.String.Utils"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var IdePurescript_Completion = $PS["IdePurescript.Completion"];
  var IdePurescript_Modules = $PS["IdePurescript.Modules"];
  var IdePurescript_PscIde = $PS["IdePurescript.PscIde"];
  var LanguageServer_IdePurescript_Commands = $PS["LanguageServer.IdePurescript.Commands"];
  var LanguageServer_IdePurescript_Config = $PS["LanguageServer.IdePurescript.Config"];
  var LanguageServer_IdePurescript_Imports = $PS["LanguageServer.IdePurescript.Imports"];
  var LanguageServer_IdePurescript_SuggestionRank = $PS["LanguageServer.IdePurescript.SuggestionRank"];
  var LanguageServer_Protocol_DocumentStore = $PS["LanguageServer.Protocol.DocumentStore"];
  var LanguageServer_Protocol_TextDocument = $PS["LanguageServer.Protocol.TextDocument"];
  var LanguageServer_Protocol_Types = $PS["LanguageServer.Protocol.Types"];                
  var rankSub = function (v) {
      var v1 = Data_String_CodePoints.indexOf(v.sub)(v.str);
      if (v1 instanceof Data_Maybe.Just) {
          return LanguageServer_IdePurescript_SuggestionRank.fromInt((1 + v1.value0 | 0) * ((1 + Data_String_CodePoints.length(v.sub) | 0) - (Data_String_CodePoints.length(v.str) + v1.value0 | 0) | 0) | 0);
      };
      if (v1 instanceof Data_Maybe.Nothing) {
          return Data_Bounded.bottom(LanguageServer_IdePurescript_SuggestionRank.boundedSuggestionRank);
      };
      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Completion (line 160, column 5 - line 162, column 26): " + [ v1.constructor.name ]);
  };
  var rankSegmentPrefix = function (v) {
      var v1 = Data_String_CodePoints.indexOf(v.prefix)(v.segment);
      if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
          return LanguageServer_IdePurescript_SuggestionRank.fromInt(((1 + v.ix | 0) * (1 + (Data_String_CodePoints.length(v.segment) - Data_String_CodePoints.length(v.prefix) | 0) | 0) | 0) + (v.len - v.ix | 0) | 0);
      };
      return Data_Bounded.bottom(LanguageServer_IdePurescript_SuggestionRank.boundedSuggestionRank);
  };
  var rankQualifiedWithType = function (opts) {
      var v = IdePurescript_Modules.getModuleFromUnknownQualifier(opts.qualifier)(opts.state);
      if (v instanceof Data_Maybe.Just && IdePurescript_Modules.getModuleName(v.value0) === opts.mod) {
          return Data_Bounded.top(LanguageServer_IdePurescript_SuggestionRank.boundedSuggestionRank);
      };
      return Data_Bounded.bottom(LanguageServer_IdePurescript_SuggestionRank.boundedSuggestionRank);
  };
  var rankQualifiedWithSegment = function (opts) {
      var segments = Data_String_Common.split(".")(opts.mod);
      return Data_FoldableWithIndex.foldMapWithIndex(Data_FoldableWithIndex.foldableWithIndexArray)(LanguageServer_IdePurescript_SuggestionRank.monoidSuggestionRank)(function (ix) {
          return function (segment) {
              return Data_Newtype.unwrap()(rankSegmentPrefix)({
                  len: Data_Array.length(segments),
                  ix: ix,
                  segment: segment,
                  prefix: opts.qualifier
              });
          };
      })(segments);
  };
  var rankQualifiedWithConcat = Data_Function.flip(LanguageServer_IdePurescript_SuggestionRank.cmapRanking)(rankSub)(function (opts) {
      return new Data_Maybe.Just({
          sub: opts.qualifier,
          str: Data_String_Common.replaceAll(".")("")(opts.mod)
      });
  });
  var rankModuleAbv = Data_Function.flip(LanguageServer_IdePurescript_SuggestionRank.cmapRanking)(rankSub)(function (v) {
      var modAbv = Data_String_Common.joinWith("")(Data_Array.filter(function (ch) {
          return Data_String_Common.toUpper(ch) === ch;
      })(Data_String_Utils.toCharArray(Data_String_Common.replaceAll(".")("")(v.mod))));
      return new Data_Maybe.Just({
          sub: v.abv,
          str: modAbv
      });
  });
  var rankQualifiedWithAbv = Data_Function.flip(LanguageServer_IdePurescript_SuggestionRank.cmapRanking)(rankModuleAbv)(function (opts) {
      var $34 = Data_String_Common.toUpper(opts.qualifier) === opts.qualifier;
      if ($34) {
          return new Data_Maybe.Just({
              abv: opts.qualifier,
              mod: opts.mod
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var rankUnknownQualified = Data_Semigroup.append(LanguageServer_IdePurescript_SuggestionRank.semigroupRanking)(rankQualifiedWithType)(Data_Semigroup.append(LanguageServer_IdePurescript_SuggestionRank.semigroupRanking)(rankQualifiedWithSegment)(Data_Semigroup.append(LanguageServer_IdePurescript_SuggestionRank.semigroupRanking)(rankQualifiedWithAbv)(rankQualifiedWithConcat)));
  var rankSuggestion = Data_Function.flip(LanguageServer_IdePurescript_SuggestionRank.cmapRanking)(rankUnknownQualified)(function (v) {
      if (v.suggestion instanceof IdePurescript_Completion.IdentSuggestion && (v.suggestion.value0.qualifier instanceof Data_Maybe.Just && Data_Array["null"](IdePurescript_Modules.getQualModule(v.suggestion.value0.qualifier.value0)(v.state)))) {
          return new Data_Maybe.Just({
              state: v.state,
              qualifier: v.suggestion.value0.qualifier.value0,
              mod: v.suggestion.value0.exportMod
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var getCompletions = function (docs) {
      return function (settings) {
          return function (state) {
              return function (v) {
                  var result = function (arr) {
                      return {
                          items: arr,
                          isIncomplete: Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(LanguageServer_IdePurescript_Config.autocompleteLimit(settings))(new Data_Maybe.Just(Data_Array.length(arr)))
                      };
                  };
                  var mkRange = function (pos) {
                      return {
                          start: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function (v1) {
                              return {
                                  character: 0,
                                  line: v1.line
                              };
                          })(pos),
                          end: pos
                      };
                  };
                  var edit = function (newText) {
                      return function (prefix) {
                          return {
                              range: {
                                  start: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function (pos) {
                                      return {
                                          character: pos.character - Data_String_CodePoints.length(prefix) | 0,
                                          line: pos.line
                                      };
                                  })(v.position),
                                  end: v.position
                              },
                              newText: newText
                          };
                      };
                  };
                  var convertSuggest = function (v1) {
                      if (v1 instanceof IdePurescript_Completion.Module) {
                          return LanguageServer_Protocol_Types.Module.value;
                      };
                      if (v1 instanceof IdePurescript_Completion.Value) {
                          return LanguageServer_Protocol_Types.Value.value;
                      };
                      if (v1 instanceof IdePurescript_Completion["Function"]) {
                          return LanguageServer_Protocol_Types["Function"].value;
                      };
                      if (v1 instanceof IdePurescript_Completion.Type) {
                          return LanguageServer_Protocol_Types.Class.value;
                      };
                      if (v1 instanceof IdePurescript_Completion.DCtor) {
                          return LanguageServer_Protocol_Types.Enum.value;
                      };
                      if (v1 instanceof IdePurescript_Completion.Kind) {
                          return LanguageServer_Protocol_Types.Interface.value;
                      };
                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Completion (line 70, column 22 - line 76, column 27): " + [ v1.constructor.name ]);
                  };
                  var convert = function (v1) {
                      return function (v2) {
                          if (v2 instanceof IdePurescript_Completion.QualifierSuggestion) {
                              return LanguageServer_Protocol_Types.completionItem(v2.value0.text)(LanguageServer_Protocol_Types.Module.value);
                          };
                          if (v2 instanceof IdePurescript_Completion.ModuleSuggestion) {
                              return Data_Newtype.over()()(LanguageServer_Protocol_Types.CompletionItem)(function (v3) {
                                  return {
                                      textEdit: Data_Nullable.toNullable(Data_Maybe.Just.create(edit(v2.value0.text)(v2.value0.prefix))),
                                      additionalTextEdits: v3.additionalTextEdits,
                                      command: v3.command,
                                      detail: v3.detail,
                                      documentation: v3.documentation,
                                      filterText: v3.filterText,
                                      insertText: v3.insertText,
                                      kind: v3.kind,
                                      label: v3.label,
                                      sortText: v3.sortText
                                  };
                              })(LanguageServer_Protocol_Types.completionItem(v2.value0.text)(convertSuggest(v2.value0.suggestType)));
                          };
                          if (v2 instanceof IdePurescript_Completion.IdentSuggestion) {
                              var rankText = LanguageServer_IdePurescript_SuggestionRank.toString(Data_Newtype.unwrap()(rankSuggestion)({
                                  state: (Data_Newtype.unwrap()(state)).modules,
                                  suggestion: v2
                              }));
                              var exportText = "\x0a*From: " + ((function () {
                                  var $55 = v2.value0.exportMod === v2.value0.origMod;
                                  if ($55) {
                                      return v2.value0.origMod;
                                  };
                                  return v2.value0.exportMod + (" (re-exported from " + (v2.value0.origMod + ")"));
                              })() + "*");
                              return Data_Newtype.over()()(LanguageServer_Protocol_Types.CompletionItem)(function (v3) {
                                  return {
                                      detail: Data_Nullable.toNullable(new Data_Maybe.Just(v2.value0.valueType)),
                                      documentation: Data_Nullable.toNullable(Data_Maybe.Just.create(LanguageServer_Protocol_Types.markupContent(Data_Maybe.fromMaybe("")(v2.value0.documentation) + exportText))),
                                      command: Data_Nullable.toNullable(Data_Maybe.Just.create(LanguageServer_IdePurescript_Commands.addCompletionImport(v2.value0.identifier)(new Data_Maybe.Just(v2.value0.exportMod))(v2.value0.qualifier)(v1)(Data_Maybe.maybe("")(LanguageServer_IdePurescript_Imports.showNS)(v2.value0.namespace)))),
                                      textEdit: Data_Nullable.toNullable(Data_Maybe.Just.create(edit(v2.value0.identifier)(v2.value0.prefix))),
                                      sortText: Data_Nullable.toNullable(Data_Maybe.Just.create(rankText + ("." + v2.value0.identifier))),
                                      label: v2.value0.identifier + ("\x09\x09" + (Data_Array.intercalate(Data_Monoid.monoidString)(".")(v2.value0.exportedFrom) + "")),
                                      additionalTextEdits: v3.additionalTextEdits,
                                      filterText: v3.filterText,
                                      insertText: v3.insertText,
                                      kind: v3.kind
                                  };
                              })(LanguageServer_Protocol_Types.completionItem(v2.value0.identifier)(convertSuggest(v2.value0.suggestType)));
                          };
                          throw new Error("Failed pattern match at LanguageServer.IdePurescript.Completion (line 86, column 5 - line 87, column 38): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                  };
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)(v.textDocument.uri)))(function (maybeDoc) {
                      if (maybeDoc instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(result([  ]));
                      };
                      if (maybeDoc instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtRange(maybeDoc.value0)(mkRange(v.position))))(function (line) {
                              var autoCompleteAllModules = LanguageServer_IdePurescript_Config.autoCompleteAllModules(settings);
                              var v1 = Data_Newtype.unwrap()(state);
                              var getQualifiedModule = Data_Function.flip(IdePurescript_Modules.getQualModule)(v1.modules);
                              if (v1.pscIdePort instanceof Data_Maybe.Just) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)((function () {
                                      if (autoCompleteAllModules) {
                                          return IdePurescript_PscIde.getLoadedModules(v1.pscIdePort.value0);
                                      };
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(IdePurescript_Modules.getUnqualActiveModules(v1.modules)(Data_Maybe.Nothing.value));
                                  })())(function (usedModules) {
                                      var qualifiers = Data_Array.mapMaybe(function (v2) {
                                          return v2.qualifier;
                                      })(v1.modules.modules);
                                      return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Completion.getSuggestions(v1.pscIdePort.value0)({
                                          line: line,
                                          moduleInfo: {
                                              modules: usedModules,
                                              getQualifiedModule: getQualifiedModule,
                                              mainModule: v1.modules.main,
                                              importedModules: IdePurescript_Modules.getAllActiveModules(v1.modules)
                                          },
                                          qualifiers: qualifiers,
                                          maxResults: LanguageServer_IdePurescript_Config.autocompleteLimit(settings),
                                          groupCompletions: LanguageServer_IdePurescript_Config.autocompleteGrouped(settings),
                                          preferredModules: LanguageServer_IdePurescript_Config.importsPreferredModules(settings)
                                      }))(function (suggestions) {
                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(result(Data_Functor.map(Data_Functor.functorArray)(convert(v.textDocument.uri))(suggestions)));
                                      });
                                  });
                              };
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(result([  ]));
                          });
                      };
                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Completion (line 35, column 5 - line 58, column 34): " + [ maybeDoc.constructor.name ]);
                  });
              };
          };
      };
  };
  exports["getCompletions"] = getCompletions;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.FoldingRanges"] = $PS["LanguageServer.IdePurescript.FoldingRanges"] || {};
  var exports = $PS["LanguageServer.IdePurescript.FoldingRanges"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Regex_Unsafe = $PS["Data.String.Regex.Unsafe"];
  var Data_String_Utils = $PS["Data.String.Utils"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var LanguageServer_Protocol_DocumentStore = $PS["LanguageServer.Protocol.DocumentStore"];
  var LanguageServer_Protocol_TextDocument = $PS["LanguageServer.Protocol.TextDocument"];                
  var newlineRegex = Data_String_Regex_Unsafe.unsafeRegex("[\x0a\x0d]")(Data_String_Regex_Flags.noFlags);
  var getImportsSection = function (text) {
      var lines = Data_String_Regex.split(newlineRegex)(text);
      var isImportLine = Data_String_Utils.startsWith("import ");
      return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return function (v1) {
              return {
                  startLine: v,
                  endLine: v1,
                  startCharacter: Data_Nullable.notNull(0),
                  endCharacter: Data_Nullable.notNull(Data_String_CodeUnits.length("import ") - 1 | 0),
                  kind: Data_Nullable.notNull("imports")
              };
          };
      })(Data_Array.findIndex(isImportLine)(lines)))(Data_Array.findLastIndex(isImportLine)(lines));
  };
  var getFoldingRanges = function (docs) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                      var maybeDoc = LanguageServer_Protocol_DocumentStore.getDocument(docs)(v2.textDocument.uri)();
                      if (maybeDoc instanceof Data_Maybe.Just) {
                          var text = LanguageServer_Protocol_TextDocument.getText(maybeDoc.value0)();
                          return Data_Array.fromFoldable(Data_Foldable.foldableMaybe)(getImportsSection(text));
                      };
                      if (maybeDoc instanceof Data_Maybe.Nothing) {
                          return Data_Monoid.mempty(Effect.monoidEffect(Data_Monoid.monoidArray))();
                      };
                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.FoldingRanges (line 26, column 5 - line 31, column 24): " + [ maybeDoc.constructor.name ]);
                  });
              };
          };
      };
  };
  exports["getFoldingRanges"] = getFoldingRanges;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.Formatting"] = $PS["LanguageServer.IdePurescript.Formatting"] || {};
  var exports = $PS["LanguageServer.IdePurescript.Formatting"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Utils = $PS["Data.String.Utils"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var IdePurescript_Build = $PS["IdePurescript.Build"];
  var IdePurescript_PscIdeServer = $PS["IdePurescript.PscIdeServer"];
  var LanguageServer_IdePurescript_Config = $PS["LanguageServer.IdePurescript.Config"];
  var LanguageServer_Protocol_DocumentStore = $PS["LanguageServer.Protocol.DocumentStore"];
  var LanguageServer_Protocol_TextDocument = $PS["LanguageServer.Protocol.TextDocument"];
  var Node_ChildProcess = $PS["Node.ChildProcess"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_Stream = $PS["Node.Stream"];                
  var mkTextEdit = function (oldText) {
      return function (text) {
          var range = {
              start: {
                  line: 0,
                  character: 0
              },
              end: {
                  line: Data_Foldable.length(Data_Foldable.foldableArray)(Data_Semiring.semiringInt)(Data_String_Utils.lines(oldText)) + 1 | 0,
                  character: 0
              }
          };
          return {
              range: range,
              newText: text
          };
      };
  };
  var formatWithPurty = function (logCb) {
      return function (settings) {
          return function (state) {
              return function (text) {
                  if (state.root instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Build.spawn({
                          command: new IdePurescript_Build.Command("purty", [ "format", "-" ]),
                          directory: state.root.value0,
                          useNpmDir: LanguageServer_IdePurescript_Config.addNpmPath(settings)
                      }))(function (v) {
                          return Effect_Aff.makeAff(function (cb) {
                              var succ = function ($25) {
                                  return cb(Data_Either.Right.create($25));
                              };
                              var err = function ($26) {
                                  return cb(Data_Either.Left.create($26));
                              };
                              return function __do() {
                                  (function () {
                                      if (v.cp instanceof Data_Maybe.Nothing) {
                                          return err(Effect_Exception.error("Didn't find purty in PATH"))();
                                      };
                                      if (v.cp instanceof Data_Maybe.Just) {
                                          Node_ChildProcess.onError(v.cp.value0)(function ($27) {
                                              return cb(Data_Either.Left.create(Node_ChildProcess.toStandardError($27)));
                                          })();
                                          var result = Effect_Ref["new"]("")();
                                          var res = function (s) {
                                              return Effect_Ref.modify_(function (v1) {
                                                  return v1 + s;
                                              })(result);
                                          };
                                          Effect_Exception.catchException(err)(Node_Stream.onDataString(Node_ChildProcess.stderr(v.cp.value0))(Node_Encoding.UTF8.value)(function ($28) {
                                              return err(Effect_Exception.error($28));
                                          }))();
                                          Effect_Exception.catchException(err)(Node_Stream.onDataString(Node_ChildProcess.stdout(v.cp.value0))(Node_Encoding.UTF8.value)(res))();
                                          Node_ChildProcess.onClose(v.cp.value0)(function (exit) {
                                              if (exit instanceof Node_ChildProcess.Normally && (exit.value0 === 0 || exit.value0 === 1)) {
                                                  return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(result))(succ);
                                              };
                                              return err(Effect_Exception.error("purty process exited abnormally"));
                                          })();
                                          Data_Functor["void"](Effect.functorEffect)(Node_Stream.writeString(Node_ChildProcess.stdin(v.cp.value0))(Node_Encoding.UTF8.value)(text)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))();
                                          return Node_Stream.end(Node_ChildProcess.stdin(v.cp.value0))(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))();
                                      };
                                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Formatting (line 48, column 9 - line 65, column 44): " + [ v.cp.constructor.name ]);
                                  })();
                                  return Data_Monoid.mempty(Effect_Aff.monoidCanceler);
                              };
                          });
                      });
                  };
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)("");
              };
          };
      };
  };
  var getFormattedDocument = function (logCb) {
      return function (docs) {
          return function (settings) {
              return function (serverState) {
                  return function (v) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)(v.textDocument.uri)))(function (maybeDoc) {
                          if (maybeDoc instanceof Data_Maybe.Nothing) {
                              return Data_Monoid.mempty(Effect_Aff.monoidAff(Data_Monoid.monoidArray));
                          };
                          if (maybeDoc instanceof Data_Maybe.Just) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getText(maybeDoc.value0)))(function (text) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(formatWithPurty(function (dictMonadEffect) {
                                      return logCb(dictMonadEffect);
                                  })(settings)(serverState)(text)))(function (newTextEither) {
                                      if (newTextEither instanceof Data_Either.Left) {
                                          return Data_Functor.voidLeft(Effect_Aff.functorAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logCb(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer["Error"].value)(Data_Show.show(Effect_Exception.showError)(newTextEither.value0))))([  ]);
                                      };
                                      if (newTextEither instanceof Data_Either.Right && newTextEither.value0 === "") {
                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
                                      };
                                      if (newTextEither instanceof Data_Either.Right) {
                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)([ mkTextEdit(text)(newTextEither.value0) ]);
                                      };
                                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Formatting (line 35, column 9 - line 38, column 60): " + [ newTextEither.constructor.name ]);
                                  });
                              });
                          };
                          throw new Error("Failed pattern match at LanguageServer.IdePurescript.Formatting (line 30, column 3 - line 38, column 60): " + [ maybeDoc.constructor.name ]);
                      });
                  };
              };
          };
      };
  };
  exports["getFormattedDocument"] = getFormattedDocument;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.References"] = $PS["LanguageServer.IdePurescript.References"] || {};
  var exports = $PS["LanguageServer.IdePurescript.References"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_String_Utils = $PS["Data.String.Utils"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var IdePurescript_Modules = $PS["IdePurescript.Modules"];
  var IdePurescript_PscIde = $PS["IdePurescript.PscIde"];
  var IdePurescript_Tokens = $PS["IdePurescript.Tokens"];
  var LanguageServer_IdePurescript_Types = $PS["LanguageServer.IdePurescript.Types"];
  var LanguageServer_IdePurescript_Util_Position = $PS["LanguageServer.IdePurescript.Util.Position"];
  var LanguageServer_Protocol_DocumentStore = $PS["LanguageServer.Protocol.DocumentStore"];
  var LanguageServer_Protocol_TextDocument = $PS["LanguageServer.Protocol.TextDocument"];
  var LanguageServer_Protocol_Types = $PS["LanguageServer.Protocol.Types"];
  var LanguageServer_Protocol_Uri = $PS["LanguageServer.Protocol.Uri"];
  var Node_Path = $PS["Node.Path"];
  var PscIde = $PS["PscIde"];
  var PscIde_Command = $PS["PscIde.Command"];                
  var getReferences = function (docs) {
      return function (v) {
          return function (state) {
              return function (v1) {
                  var mkRange = function (pos) {
                      return {
                          start: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function (v2) {
                              return {
                                  character: 0,
                                  line: v2.line
                              };
                          })(pos),
                          end: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function (c) {
                              return {
                                  character: c.character + 100 | 0,
                                  line: c.line
                              };
                          })(pos)
                      };
                  };
                  var convLocation = function (root) {
                      return function (v2) {
                          return function __do() {
                              var uri = Control_Bind.bindFlipped(Effect.bindEffect)(LanguageServer_Protocol_Uri.filenameToUri)(Node_Path.resolve([ root ])(v2.name))();
                              return {
                                  uri: uri,
                                  range: LanguageServer_IdePurescript_Util_Position.convertTypePosition(v2)
                              };
                          };
                      };
                  };
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)((function (v2) {
                      return v2.uri;
                  })(Data_Newtype.un()(LanguageServer_Protocol_Types.TextDocumentIdentifier)(v1.textDocument)))))(function (maybeDoc) {
                      if (maybeDoc instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
                      };
                      if (maybeDoc instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtRange(maybeDoc.value0)(mkRange(v1.position))))(function (text) {
                              var v2 = Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)(state);
                              var v3 = IdePurescript_Tokens.identifierAtPoint(text)((function (v4) {
                                  return v4.character;
                              })(Data_Newtype.un()(LanguageServer_Protocol_Types.Position)(v1.position)));
                              if (v2.pscIdePort instanceof Data_Maybe.Just && (v2.root instanceof Data_Maybe.Just && v3 instanceof Data_Maybe.Just)) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.getTypeInfo(v2.pscIdePort.value0)(v3.value0.word)(v2.modules.main)(v3.value0.qualifier)(IdePurescript_Modules.getUnqualActiveModules(v2.modules)(new Data_Maybe.Just(v3.value0.word)))(Data_Function.flip(IdePurescript_Modules.getQualModule)(v2.modules)))(function (info) {
                                      if (info instanceof Data_Maybe.Just) {
                                          var ns = (function () {
                                              if (info["value0"]["type'"] === "Type") {
                                                  return PscIde_Command.NSType.value;
                                              };
                                              if (Data_String_Utils.endsWith("-> Type")(info["value0"]["type'"])) {
                                                  return PscIde_Command.NSType.value;
                                              };
                                              return PscIde_Command.NSValue.value;
                                          })();
                                          return Control_Bind.bind(Effect_Aff.bindAff)(PscIde.usages(v2.pscIdePort.value0)(info["value0"]["module'"])(ns)(v3.value0.word))(function (usg) {
                                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Either.either(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Applicative.pure(Effect.applicativeEffect)([  ])))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(convLocation(v2.root.value0)))(usg));
                                          });
                                      };
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
                                  });
                              };
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
                          });
                      };
                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.References (line 32, column 5 - line 51, column 29): " + [ maybeDoc.constructor.name ]);
                  });
              };
          };
      };
  };
  exports["getReferences"] = getReferences;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.Search"] = $PS["LanguageServer.IdePurescript.Search"] || {};
  var exports = $PS["LanguageServer.IdePurescript.Search"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Foreign = $PS["Foreign"];
  var IdePurescript_Modules = $PS["IdePurescript.Modules"];
  var IdePurescript_PscIde = $PS["IdePurescript.PscIde"];
  var PscIde = $PS["PscIde"];
  var PscIde_Command = $PS["PscIde.Command"];
  var encodeSearchResult = Foreign.unsafeToForeign;
  var search = function (docs) {
      return function (config) {
          return function (state) {
              return function (args) {
                  var toResult = function (v) {
                      return encodeSearchResult({
                          typ: v["type'"],
                          identifier: v.identifier,
                          mod: v["module'"]
                      });
                  };
                  var v = Control_Monad_Except.runExcept(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign.readString(Data_Identity.monadIdentity))(args));
                  if (state.pscIdePort instanceof Data_Maybe.Just && (v instanceof Data_Either.Right && v.value0.length === 1)) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.getLoadedModules(state.pscIdePort.value0))(function (loadedModules) {
                          var getQualifiedModule = Data_Function.flip(IdePurescript_Modules.getQualModule)(state.modules);
                          return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde["getCompletion'"](Data_Maybe.Just.create(new PscIde_Command.Flex(v["value0"][0])))([  ])(state.pscIdePort.value0)(state.modules.main)(Data_Maybe.Nothing.value)(loadedModules)(getQualifiedModule)(PscIde.defaultCompletionOptions))(function (results) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Foreign.unsafeToForeign(Data_Functor.map(Data_Functor.functorArray)(toResult)(results)));
                          });
                      });
                  };
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Foreign.unsafeToForeign([  ]));
              };
          };
      };
  };
  exports["search"] = search;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.Symbols"] = $PS["LanguageServer.IdePurescript.Symbols"] || {};
  var exports = $PS["LanguageServer.IdePurescript.Symbols"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var IdePurescript_Modules = $PS["IdePurescript.Modules"];
  var IdePurescript_PscIde = $PS["IdePurescript.PscIde"];
  var IdePurescript_Tokens = $PS["IdePurescript.Tokens"];
  var LanguageServer_IdePurescript_Types = $PS["LanguageServer.IdePurescript.Types"];
  var LanguageServer_IdePurescript_Util_Position = $PS["LanguageServer.IdePurescript.Util.Position"];
  var LanguageServer_Protocol_DocumentStore = $PS["LanguageServer.Protocol.DocumentStore"];
  var LanguageServer_Protocol_TextDocument = $PS["LanguageServer.Protocol.TextDocument"];
  var LanguageServer_Protocol_Types = $PS["LanguageServer.Protocol.Types"];
  var LanguageServer_Protocol_Uri = $PS["LanguageServer.Protocol.Uri"];
  var Node_Path = $PS["Node.Path"];                
  var getSymbols = function (root) {
      return function (port) {
          return function (prefix) {
              return function (modules) {
                  var getName = function (v) {
                      return Node_Path.resolve([ root ])(v.name);
                  };
                  var getInfo = function (v) {
                      if (v.definedAt instanceof Data_Maybe.Just) {
                          return function __do() {
                              var fileName = getName(v.definedAt.value0)();
                              var kind = (function () {
                                  var $20 = Data_String_CodePoints.take(1)(v.identifier) === Data_String_Common.toUpper(Data_String_CodePoints.take(1)(v.identifier));
                                  if ($20) {
                                      return LanguageServer_Protocol_Types.ClassSymbolKind.value;
                                  };
                                  var $21 = Data_String_CodeUnits.contains("->")(v.identifier);
                                  if ($21) {
                                      return LanguageServer_Protocol_Types.FunctionSymbolKind.value;
                                  };
                                  return LanguageServer_Protocol_Types.PropertySymbolKind.value;
                              })();
                              var uri = LanguageServer_Protocol_Uri.filenameToUri(fileName)();
                              return Data_Maybe.Just.create({
                                  name: v.identifier,
                                  kind: LanguageServer_Protocol_Types.symbolKindToInt(kind),
                                  location: {
                                      uri: uri,
                                      range: LanguageServer_IdePurescript_Util_Position.convertTypePosition(v.definedAt.value0)
                                  },
                                  containerName: Data_Nullable.toNullable(Data_Maybe.Just.create(v["module'"]))
                              });
                          };
                      };
                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value);
                  };
                  var opts = {
                      maxResults: Data_Maybe.Nothing.value,
                      groupReexports: true
                  };
                  return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.getCompletion(port)(prefix)(Data_Maybe.Nothing.value)(Data_Maybe.Nothing.value)(modules)(Data_Function["const"]([  ]))(opts))(function (completions) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(getInfo)(completions)))(function (res) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Array.catMaybes(res));
                      });
                  });
              };
          };
      };
  };
  var getWorkspaceSymbols = function (v) {
      return function (state) {
          return function (v1) {
              if (state.pscIdePort instanceof Data_Maybe.Just && state.root instanceof Data_Maybe.Just) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.getLoadedModules(state.pscIdePort.value0))(function (allModules) {
                      return getSymbols(state.root.value0)(state.pscIdePort.value0)(v1.query)(allModules);
                  });
              };
              return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
          };
      };
  };
  var getDocumentSymbols = function (v) {
      return function (state) {
          return function (v1) {
              var v2 = Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)(state);
              if (v2.pscIdePort instanceof Data_Maybe.Just && v2.root instanceof Data_Maybe.Just) {
                  return getSymbols(v2.root.value0)(v2.pscIdePort.value0)("")(Data_Maybe.maybe([  ])(Data_Array.singleton)(v2.modules.main));
              };
              return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
          };
      };
  };
  var getDefinitionFromPscIde = function (pscIdePort) {
      return function (workspaceRoot) {
          return function (qualifier) {
              return function (modules) {
                  return function (word) {
                      var unqualifiedActiveModules = IdePurescript_Modules.getUnqualActiveModules(modules)(new Data_Maybe.Just(word));
                      var getQualifiedModule = Data_Function.flip(IdePurescript_Modules.getQualModule)(modules);
                      return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.getTypeInfo(pscIdePort)(word)(modules.main)(qualifier)(unqualifiedActiveModules)(getQualifiedModule))(function (info) {
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Data_Nullable.toNullable)((function () {
                              if (info instanceof Data_Maybe.Just && info.value0.definedAt instanceof Data_Maybe.Just) {
                                  return function __do() {
                                      var uri = Control_Bind.bindFlipped(Effect.bindEffect)(LanguageServer_Protocol_Uri.filenameToUri)(Node_Path.resolve([ workspaceRoot ])(info.value0.definedAt.value0.name))();
                                      var range = {
                                          start: LanguageServer_IdePurescript_Util_Position.convertPosition(info.value0.definedAt.value0.start),
                                          end: LanguageServer_IdePurescript_Util_Position.convertPosition(info.value0.definedAt.value0.start)
                                      };
                                      return Data_Maybe.Just.create({
                                          uri: uri,
                                          range: range
                                      });
                                  };
                              };
                              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value);
                          })()));
                      });
                  };
              };
          };
      };
  };
  var getDefinition = function (docs) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)((function (v3) {
                      return v3.uri;
                  })(Data_Newtype.un()(LanguageServer_Protocol_Types.TextDocumentIdentifier)(v2.textDocument)))))(function (maybeDoc) {
                      if (maybeDoc instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Nullable["null"]);
                      };
                      if (maybeDoc instanceof Data_Maybe.Just) {
                          var mkRange = function (pos) {
                              return {
                                  start: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function (v3) {
                                      return {
                                          character: 0,
                                          line: v3.line
                                      };
                                  })(pos),
                                  end: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function (c) {
                                      return {
                                          character: c.character + 100 | 0,
                                          line: c.line
                                      };
                                  })(pos)
                              };
                          };
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtRange(maybeDoc.value0)(mkRange(v2.position))))(function (text) {
                              var v3 = IdePurescript_Tokens.identifierAtPoint(text)((function (v4) {
                                  return v4.character;
                              })(Data_Newtype.un()(LanguageServer_Protocol_Types.Position)(v2.position)));
                              if (v1.pscIdePort instanceof Data_Maybe.Just && (v1.root instanceof Data_Maybe.Just && v3 instanceof Data_Maybe.Just)) {
                                  return getDefinitionFromPscIde(v1.pscIdePort.value0)(v1.root.value0)(v3.value0.qualifier)(v1.modules)(v3.value0.word);
                              };
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
                          });
                      };
                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Symbols (line 37, column 3 - line 50, column 12): " + [ maybeDoc.constructor.name ]);
                  });
              };
          };
      };
  };
  exports["getDefinition"] = getDefinition;
  exports["getDocumentSymbols"] = getDocumentSymbols;
  exports["getWorkspaceSymbols"] = getWorkspaceSymbols;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.Tooltips"] = $PS["LanguageServer.IdePurescript.Tooltips"] || {};
  var exports = $PS["LanguageServer.IdePurescript.Tooltips"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var IdePurescript_Modules = $PS["IdePurescript.Modules"];
  var IdePurescript_PscIde = $PS["IdePurescript.PscIde"];
  var IdePurescript_Tokens = $PS["IdePurescript.Tokens"];
  var LanguageServer_IdePurescript_Types = $PS["LanguageServer.IdePurescript.Types"];
  var LanguageServer_Protocol_DocumentStore = $PS["LanguageServer.Protocol.DocumentStore"];
  var LanguageServer_Protocol_TextDocument = $PS["LanguageServer.Protocol.TextDocument"];
  var LanguageServer_Protocol_Types = $PS["LanguageServer.Protocol.Types"];                
  var moduleBeforePart = "(?:^|[^A-Za-z_.])((?:[A-Z][A-Za-z0-9]*(?:\\.(?:[A-Z][A-Za-z0-9]*)?)*)?)";
  var moduleAfterPart = "([A-Za-z0-9]*(?:\\.[A-Za-z0-9]*)*)\\.";
  var afterPart = moduleAfterPart + (IdePurescript_Tokens.identPart + "(?:[^A-Za-z_'.]|$)");
  var moduleAtPoint = function (line) {
      return function (column) {
          var wordRange = function (left) {
              return function (right) {
                  return {
                      left: column - left | 0,
                      right: column + right | 0
                  };
              };
          };
          var textBefore = Data_String_CodePoints.take(column)(line);
          var textAfter = Data_String_CodePoints.drop(column)(line);
          var match$prime = function (r) {
              return function (t) {
                  return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(function (r$prime) {
                      return Data_String_Regex.match(r$prime)(t);
                  })(r);
              };
          };
          var beforeRegex = Data_String_Regex.regex(moduleBeforePart + "$")(Data_String_Regex_Flags.noFlags);
          var afterRegex = Data_String_Regex.regex("^" + afterPart)(Data_String_Regex_Flags.noFlags);
          var v = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array_NonEmpty.toArray)(match$prime(afterRegex)(textAfter));
          var v1 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array_NonEmpty.toArray)(match$prime(beforeRegex)(textBefore));
          if (v1 instanceof Data_Maybe.Just && (v1.value0.length === 2 && (v1["value0"][1] instanceof Data_Maybe.Just && (v instanceof Data_Maybe.Just && (v.value0.length === 3 && v["value0"][1] instanceof Data_Maybe.Just))))) {
              return new Data_Maybe.Just({
                  word: v1["value0"][1].value0 + v["value0"][1].value0,
                  range: wordRange(Data_String_CodePoints.length(v1["value0"][1].value0))(Data_String_CodePoints.length(v["value0"][1].value0))
              });
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var getTooltips = function (docs) {
      return function (v) {
          return function (state) {
              return function (v1) {
                  var wordRange = function (v2) {
                      return function (v3) {
                          return {
                              start: {
                                  line: v2.line,
                                  character: v3.left
                              },
                              end: {
                                  line: v2.line,
                                  character: v3.right
                              }
                          };
                      };
                  };
                  var lineRange = function (v2) {
                      return {
                          start: {
                              line: v2.line,
                              character: 0
                          },
                          end: {
                              line: v2.line,
                              character: v2.character + 100 | 0
                          }
                      };
                  };
                  var convertInfo = function (word) {
                      return function (v2) {
                          var showExpanded = Data_Maybe.isJust(v2.expandedType) && Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqString))(v2.expandedType)(new Data_Maybe.Just(v2["type'"]));
                          var expandedTypeStr = word + (" :: " + Data_Maybe.fromMaybe("")(v2.expandedType));
                          var compactTypeStr = word + (" :: " + v2["type'"]);
                          var typeStr = "```purescript\x0a" + (compactTypeStr + ((function () {
                              if (showExpanded) {
                                  return "\x0a" + expandedTypeStr;
                              };
                              return "";
                          })() + "\x0a```"));
                          return {
                              contents: LanguageServer_Protocol_Types.markupContent(typeStr + ("\x0a" + Data_Maybe.fromMaybe("")(v2.documentation))),
                              range: Data_Nullable.toNullable(Data_Maybe.Nothing.value)
                          };
                      };
                  };
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)((function (v2) {
                      return v2.uri;
                  })(Data_Newtype.un()(LanguageServer_Protocol_Types.TextDocumentIdentifier)(v1.textDocument)))))(function (maybeDoc) {
                      if (maybeDoc instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Nullable["null"]);
                      };
                      if (maybeDoc instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtRange(maybeDoc.value0)(lineRange(v1.position))))(function (text) {
                              var v2 = Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)(state);
                              var $$char = (function (v3) {
                                  return v3.character;
                              })(Data_Newtype.un()(LanguageServer_Protocol_Types.Position)(v1.position));
                              var v3 = moduleAtPoint(text)($$char);
                              var v4 = IdePurescript_Tokens.identifierAtPoint(text)($$char);
                              if (v2.pscIdePort instanceof Data_Maybe.Just && v3 instanceof Data_Maybe.Just) {
                                  var mod = IdePurescript_Modules.getQualModule(v3.value0.word)((Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)(state)).modules);
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Nullable.toNullable((function () {
                                      var v6 = Data_Array.uncons(mod);
                                      if (v6 instanceof Data_Maybe.Just) {
                                          return Data_Maybe.Just.create({
                                              contents: LanguageServer_Protocol_Types.markupContent(v6.value0.head),
                                              range: Data_Nullable.toNullable(Data_Maybe.Just.create(wordRange(v1.position)(v3.value0.range)))
                                          });
                                      };
                                      return Data_Maybe.Nothing.value;
                                  })()));
                              };
                              if (v2.pscIdePort instanceof Data_Maybe.Just && v4 instanceof Data_Maybe.Just) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.getTypeInfo(v2.pscIdePort.value0)(v4.value0.word)(v2.modules.main)(v4.value0.qualifier)(IdePurescript_Modules.getUnqualActiveModules(v2.modules)(new Data_Maybe.Just(v4.value0.word)))(Data_Function.flip(IdePurescript_Modules.getQualModule)(v2.modules)))(function (ty) {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Nullable.toNullable(Data_Functor.map(Data_Maybe.functorMaybe)(convertInfo(v4.value0.word))(ty)));
                                  });
                              };
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
                          });
                      };
                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Tooltips (line 54, column 3 - line 73, column 44): " + [ maybeDoc.constructor.name ]);
                  });
              };
          };
      };
  };
  exports["getTooltips"] = getTooltips;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.WatchedFiles"] = $PS["LanguageServer.IdePurescript.WatchedFiles"] || {};
  var exports = $PS["LanguageServer.IdePurescript.WatchedFiles"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];
  var IdePurescript_Tokens = $PS["IdePurescript.Tokens"];
  var LanguageServer_IdePurescript_Assist = $PS["LanguageServer.IdePurescript.Assist"];
  var LanguageServer_IdePurescript_Config = $PS["LanguageServer.IdePurescript.Config"];
  var LanguageServer_Protocol_Console = $PS["LanguageServer.Protocol.Console"];
  var LanguageServer_Protocol_DocumentStore = $PS["LanguageServer.Protocol.DocumentStore"];
  var LanguageServer_Protocol_Handlers = $PS["LanguageServer.Protocol.Handlers"];
  var LanguageServer_Protocol_Text = $PS["LanguageServer.Protocol.Text"];
  var LanguageServer_Protocol_TextDocument = $PS["LanguageServer.Protocol.TextDocument"];
  var LanguageServer_Protocol_Types = $PS["LanguageServer.Protocol.Types"];                
  var moduleNameFromFolderStructure = (function () {
      var $24 = Data_String_Common.joinWith(".");
      var $25 = Data_Array.takeWhile(IdePurescript_Tokens.startsWithCapitalLetter);
      var $26 = Data_String_Common.split("/");
      return function ($27) {
          return $24(Data_Array.reverse($25(Data_Array.reverse($26($27)))));
      };
  })();
  var inferModuleName = function (v) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
          return moduleNameFromFolderStructure(v1);
      })(Data_String_CodeUnits.stripSuffix(".purs")(v));
  };
  var insertModuleHeader = function (configRef) {
      return function (connection) {
          return function (stateRef) {
              return function (documents) {
                  return function (uri) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(stateRef)))(function (v) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(documents)(uri)))(function (maybeDoc) {
                              if (maybeDoc instanceof Data_Maybe.Nothing) {
                                  return Data_Monoid.mempty(Effect_Aff.monoidAff(Data_Monoid.monoidUnit));
                              };
                              if (maybeDoc instanceof Data_Maybe.Just) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getText(maybeDoc.value0)))(function (text) {
                                      return Control_Applicative.when(Effect_Aff.applicativeAff)(text === "")(Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(inferModuleName(uri))(function (inferredModuleName) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getVersion(maybeDoc.value0)))(function (version) {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(configRef)))(function (config) {
                                                  var preludeModule = LanguageServer_IdePurescript_Config.preludeModule(config);
                                                  var toInsert = "module " + (inferredModuleName + (" where\x0a\x0aimport " + (preludeModule + "\x0a")));
                                                  var edit = LanguageServer_Protocol_Text.makeWorkspaceEdit(v.clientCapabilities)(uri)(version)(LanguageServer_IdePurescript_Assist["lineRange'"](0)(Data_String_CodePoints.length(toInsert)))(toInsert);
                                                  return LanguageServer_Protocol_Handlers.applyEdit(connection)(edit);
                                              });
                                          });
                                      }));
                                  });
                              };
                              throw new Error("Failed pattern match at LanguageServer.IdePurescript.WatchedFiles (line 57, column 3 - line 69, column 36): " + [ maybeDoc.constructor.name ]);
                          });
                      });
                  };
              };
          };
      };
  };
  var handleFileCreated = function (configRef) {
      return function (connection) {
          return function (stateRef) {
              return function (documents) {
                  return function (uri) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(insertModuleHeader(configRef)(connection)(stateRef)(documents)(uri))(function () {
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(connection)("Created " + (Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)(uri) + " - full build may be required")));
                      });
                  };
              };
          };
      };
  };
  var handleDidChangeWatchedFiles = function (configRef) {
      return function (conn) {
          return function (stateRef) {
              return function (documents) {
                  return function (v) {
                      return Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(v.changes)(function (v1) {
                          var v2 = LanguageServer_Protocol_Types.fromFileChangeTypeCode(v1.type);
                          if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof LanguageServer_Protocol_Types.CreatedChangeType) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(conn)("CREATED " + Data_Show.show(LanguageServer_Protocol_Types.showDocumentUri)(v1.uri))))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(handleFileCreated(configRef)(conn)(stateRef)(documents)(v1.uri))(function () {
                                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(conn)("CREATED DONE"));
                                  });
                              });
                          };
                          if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof LanguageServer_Protocol_Types.DeletedChangeType) {
                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(conn)("Deleted " + (Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)(v1.uri) + " - full build may be required")));
                          };
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                      });
                  };
              };
          };
      };
  };
  exports["handleDidChangeWatchedFiles"] = handleDidChangeWatchedFiles;
})(PS);
(function(exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  const node_1 = require("vscode-languageserver/node");
  const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
  exports.initConnection = (commands) => (cb) => () => {
      const connection = node_1.createConnection();
      connection.listen();
      connection.onInitialize((params) => {
          connection.console.info(JSON.stringify(params));
          cb({
              params,
              connection
          })();
          return {
              capabilities: {
                  // Tell the client that the server works in FULL text document sync mode
                  textDocumentSync: node_1.TextDocumentSyncKind.Full,
                  // Tell the client that the server supports code complete
                  completionProvider: {
                      resolveProvider: false,
                      triggerCharacters: ["."]
                  },
                  codeLensProvider: {
                      resolveProvider: false
                  },
                  hoverProvider: true,
                  signatureHelpProvider: {
                      triggerCharacters: [" "],
                      retriggerCharacters: [" "]
                  },
                  definitionProvider: true,
                  typeDefinitionProvider: false,
                  workspaceSymbolProvider: true,
                  documentSymbolProvider: true,
                  codeActionProvider: true,
                  executeCommandProvider: (params.initializationOptions || {}).executeCommandProvider === false
                      ? undefined : {
                      commands
                  },
                  referencesProvider: true,
                  foldingRangeProvider: true,
                  documentFormattingProvider: true,
                  workspace: {
                      fileOperations: {
                          didCreate: { filters: [{ pattern: { glob: "./src/**/*.purs" } }, { pattern: { glob: "./src/**/*.purs" } }] },
                          didRename: { filters: [{ pattern: { glob: "./src/**/*.purs" } }, { pattern: { glob: "./src/**/*.purs" } }] },
                          didDelete: { filters: [{ pattern: { glob: "./src/**/*.purs" } }, { pattern: { glob: "./src/**/*.purs" } }] },
                      }
                  }
              }
          };
      });
      return connection;
  };
  exports.initDocumentStore = (conn) => () => {
      const documents = new node_1.TextDocuments(vscode_languageserver_textdocument_1.TextDocument);
      documents.listen(conn);
      return documents;
  };
  exports.getConfigurationImpl = (conn) => () => conn.workspace.getConfiguration("purescript").then(config => {
      return { purescript: config };
  });
})(PS["LanguageServer.Protocol.Setup"] = PS["LanguageServer.Protocol.Setup"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.Protocol.Setup"] = $PS["LanguageServer.Protocol.Setup"] || {};
  var exports = $PS["LanguageServer.Protocol.Setup"];
  var $foreign = $PS["LanguageServer.Protocol.Setup"];
  var Control_Promise = $PS["Control.Promise"];
  var getConfiguration = function (conn) {
      return Control_Promise.toAffE($foreign.getConfigurationImpl(conn));
  };
  exports["getConfiguration"] = getConfiguration;
  exports["initConnection"] = $foreign.initConnection;
  exports["initDocumentStore"] = $foreign.initDocumentStore;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["LanguageServer.IdePurescript.Main"] = $PS["LanguageServer.IdePurescript.Main"] || {};
  var exports = $PS["LanguageServer.IdePurescript.Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Plus = $PS["Control.Plus"];
  var Control_Promise = $PS["Control.Promise"];
  var Data_Array = $PS["Data.Array"];
  var Data_DateTime_Instant = $PS["Data.DateTime.Instant"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Show = $PS["Data.Show"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_AVar = $PS["Effect.AVar"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_AVar = $PS["Effect.Aff.AVar"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Now = $PS["Effect.Now"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Foreign = $PS["Foreign"];
  var Foreign_JSON = $PS["Foreign.JSON"];
  var Foreign_Object = $PS["Foreign.Object"];
  var IdePurescript_Modules = $PS["IdePurescript.Modules"];
  var IdePurescript_PscIdeServer = $PS["IdePurescript.PscIdeServer"];
  var IdePurescript_Spago = $PS["IdePurescript.Spago"];
  var LanguageServer_IdePurescript_Assist = $PS["LanguageServer.IdePurescript.Assist"];
  var LanguageServer_IdePurescript_Build = $PS["LanguageServer.IdePurescript.Build"];
  var LanguageServer_IdePurescript_ChangeContent = $PS["LanguageServer.IdePurescript.ChangeContent"];
  var LanguageServer_IdePurescript_CodeActions = $PS["LanguageServer.IdePurescript.CodeActions"];
  var LanguageServer_IdePurescript_CodeLenses = $PS["LanguageServer.IdePurescript.CodeLenses"];
  var LanguageServer_IdePurescript_Commands = $PS["LanguageServer.IdePurescript.Commands"];
  var LanguageServer_IdePurescript_Completion = $PS["LanguageServer.IdePurescript.Completion"];
  var LanguageServer_IdePurescript_Config = $PS["LanguageServer.IdePurescript.Config"];
  var LanguageServer_IdePurescript_FoldingRanges = $PS["LanguageServer.IdePurescript.FoldingRanges"];
  var LanguageServer_IdePurescript_Formatting = $PS["LanguageServer.IdePurescript.Formatting"];
  var LanguageServer_IdePurescript_Imports = $PS["LanguageServer.IdePurescript.Imports"];
  var LanguageServer_IdePurescript_References = $PS["LanguageServer.IdePurescript.References"];
  var LanguageServer_IdePurescript_Search = $PS["LanguageServer.IdePurescript.Search"];
  var LanguageServer_IdePurescript_Server = $PS["LanguageServer.IdePurescript.Server"];
  var LanguageServer_IdePurescript_Symbols = $PS["LanguageServer.IdePurescript.Symbols"];
  var LanguageServer_IdePurescript_Tooltips = $PS["LanguageServer.IdePurescript.Tooltips"];
  var LanguageServer_IdePurescript_Types = $PS["LanguageServer.IdePurescript.Types"];
  var LanguageServer_IdePurescript_WatchedFiles = $PS["LanguageServer.IdePurescript.WatchedFiles"];
  var LanguageServer_Protocol_Console = $PS["LanguageServer.Protocol.Console"];
  var LanguageServer_Protocol_DocumentStore = $PS["LanguageServer.Protocol.DocumentStore"];
  var LanguageServer_Protocol_Handlers = $PS["LanguageServer.Protocol.Handlers"];
  var LanguageServer_Protocol_Setup = $PS["LanguageServer.Protocol.Setup"];
  var LanguageServer_Protocol_TextDocument = $PS["LanguageServer.Protocol.TextDocument"];
  var LanguageServer_Protocol_Types = $PS["LanguageServer.Protocol.Types"];
  var LanguageServer_Protocol_Uri = $PS["LanguageServer.Protocol.Uri"];
  var LanguageServer_Protocol_Window = $PS["LanguageServer.Protocol.Window"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Node_FS_Sync = $PS["Node.FS.Sync"];
  var Node_Path = $PS["Node.Path"];
  var Node_Process = $PS["Node.Process"];                
  var write = function (dictMonadEffect) {
      return Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Functor.functorFn)(Effect_Class.liftEffect(dictMonadEffect)))(Effect_Ref.write);
  };
  var timeDifference = function (start) {
      return function (end) {
          var v = Data_DateTime_Instant.unInstant(start);
          var v1 = Data_DateTime_Instant.unInstant(end);
          return v1 - v;
      };
  };
  var rebuildAndSendDiagnostics = function (configRef) {
      return function (connection) {
          return function (stateRef) {
              return function (document) {
                  var uri = LanguageServer_Protocol_TextDocument.getUri(document);
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(configRef)))(function (config) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(stateRef)))(function (state) {
                          return Control_Applicative.when(Effect_Aff.applicativeAff)(LanguageServer_IdePurescript_Config.fastRebuild(config))(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Now.now))(function (startedAt) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(connection)("Starting fast rebuild")))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Handlers.sendDiagnosticsBegin(connection)))(function () {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_IdePurescript_Build.getDiagnostics(uri)(config)(state))(function (v) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Uri.uriToFilename(uri)))(function (filename) {
                                              var fileDiagnostics = Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidArray)(Foreign_Object.lookup(filename)(v.diagnostics));
                                              var previousBuildTimes = Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidArray)(Foreign_Object.lookup(filename)((Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)(state)).successfulBuildTimes));
                                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                                  LanguageServer_Protocol_Console.log(connection)("Built with " + (Data_Show.show(Data_Show.showInt)(Data_Array.length(fileDiagnostics)) + ("/" + (Data_Show.show(Data_Show.showInt)(Data_Array.length(v.pscErrors)) + (" issues for file: " + (Data_Show.show(Data_Show.showString)(filename) + (", all diagnostic files: " + Data_Show.show(Data_Show.showArray(Data_Show.showString))(Foreign_Object.keys(v.diagnostics)))))))))();
                                                  var nonFileDiagnostics = Foreign_Object["delete"](filename)(v.diagnostics);
                                                  Control_Applicative.when(Effect.applicativeEffect)(Foreign_Object.size(nonFileDiagnostics) > 0)(LanguageServer_Protocol_Console.log(connection)("Unmatched diagnostics: " + Data_Show.show(Foreign_Object.showObject(Data_Show.showArray(LanguageServer_Protocol_Types.showDiagnostic)))(nonFileDiagnostics)))();
                                                  var finishedAt = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Now.now)();
                                                  var buildTime = timeDifference(startedAt)(finishedAt);
                                                  var newPreviousBuildTimes = Data_Array.takeEnd(5)(Data_Array.snoc(previousBuildTimes)(buildTime));
                                                  write(Effect_Class.monadEffectEffect)(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function (s1) {
                                                      return {
                                                          diagnostics: Foreign_Object.insert(Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)(uri))(v.pscErrors)(s1.diagnostics),
                                                          modulesFile: Data_Maybe.Nothing.value,
                                                          successfulBuildTimes: (function () {
                                                              if (v.hasErrors) {
                                                                  return Control_Category.identity(Control_Category.categoryFn);
                                                              };
                                                              return Foreign_Object.insert(filename)(newPreviousBuildTimes);
                                                          })()((Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)(state)).successfulBuildTimes),
                                                          buildQueue: s1.buildQueue,
                                                          clientCapabilities: s1.clientCapabilities,
                                                          connection: s1.connection,
                                                          deactivate: s1.deactivate,
                                                          modules: s1.modules,
                                                          parseResults: s1.parseResults,
                                                          previousRebuild: s1.previousRebuild,
                                                          pscIdePort: s1.pscIdePort,
                                                          root: s1.root,
                                                          runningRebuild: s1.runningRebuild,
                                                          showExportManagementCodeLenses: s1.showExportManagementCodeLenses
                                                      };
                                                  })(state))(stateRef)();
                                                  LanguageServer_Protocol_Handlers.publishDiagnostics(connection)({
                                                      uri: uri,
                                                      diagnostics: fileDiagnostics
                                                  })();
                                                  LanguageServer_Protocol_Handlers.sendDiagnosticsEnd(connection)();
                                                  return LanguageServer_Protocol_Console.log(connection)("Fast rebuild done in " + (Data_Show.show(Data_Show.showNumber)(Data_Newtype.un()(Data_Time_Duration.Milliseconds)(buildTime)) + "ms"))();
                                              });
                                          });
                                      });
                                  });
                              });
                          }));
                      });
                  });
              };
          };
      };
  };
  var read = function (dictMonadEffect) {
      return Data_Functor.map(Data_Functor.functorFn)(Effect_Class.liftEffect(dictMonadEffect))(Effect_Ref.read);
  };
  var modify_ = function (dictMonadEffect) {
      return Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Functor.functorFn)(Effect_Class.liftEffect(dictMonadEffect)))(Effect_Ref.modify_);
  };
  var modify = function (dictMonadEffect) {
      return Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Functor.functorFn)(Effect_Class.liftEffect(dictMonadEffect)))(Effect_Ref.modify);
  };
  var updateModules = function (stateRef) {
      return function (documents) {
          return function (uri) {
              return Control_Bind.bind(Effect_Aff.bindAff)(read(Effect_Aff.monadEffectAff)(stateRef))(function (currentState) {
                  if (currentState.pscIdePort instanceof Data_Maybe.Just && Data_Eq.notEq(Data_Maybe.eqMaybe(LanguageServer_Protocol_Types.eqDocumentUri))(currentState.modulesFile)(new Data_Maybe.Just(uri))) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(documents)(uri)))(function (maybeDoc) {
                          if (maybeDoc instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                          };
                          if (maybeDoc instanceof Data_Maybe.Just) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getText(maybeDoc.value0)))(function (text) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Uri.uriToFilename(uri)))(function (path) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Modules.getModulesForFileTemp(currentState.pscIdePort.value0)(path)(text))(function (modules) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(modify(Effect_Aff.monadEffectAff)(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function (v) {
                                              return {
                                                  modules: modules,
                                                  modulesFile: new Data_Maybe.Just(uri),
                                                  buildQueue: v.buildQueue,
                                                  clientCapabilities: v.clientCapabilities,
                                                  connection: v.connection,
                                                  deactivate: v.deactivate,
                                                  diagnostics: v.diagnostics,
                                                  parseResults: v.parseResults,
                                                  previousRebuild: v.previousRebuild,
                                                  pscIdePort: v.pscIdePort,
                                                  root: v.root,
                                                  runningRebuild: v.runningRebuild,
                                                  showExportManagementCodeLenses: v.showExportManagementCodeLenses,
                                                  successfulBuildTimes: v.successfulBuildTimes
                                              };
                                          }))(stateRef))(function (newState) {
                                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Maybe.Just(newState));
                                          });
                                      });
                                  });
                              });
                          };
                          throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 138, column 9 - line 148, column 33): " + [ maybeDoc.constructor.name ]);
                      });
                  };
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
              });
          };
      };
  };
  var mkStopPscIdeServer = function (stateRef) {
      return function (notify) {
          return Control_Bind.bind(Effect_Aff.bindAff)(read(Effect_Aff.monadEffectAff)(stateRef))(function (v) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v.deactivate)(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(modify_(Effect_Aff.monadEffectAff)(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function (v1) {
                      return {
                          pscIdePort: Data_Maybe.Nothing.value,
                          deactivate: Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit),
                          buildQueue: v1.buildQueue,
                          clientCapabilities: v1.clientCapabilities,
                          connection: v1.connection,
                          diagnostics: v1.diagnostics,
                          modules: v1.modules,
                          modulesFile: v1.modulesFile,
                          parseResults: v1.parseResults,
                          previousRebuild: v1.previousRebuild,
                          root: v1.root,
                          runningRebuild: v1.runningRebuild,
                          showExportManagementCodeLenses: v1.showExportManagementCodeLenses,
                          successfulBuildTimes: v1.successfulBuildTimes
                      };
                  }))(stateRef))(function () {
                      return notify(Effect_Aff.monadEffectAff)(IdePurescript_PscIdeServer.Success.value)("Stopped IDE server");
                  });
              });
          });
      };
  };
  var mkRunHandler = function (configRef) {
      return function (stateRef) {
          return function (documents) {
              return function (v) {
                  return function (getMaybeDocumentUri) {
                      return function (f) {
                          return function (b) {
                              return Control_Promise.fromAff(Control_Bind.bind(Effect_Aff.bindAff)(read(Effect_Aff.monadEffectAff)(configRef))(function (config) {
                                  var maybeDocumentUri = getMaybeDocumentUri(b);
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Data_Maybe.maybe(Control_Plus.empty(Effect_Aff.plusAff))(updateModules(stateRef)(documents))(maybeDocumentUri))(function (modules) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Data_Maybe["maybe'"](function (v1) {
                                          return read(Effect_Aff.monadEffectAff)(stateRef);
                                      })(Control_Applicative.pure(Effect_Aff.applicativeAff))(modules))(function (state) {
                                          return f(config)(state)(b);
                                      });
                                  });
                              }));
                          };
                      };
                  };
              };
          };
      };
  };
  var mkNotify = function (logFile) {
      return function (stateRef) {
          return function (dictMonadEffect) {
              return function (logLevel) {
                  return function (logMessage) {
                      var logToFile = function (filename) {
                          var taggedMessage = "[" + (Data_Show.show(IdePurescript_PscIdeServer.showErrorLevel)(logLevel) + ("] " + (logMessage + "\x0a")));
                          return Node_FS_Sync.appendTextFile(Node_Encoding.UTF8.value)(filename)(taggedMessage);
                      };
                      var logToConnection = function (c) {
                          var logFunction = (function () {
                              if (logLevel instanceof IdePurescript_PscIdeServer.Success) {
                                  return LanguageServer_Protocol_Console.log;
                              };
                              if (logLevel instanceof IdePurescript_PscIdeServer.Info) {
                                  return LanguageServer_Protocol_Console.info;
                              };
                              if (logLevel instanceof IdePurescript_PscIdeServer.Warning) {
                                  return LanguageServer_Protocol_Console.warn;
                              };
                              if (logLevel instanceof IdePurescript_PscIdeServer["Error"]) {
                                  return LanguageServer_Protocol_Console.error;
                              };
                              throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 184, column 19 - line 188, column 21): " + [ logLevel.constructor.name ]);
                          })();
                          return logFunction(c)(logMessage);
                      };
                      return Effect_Class.liftEffect(dictMonadEffect)(function __do() {
                          var v = Effect_Ref.read(stateRef)();
                          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.connection)(logToConnection)();
                          return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(logFile)(logToFile)();
                      });
                  };
              };
          };
      };
  };
  var mkLaunchAffLog = function (notify) {
      return Effect_Aff.runAff(Data_Either.either((function () {
          var $162 = notify(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer["Error"].value);
          var $163 = Data_Show.show(Effect_Exception.showError);
          return function ($164) {
              return $162($163($164));
          };
      })())(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
  };
  var getWorkspaceRoot = function (dictMonadEffect) {
      return function (stateRef) {
          return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(read(dictMonadEffect)(stateRef))(function (v) {
              return Data_Maybe.maybe(Effect_Class.liftEffect(dictMonadEffect)(Node_Process.cwd))(Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0()))(v.root);
          });
      };
  };
  var getTextDocUri = (function () {
      var $165 = Data_Newtype.un()(LanguageServer_Protocol_Types.TextDocumentIdentifier);
      return function ($166) {
          return Data_Maybe.Just.create((function (v) {
              return v.uri;
          })($165((function (v) {
              return v.textDocument;
          })($166))));
      };
  })();
  var getPort = function (dictMonadEffect) {
      return function (stateRef) {
          return Effect_Class.liftEffect(dictMonadEffect)(Data_Functor.map(Effect.functorEffect)(function (v) {
              return v.pscIdePort;
          })(Effect_Ref.read(stateRef)));
      };
  };
  var defaultServerState = {
      pscIdePort: Data_Maybe.Nothing.value,
      deactivate: Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit),
      root: Data_Maybe.Nothing.value,
      connection: Data_Maybe.Nothing.value,
      modules: IdePurescript_Modules.initialModulesState,
      modulesFile: Data_Maybe.Nothing.value,
      buildQueue: Foreign_Object.empty,
      runningRebuild: Data_Maybe.Nothing.value,
      previousRebuild: Data_Maybe.Nothing.value,
      parseResults: Foreign_Object.empty,
      successfulBuildTimes: Foreign_Object.empty,
      showExportManagementCodeLenses: false,
      diagnostics: Foreign_Object.empty,
      clientCapabilities: Data_Maybe.Nothing.value
  };
  var defaultArguments = {
      config: Data_Maybe.Nothing.value,
      filename: Data_Maybe.Nothing.value
  };
  var parseArgs = function (allArgs) {
      var relevantArgs = Data_Array.toUnfoldable(Data_List_Types.unfoldableList)(Data_Array.drop(2)(allArgs));
      var parse = function ($copy_currentConfig) {
          return function ($copy_v) {
              var $tco_var_currentConfig = $copy_currentConfig;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(currentConfig, v) {
                  if (v instanceof Data_List_Types.Cons && (v.value0 === "--config" && v.value1 instanceof Data_List_Types.Cons)) {
                      var parsedConfig = Data_Either.hush(Control_Monad_Except.runExcept(Foreign_JSON.parseJSON(v.value1.value0)));
                      $tco_var_currentConfig = {
                          config: parsedConfig,
                          filename: currentConfig.filename
                      };
                      $copy_v = v.value1.value1;
                      return;
                  };
                  if (v instanceof Data_List_Types.Cons && (v.value0 === "--log" && v.value1 instanceof Data_List_Types.Cons)) {
                      $tco_var_currentConfig = {
                          config: currentConfig.config,
                          filename: new Data_Maybe.Just(v.value1.value0)
                      };
                      $copy_v = v.value1.value1;
                      return;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_currentConfig = currentConfig;
                      $copy_v = v.value1;
                      return;
                  };
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return currentConfig;
                  };
                  throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 119, column 25 - line 125, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_currentConfig, $copy_v);
              };
              return $tco_result;
          };
      };
      return parse(defaultArguments)(relevantArgs);
  };
  var connect = function (stateRef) {
      return LanguageServer_Protocol_Setup.initConnection(LanguageServer_IdePurescript_Commands.commands)(function (v) {
          return function __do() {
              (function __do() {
                  var args = Node_Process.argv();
                  return LanguageServer_Protocol_Console.log(v.connection)("Starting with args: " + Data_Show.show(Data_Show.showArray(Data_Show.showString))(args))();
              })();
              var root = (function () {
                  var v1 = Data_Nullable.toMaybe(v.params.rootPath);
                  var v2 = Data_Nullable.toMaybe(v.params.rootUri);
                  if (v2 instanceof Data_Maybe.Just) {
                      return Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(LanguageServer_Protocol_Uri.uriToFilename(v2.value0))();
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just(v1.value0);
                  };
                  if (v2 instanceof Data_Maybe.Nothing && v1 instanceof Data_Maybe.Nothing) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 263, column 17 - line 266, column 43): " + [ v2.constructor.name, v1.constructor.name ]);
              })();
              var workingRoot = Data_Maybe.maybe(Node_Process.cwd)(Control_Applicative.pure(Effect.applicativeEffect))(root)();
              Effect_Ref.modify_(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function (v1) {
                  return {
                      root: new Data_Maybe.Just(workingRoot),
                      clientCapabilities: new Data_Maybe.Just(v.params.capabilities),
                      buildQueue: v1.buildQueue,
                      connection: v1.connection,
                      deactivate: v1.deactivate,
                      diagnostics: v1.diagnostics,
                      modules: v1.modules,
                      modulesFile: v1.modulesFile,
                      parseResults: v1.parseResults,
                      previousRebuild: v1.previousRebuild,
                      pscIdePort: v1.pscIdePort,
                      runningRebuild: v1.runningRebuild,
                      showExportManagementCodeLenses: v1.showExportManagementCodeLenses,
                      successfulBuildTimes: v1.successfulBuildTimes
                  };
              }))(stateRef)();
              Control_Bind.bindFlipped(Effect.bindEffect)(function (v1) {
                  return LanguageServer_Protocol_Console.log(v.connection)("Starting with cwd: " + (v1.value0 + (" and using root path: " + v1.value1)));
              })(Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(Data_Tuple.Tuple.create)(Node_Process.cwd))(Control_Applicative.pure(Effect.applicativeEffect)(workingRoot)))();
              return Effect_Ref.modify_(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function (v1) {
                  return {
                      connection: new Data_Maybe.Just(v.connection),
                      buildQueue: v1.buildQueue,
                      clientCapabilities: v1.clientCapabilities,
                      deactivate: v1.deactivate,
                      diagnostics: v1.diagnostics,
                      modules: v1.modules,
                      modulesFile: v1.modulesFile,
                      parseResults: v1.parseResults,
                      previousRebuild: v1.previousRebuild,
                      pscIdePort: v1.pscIdePort,
                      root: v1.root,
                      runningRebuild: v1.runningRebuild,
                      showExportManagementCodeLenses: v1.showExportManagementCodeLenses,
                      successfulBuildTimes: v1.successfulBuildTimes
                  };
              }))(stateRef)();
          };
      });
  };
  var buildProject = function (connection) {
      return function (stateRef) {
          return function (notify) {
              return function (docs) {
                  return function (c) {
                      return function (s) {
                          return function ($$arguments) {
                              var workspaceRoot = getWorkspaceRoot(Effect_Class.monadEffectEffect)(stateRef);
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Handlers.sendDiagnosticsBegin(connection)))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_IdePurescript_Build.fullBuild(function (dictMonadEffect) {
                                      return notify(dictMonadEffect);
                                  })(docs)(c)(s)($$arguments))(function (v) {
                                      if (v instanceof Data_Either.Right) {
                                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                              LanguageServer_Protocol_Console.log(connection)("Built with " + (Data_Show.show(Data_Show.showInt)(Data_Array.length(v.value0.pscErrors)) + " issues"))();
                                              var pscErrorsMap = Data_Functor.map(Effect.functorEffect)(LanguageServer_IdePurescript_Build.collectByFirst)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(function (v1) {
                                                  return function __do() {
                                                      var projectRoot = workspaceRoot();
                                                      var filename$prime = Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Effect.applicativeEffect)(Node_Path.resolve([ projectRoot ]))(v1.filename)();
                                                      var uri = Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value))(function (f) {
                                                          return Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Functor.functorFn)(Data_Maybe.Just.create)(Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)))(LanguageServer_Protocol_Uri.filenameToUri(f));
                                                      })(filename$prime)();
                                                      return new Data_Tuple.Tuple(uri, v1);
                                                  };
                                              })(v.value0.pscErrors))();
                                              var prevErrors = Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Functor.functorFn)(function (v1) {
                                                  return v1.diagnostics;
                                              })(Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)))(Effect_Ref.read(stateRef))();
                                              var nonErrorFiles = Data_Array.difference(Data_Eq.eqString)(Foreign_Object.keys(prevErrors))(Foreign_Object.keys(pscErrorsMap));
                                              LanguageServer_Protocol_Console.log(connection)("Removing old diagnostics for: " + Data_Show.show(Data_Show.showArray(Data_Show.showString))(nonErrorFiles))();
                                              Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(LanguageServer_Protocol_Types.DocumentUri)(nonErrorFiles))(function (uri) {
                                                  return LanguageServer_Protocol_Handlers.publishDiagnostics(connection)({
                                                      uri: uri,
                                                      diagnostics: [  ]
                                                  });
                                              })();
                                              write(Effect_Class.monadEffectEffect)(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function (v1) {
                                                  return {
                                                      diagnostics: pscErrorsMap,
                                                      buildQueue: v1.buildQueue,
                                                      clientCapabilities: v1.clientCapabilities,
                                                      connection: v1.connection,
                                                      deactivate: v1.deactivate,
                                                      modules: v1.modules,
                                                      modulesFile: v1.modulesFile,
                                                      parseResults: v1.parseResults,
                                                      previousRebuild: v1.previousRebuild,
                                                      pscIdePort: v1.pscIdePort,
                                                      root: v1.root,
                                                      runningRebuild: v1.runningRebuild,
                                                      showExportManagementCodeLenses: v1.showExportManagementCodeLenses,
                                                      successfulBuildTimes: v1.successfulBuildTimes
                                                  };
                                              })(s))(stateRef)();
                                              return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.value0.diagnostics))(function (v1) {
                                                  return function __do() {
                                                      var uri = LanguageServer_Protocol_Uri.filenameToUri(v1.value0)();
                                                      LanguageServer_Protocol_Console.log(connection)("Publishing diagnostics for: " + (Data_Show.show(LanguageServer_Protocol_Types.showDocumentUri)(uri) + (" (" + (Data_Show.show(Data_Show.showString)(v1.value0) + ")"))))();
                                                      return LanguageServer_Protocol_Handlers.publishDiagnostics(connection)({
                                                          uri: uri,
                                                          diagnostics: v1.value1
                                                      })();
                                                  };
                                              })();
                                          });
                                      };
                                      if (v instanceof Data_Either.Left) {
                                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                              LanguageServer_Protocol_Console.error(connection)(v.value0)();
                                              return LanguageServer_Protocol_Window.showError(connection)(v.value0)();
                                          });
                                      };
                                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 294, column 9 - line 322, column 37): " + [ v.constructor.name ]);
                                  }))(function () {
                                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Handlers.sendDiagnosticsEnd(connection));
                                  });
                              });
                          };
                      };
                  };
              };
          };
      };
  };
  var buildDocumentsInQueue = function (config) {
      return function (connection) {
          return function (stateRef) {
              return function __do() {
                  var v = Effect_Ref.read(stateRef)();
                  var docs = Foreign_Object.values(v.buildQueue);
                  return Effect_Aff.launchAff_(Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(docs)(rebuildAndSendDiagnostics(config)(connection)(stateRef)))();
              };
          };
      };
  };
  var mkStartPscIdeServer = function (config) {
      return function (connection) {
          return function (stateRef) {
              return function (notify) {
                  var workspaceRoot = getWorkspaceRoot(Effect_Class.monadEffectEffect)(stateRef);
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(notify(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Info.value)("Starting IDE server")))(function () {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(workspaceRoot))(function (rootPath) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(config)))(function (settings) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_IdePurescript_Server["startServer'"](settings)(rootPath)(function (dictMonadEffect) {
                                  return notify(dictMonadEffect);
                              })(function (dictMonadEffect) {
                                  return notify(dictMonadEffect);
                              }))(function (startRes) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(LanguageServer_IdePurescript_Server.retry(function (dictMonadEffect) {
                                      return notify(dictMonadEffect);
                                  })(6)((function () {
                                      if (startRes.port instanceof Data_Maybe.Just) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_IdePurescript_Server.loadAll(startRes.port.value0))(function (v) {
                                              if (v instanceof Data_Either.Left) {
                                                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(notify(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Info.value)("Non-fatal error loading modules: " + v.value0));
                                              };
                                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                          }))(function () {
                                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function (v) {
                                                  return {
                                                      pscIdePort: new Data_Maybe.Just(startRes.port.value0),
                                                      deactivate: startRes.quit,
                                                      buildQueue: v.buildQueue,
                                                      clientCapabilities: v.clientCapabilities,
                                                      connection: v.connection,
                                                      diagnostics: v.diagnostics,
                                                      modules: v.modules,
                                                      modulesFile: v.modulesFile,
                                                      parseResults: v.parseResults,
                                                      previousRebuild: v.previousRebuild,
                                                      root: v.root,
                                                      runningRebuild: v.runningRebuild,
                                                      showExportManagementCodeLenses: v.showExportManagementCodeLenses,
                                                      successfulBuildTimes: v.successfulBuildTimes
                                                  };
                                              }))(stateRef));
                                          });
                                      };
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                  })()))(function () {
                                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(buildDocumentsInQueue(config)(connection)(stateRef));
                                  });
                              });
                          });
                      });
                  });
              };
          };
      };
  };
  var handleCommands = function (configRef) {
      return function (connection) {
          return function (stateRef) {
              return function (documents) {
                  return function (notify) {
                      var stopPscIdeServer = mkStopPscIdeServer(stateRef)(function (dictMonadEffect) {
                          return notify(dictMonadEffect);
                      });
                      var startPscIdeServer = mkStartPscIdeServer(configRef)(connection)(stateRef)(function (dictMonadEffect) {
                          return notify(dictMonadEffect);
                      });
                      var restartPscIdeServer = Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.apathize(stopPscIdeServer))(function () {
                          return startPscIdeServer;
                      });
                      var onBuild = buildProject(connection)(stateRef)(function (dictMonadEffect) {
                          return notify(dictMonadEffect);
                      });
                      var noResult = Foreign.unsafeToForeign(Data_Nullable["null"]);
                      var simpleHandler = function (handler) {
                          return function (v) {
                              return function (v1) {
                                  return function (v2) {
                                      return function (v3) {
                                          return Data_Functor.voidLeft(Effect_Aff.functorAff)(handler)(noResult);
                                      };
                                  };
                              };
                          };
                      };
                      var voidHandler = function (handler) {
                          return function (docs) {
                              return function (config) {
                                  return function (state) {
                                      return function ($$arguments) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(handler(docs)(config)(state)($$arguments)))(function (v) {
                                              if (v instanceof Data_Either.Left) {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(notify(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer["Error"].value)(Data_Show.show(Effect_Exception.showError)(v.value0))))(function () {
                                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(noResult);
                                                  });
                                              };
                                              if (v instanceof Data_Either.Right) {
                                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(noResult);
                                              };
                                              throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 611, column 13 - line 615, column 37): " + [ v.constructor.name ]);
                                          });
                                      };
                                  };
                              };
                          };
                      };
                      var handlers = Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Profunctor_Strong.first(Data_Profunctor_Strong.strongFn)(LanguageServer_IdePurescript_Commands.cmdName))([ Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.caseSplitCmd)(voidHandler(LanguageServer_IdePurescript_Assist.caseSplit)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.addClauseCmd)(voidHandler(LanguageServer_IdePurescript_Assist.addClause)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.replaceSuggestionCmd)(voidHandler(LanguageServer_IdePurescript_CodeActions.onReplaceSuggestion)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.replaceAllSuggestionsCmd)(voidHandler(LanguageServer_IdePurescript_CodeActions.onReplaceAllSuggestions)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.buildCmd)(voidHandler(onBuild)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.addCompletionImportCmd)(LanguageServer_IdePurescript_Imports.addCompletionImport(function (dictMonadEffect) {
                          return notify(dictMonadEffect);
                      })), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.addModuleImportCmd)(voidHandler(LanguageServer_IdePurescript_Imports["addModuleImport'"](function (dictMonadEffect) {
                          return notify(dictMonadEffect);
                      }))), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.organiseImportsCmd)(LanguageServer_IdePurescript_Imports.organiseImports(function (dictMonadEffect) {
                          return notify(dictMonadEffect);
                      })), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.startPscIdeCmd)(simpleHandler(startPscIdeServer)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.stopPscIdeCmd)(simpleHandler(stopPscIdeServer)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.restartPscIdeCmd)(simpleHandler(restartPscIdeServer)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.getAvailableModulesCmd)(LanguageServer_IdePurescript_Imports.getAllModules(function (dictMonadEffect) {
                          return notify(dictMonadEffect);
                      })), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.searchCmd)(LanguageServer_IdePurescript_Search.search), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.fixTypoCmd)(LanguageServer_IdePurescript_Assist.fixTypo(function (dictMonadEffect) {
                          return notify(dictMonadEffect);
                      })), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.typedHoleExplicitCmd)(voidHandler(LanguageServer_IdePurescript_Assist.fillTypedHole(function (dictMonadEffect) {
                          return notify(dictMonadEffect);
                      }))), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.addSpagoDependencyCmd)(IdePurescript_Spago.addDependency), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.listPackageSetPackagesCmd)(IdePurescript_Spago.getPackages), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.toggleExportManagementCmd)(simpleHandler(modify_(Effect_Aff.monadEffectAff)(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function (s) {
                          return {
                              showExportManagementCodeLenses: !s.showExportManagementCodeLenses,
                              buildQueue: s.buildQueue,
                              clientCapabilities: s.clientCapabilities,
                              connection: s.connection,
                              deactivate: s.deactivate,
                              diagnostics: s.diagnostics,
                              modules: s.modules,
                              modulesFile: s.modulesFile,
                              parseResults: s.parseResults,
                              previousRebuild: s.previousRebuild,
                              pscIdePort: s.pscIdePort,
                              root: s.root,
                              runningRebuild: s.runningRebuild,
                              successfulBuildTimes: s.successfulBuildTimes
                          };
                      }))(stateRef))) ]));
                      return LanguageServer_Protocol_Handlers.onExecuteCommand(connection)(function (v) {
                          return Control_Promise.fromAff(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(configRef)))(function (config) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(stateRef)))(function (state) {
                                  var v1 = Foreign_Object.lookup(v.command)(handlers);
                                  if (v1 instanceof Data_Maybe.Just) {
                                      return v1.value0(documents)(config)(state)(v["arguments"]);
                                  };
                                  if (v1 instanceof Data_Maybe.Nothing) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.error(connection)("Unknown command: " + v.command)))(function () {
                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(noResult);
                                      });
                                  };
                                  throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 650, column 11 - line 654, column 28): " + [ v1.constructor.name ]);
                              });
                          }));
                      });
                  };
              };
          };
      };
  };
  var handleEvents = function (configRef) {
      return function (connection) {
          return function (stateRef) {
              return function (documents) {
                  return function (notify) {
                      var stopPscIdeServer = mkStopPscIdeServer(stateRef)(function (dictMonadEffect) {
                          return notify(dictMonadEffect);
                      });
                      var startPscIdeServer = mkStartPscIdeServer(configRef)(connection)(stateRef)(function (dictMonadEffect) {
                          return notify(dictMonadEffect);
                      });
                      var runHandler = mkRunHandler(configRef)(stateRef)(documents);
                      var restartPscIdeServer = Control_Apply.applySecond(Effect_Aff.applyAff)(Effect_Aff.apathize(stopPscIdeServer))(startPscIdeServer);
                      var launchAffLog = mkLaunchAffLog(function (dictMonadEffect) {
                          return notify(dictMonadEffect);
                      });
                      var launchAffLog_ = Data_Functor.map(Data_Functor.functorFn)(Data_Functor["void"](Effect.functorEffect))(launchAffLog);
                      return function __do() {
                          LanguageServer_Protocol_Handlers.onCompletion(connection)(runHandler("onCompletion")(getTextDocUri)(LanguageServer_IdePurescript_Completion.getCompletions(documents)))();
                          LanguageServer_Protocol_Handlers.onDefinition(connection)(runHandler("onDefinition")(getTextDocUri)(LanguageServer_IdePurescript_Symbols.getDefinition(documents)))();
                          LanguageServer_Protocol_Handlers.onDocumentSymbol(connection)(runHandler("onDocumentSymbol")(getTextDocUri)(LanguageServer_IdePurescript_Symbols.getDocumentSymbols))();
                          LanguageServer_Protocol_Handlers.onWorkspaceSymbol(connection)(runHandler("onWorkspaceSymbol")(Data_Function["const"](Data_Maybe.Nothing.value))(LanguageServer_IdePurescript_Symbols.getWorkspaceSymbols))();
                          LanguageServer_Protocol_Handlers.onFoldingRanges(connection)(runHandler("onFoldingRanges")(getTextDocUri)(LanguageServer_IdePurescript_FoldingRanges.getFoldingRanges(documents)))();
                          LanguageServer_Protocol_Handlers.onDocumentFormatting(connection)(runHandler("onDocumentFormatting")(getTextDocUri)(LanguageServer_IdePurescript_Formatting.getFormattedDocument(function (dictMonadEffect) {
                              return notify(dictMonadEffect);
                          })(documents)))();
                          LanguageServer_Protocol_Handlers.onReferences(connection)(runHandler("onReferences")(getTextDocUri)(LanguageServer_IdePurescript_References.getReferences(documents)))();
                          LanguageServer_Protocol_Handlers.onHover(connection)(runHandler("onHover")(getTextDocUri)(LanguageServer_IdePurescript_Tooltips.getTooltips(documents)))();
                          LanguageServer_Protocol_Handlers.onCodeAction(connection)(runHandler("onCodeAction")(getTextDocUri)(LanguageServer_IdePurescript_CodeActions.getActions(documents)))();
                          LanguageServer_Protocol_Handlers.onCodeLens(connection)(runHandler("onCodeLens")(getTextDocUri)(LanguageServer_IdePurescript_CodeLenses.getCodeLenses(stateRef)(documents)))();
                          LanguageServer_Protocol_Handlers.onShutdown(connection)(Control_Promise.fromAff(stopPscIdeServer))();
                          LanguageServer_Protocol_Handlers.onDidChangeWatchedFiles(connection)((function () {
                              var $167 = LanguageServer_IdePurescript_WatchedFiles.handleDidChangeWatchedFiles(configRef)(connection)(stateRef)(documents);
                              return function ($168) {
                                  return Effect_Aff.launchAff_($167($168));
                              };
                          })())();
                          LanguageServer_Protocol_DocumentStore.onDidChangeContent(documents)(function (textDocumentChangedEvent) {
                              return function __do() {
                                  LanguageServer_IdePurescript_ChangeContent.handleDidChangeContent(configRef)(connection)(stateRef)(restartPscIdeServer)(launchAffLog)(textDocumentChangedEvent)();
                                  return Effect_Ref.modify_(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function (v) {
                                      return {
                                          modulesFile: Data_Maybe.Nothing.value,
                                          buildQueue: v.buildQueue,
                                          clientCapabilities: v.clientCapabilities,
                                          connection: v.connection,
                                          deactivate: v.deactivate,
                                          diagnostics: v.diagnostics,
                                          modules: v.modules,
                                          parseResults: v.parseResults,
                                          previousRebuild: v.previousRebuild,
                                          pscIdePort: v.pscIdePort,
                                          root: v.root,
                                          runningRebuild: v.runningRebuild,
                                          showExportManagementCodeLenses: v.showExportManagementCodeLenses,
                                          successfulBuildTimes: v.successfulBuildTimes
                                      };
                                  }))(stateRef)();
                              };
                          })();
                          LanguageServer_Protocol_DocumentStore.onDidOpenDocument(documents)(function (v) {
                              return launchAffLog_(Control_Bind.bind(Effect_Aff.bindAff)(getPort(Effect_Aff.monadEffectAff)(stateRef))(function (mbPort) {
                                  var $151 = Data_Maybe.isJust(mbPort);
                                  if ($151) {
                                      return rebuildAndSendDiagnostics(configRef)(connection)(stateRef)(v.document);
                                  };
                                  var uri = Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)(LanguageServer_Protocol_TextDocument.getUri(v.document));
                                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function (st) {
                                      return {
                                          buildQueue: Foreign_Object.insert(uri)(v.document)(st.buildQueue),
                                          clientCapabilities: st.clientCapabilities,
                                          connection: st.connection,
                                          deactivate: st.deactivate,
                                          diagnostics: st.diagnostics,
                                          modules: st.modules,
                                          modulesFile: st.modulesFile,
                                          parseResults: st.parseResults,
                                          previousRebuild: st.previousRebuild,
                                          pscIdePort: st.pscIdePort,
                                          root: st.root,
                                          runningRebuild: st.runningRebuild,
                                          showExportManagementCodeLenses: st.showExportManagementCodeLenses,
                                          successfulBuildTimes: st.successfulBuildTimes
                                      };
                                  }))(stateRef));
                              }));
                          })();
                          return LanguageServer_Protocol_DocumentStore.onDidSaveDocument(documents)(function (v) {
                              return launchAffLog_(rebuildAndSendDiagnostics(configRef)(connection)(stateRef)(v.document));
                          })();
                      };
                  };
              };
          };
      };
  };
  var autoStartPcsIdeServer = function (configRef) {
      return function (connection) {
          return function (stateRef) {
              return function (notify) {
                  return function (documents) {
                      var workspaceRoot = getWorkspaceRoot(Effect_Class.monadEffectEffect)(stateRef);
                      var launchAffLog_ = Data_Functor.map(Data_Functor.functorFn)(Data_Functor["void"](Effect.functorEffect))(mkLaunchAffLog(function (dictMonadEffect) {
                          return notify(dictMonadEffect);
                      }));
                      var startPscIdeServer = mkStartPscIdeServer(configRef)(connection)(stateRef)(function (dictMonadEffect) {
                          return notify(dictMonadEffect);
                      });
                      var resolvePath = function (p) {
                          return function __do() {
                              var root = workspaceRoot();
                              return Node_Path.resolve([ root ])(p)();
                          };
                      };
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(configRef)))(function (config) {
                          return Control_Applicative.when(Effect_Aff.applicativeAff)(LanguageServer_IdePurescript_Config.autoStartPscIde(config))(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(startPscIdeServer)(function () {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(resolvePath(LanguageServer_IdePurescript_Config.effectiveOutputDirectory(config))))(function (outputDir) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Foldable.or(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(Control_Bind.composeKleisliFlipped(Effect_Aff.bindAff)(Node_FS_Aff.exists)((function () {
                                      var $169 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
                                      return function ($170) {
                                          return $169(resolvePath($170));
                                      };
                                  })()))([ "bower.json", "psc-package.json", "spago.dhall" ])))(function (hasPackageFile) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_IdePurescript_Server.getEnvPursIdeSources(Effect_Aff.monadEffectAff))(function (envIdeSources) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(!hasPackageFile && Data_Maybe.isNothing(envIdeSources))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Window.showError(connection)("It doesn't look like the workspace root is a PureScript project" + ("(has bower.json/psc-package.json/spago.dhall)." + "The PureScript project should be opened as a root workspace folder.")))))(function () {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.exists(outputDir))(function (exists) {
                                                  return Control_Applicative.unless(Effect_Aff.applicativeAff)(exists)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(launchAffLog_((function () {
                                                      var message = "Output directory does not exist at '" + (outputDir + "'");
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.info(connection)(message)))(function () {
                                                          return Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_Protocol_Window.showWarningWithActions(connection)(message + (". Ensure project is built, or check configuration of output directory" + " and build command."))([ "Build project" ]))(function (action) {
                                                              return Control_Applicative.when(Effect_Aff.applicativeAff)(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(action)(new Data_Maybe.Just("Build project")))(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(stateRef)))(function (s) {
                                                                  return buildProject(connection)(stateRef)(function (dictMonadEffect) {
                                                                      return notify(dictMonadEffect);
                                                                  })(documents)(config)(s)([  ]);
                                                              }));
                                                          });
                                                      });
                                                  })())));
                                              });
                                          });
                                      });
                                  });
                              });
                          }));
                      });
                  };
              };
          };
      };
  };
  var handleConfig = function (configRef) {
      return function (connection) {
          return function (stateRef) {
              return function (documents) {
                  return function (cmdLineConfig) {
                      return function (notify) {
                          var launchAffLog = Data_Functor.map(Data_Functor.functorFn)(Data_Functor["void"](Effect.functorEffect))(mkLaunchAffLog(function (dictMonadEffect) {
                              return notify(dictMonadEffect);
                          }));
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (v) {
                              var setConfig = function (source) {
                                  return function (newConfig) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                          LanguageServer_Protocol_Console.log(connection)("Got new config (" + (source + ")"))();
                                          return Effect_Ref.write(newConfig)(configRef)();
                                      }))(function () {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.tryPut(Data_Unit.unit)(v))(function (v1) {
                                              if (v1) {
                                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                              };
                                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(notify(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Info.value)("Not starting server, already started"));
                                          });
                                      });
                                  };
                              };
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Handlers.onDidChangeConfiguration(connection)(function (v1) {
                                  return launchAffLog(setConfig("client push")(v1.settings));
                              })))(function () {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.forkAff(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff_AVar.read(v))(function () {
                                      return autoStartPcsIdeServer(configRef)(connection)(stateRef)(function (dictMonadEffect) {
                                          return notify(dictMonadEffect);
                                      })(documents);
                                  })))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(cmdLineConfig)(setConfig("command line")))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(Data_Time_Duration.Milliseconds(50.0)))(function () {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Effect_AVar.isFilled)(Effect_Aff_AVar.status(v)))(function (got1) {
                                                  return Control_Applicative.unless(Effect_Aff.applicativeAff)(got1)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(LanguageServer_Protocol_Setup.getConfiguration(connection)))(function (initialConfig) {
                                                      if (initialConfig instanceof Data_Either.Right) {
                                                          return setConfig("by request")(initialConfig.value0);
                                                      };
                                                      if (initialConfig instanceof Data_Either.Left) {
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(connection)("Failed to request settings: " + Data_Show.show(Effect_Exception.showError)(initialConfig.value0))))(function () {
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(Data_Time_Duration.Milliseconds(200.0)))(function () {
                                                                  return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Effect_AVar.isFilled)(Effect_Aff_AVar.status(v)))(function (got2) {
                                                                      return Control_Applicative.unless(Effect_Aff.applicativeAff)(got2)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(notify(Effect_Class.monadEffectEffect)(IdePurescript_PscIdeServer.Warning.value)("Proceeding with no config received")))(function () {
                                                                          return Data_Functor["void"](Effect_Aff.functorAff)(Effect_Aff_AVar.tryPut(Data_Unit.unit)(v));
                                                                      }));
                                                                  });
                                                              });
                                                          });
                                                      };
                                                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 578, column 5 - line 589, column 44): " + [ initialConfig.constructor.name ]);
                                                  }));
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var main = function __do() {
      var args = Data_Functor.map(Effect.functorEffect)(parseArgs)(Node_Process.argv)();
      Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(args.filename)(function (filename) {
          return Node_FS_Sync.writeTextFile(Node_Encoding.UTF8.value)(filename)("Starting logging...\x0a");
      })();
      var stateRef = Effect_Ref["new"](defaultServerState)();
      var configRef = Effect_Ref["new"](Foreign.unsafeToForeign({}))();
      var connection = connect(stateRef)();
      var documents = LanguageServer_Protocol_Setup.initDocumentStore(connection)();
      var notify = mkNotify(args.filename)(stateRef);
      handleEvents(configRef)(connection)(stateRef)(documents)(function (dictMonadEffect) {
          return notify(dictMonadEffect);
      })();
      handleCommands(configRef)(connection)(stateRef)(documents)(function (dictMonadEffect) {
          return notify(dictMonadEffect);
      })();
      Effect_Aff.launchAff_(handleConfig(configRef)(connection)(stateRef)(documents)(args.config)(function (dictMonadEffect) {
          return notify(dictMonadEffect);
      }))();
      return LanguageServer_Protocol_Console.log(connection)("PureScript Language Server started")();
  };
  exports["main"] = main;
})(PS);
PS["LanguageServer.IdePurescript.Main"].main();